/*
    ____                      __      ____
   /\  _`\   __             /'_ `\   /\  _`\
   \ \ \L\_\/\_\    __  _  /\ \L\ \  \ \ \L\ \ _ __    ___
    \ \  _\/\/\ \  /\ \/'\ \/_> _ <_  \ \ ,__//\`'__\ / __`\
     \ \ \/  \ \ \ \/>  </   /\ \L\ \  \ \ \/ \ \ \/ /\ \L\ \
      \ \_\   \ \_\ /\_/\_\  \ \____/   \ \_\  \ \_\ \ \____/
       \/_/    \/_/ \//\/_/   \/___/     \/_/   \/_/  \/___/

               Fix8Pro FIX Engine and Framework

Copyright (C) 2010-19 Fix8 Market Technologies Pty Ltd (ABN 29 167 027 198)
All Rights Reserved. [http://www.fix8mt.com] <heretohelp@fix8mt.com>

THIS FILE IS PROPRIETARY AND  CONFIDENTIAL. NO PART OF THIS FILE MAY BE REPRODUCED,  STORED
IN A RETRIEVAL SYSTEM,  OR TRANSMITTED, IN ANY FORM OR ANY MEANS,  ELECTRONIC, PHOTOSTATIC,
RECORDED OR OTHERWISE, WITHOUT THE PRIOR AND  EXPRESS WRITTEN  PERMISSION  OF  FIX8  MARKET
TECHNOLOGIES PTY LTD.
*/

// Autogenerated on 2019-09-03 07:52:51.929240
// /home/sergey/src/f8/fix8pro/compiler/py/f8c/f8c.py --template ufe_java_fields ufe_cpp_fields ufe_cs_fields ufe_py_fields ufe_cpp_messages --output-dir ./generated --schema-dir /home/sergey/src/f8/fix8pro/schema/xml FIX50SP2 FIX42 FIX44 FIX40 FIX41 FIX43 FIX50 FIX50SP1
// DO NOT EDIT!

#ifndef UFECPP_FIELDS_FIX43_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_
#define UFECPP_FIELDS_FIX43_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_

#include <string>
#include <ufecpp/ufecppversion.h>

namespace UFECPP
{
	namespace FIX43
	{
		namespace Field
		{

			// Account(1): STRING
			struct Account
			{
				static constexpr uint16_t tag{ 1 };
			};

			// AdvId(2): STRING
			struct AdvId
			{
				static constexpr uint16_t tag{ 2 };
			};

			// AdvRefID(3): STRING
			struct AdvRefID
			{
				static constexpr uint16_t tag{ 3 };
			};

			// AdvSide(4): CHAR
			struct AdvSide
			{
				static constexpr uint16_t tag{ 4 };
				static constexpr char BUY{ 'B' };
				static constexpr char SELL{ 'S' };
				static constexpr char CROSS{ 'X' };
				static constexpr char TRADE{ 'T' };
			};

			// AdvTransType(5): STRING
			struct AdvTransType
			{
				static constexpr uint16_t tag{ 5 };
				static inline const std::string NEW{ "N" };
				static inline const std::string CANCEL{ "C" };
				static inline const std::string REPLACE{ "R" };
			};

			// AvgPx(6): PRICE
			struct AvgPx
			{
				static constexpr uint16_t tag{ 6 };
			};

			// BeginSeqNo(7): SEQNUM
			struct BeginSeqNo
			{
				static constexpr uint16_t tag{ 7 };
			};

			// BeginString(8): STRING
			struct BeginString
			{
				static constexpr uint16_t tag{ 8 };
			};

			// BodyLength(9): LENGTH
			struct BodyLength
			{
				static constexpr uint16_t tag{ 9 };
			};

			// CheckSum(10): STRING
			struct CheckSum
			{
				static constexpr uint16_t tag{ 10 };
			};

			// ClOrdID(11): STRING
			struct ClOrdID
			{
				static constexpr uint16_t tag{ 11 };
			};

			// Commission(12): AMT
			struct Commission
			{
				static constexpr uint16_t tag{ 12 };
			};

			// CommType(13): CHAR
			struct CommType
			{
				static constexpr uint16_t tag{ 13 };
				static constexpr char PER_BOND{ '6' };
				static constexpr char PER_SHARE{ '1' };
				static constexpr char PERCENTAGE{ '2' };
				static constexpr char ABSOLUTE{ '3' };
				static constexpr char _5{ '5' };
				static constexpr char _4{ '4' };
			};

			// CumQty(14): QTY
			struct CumQty
			{
				static constexpr uint16_t tag{ 14 };
			};

			// Currency(15): CURRENCY
			struct Currency
			{
				static constexpr uint16_t tag{ 15 };
			};

			// EndSeqNo(16): SEQNUM
			struct EndSeqNo
			{
				static constexpr uint16_t tag{ 16 };
			};

			// ExecID(17): STRING
			struct ExecID
			{
				static constexpr uint16_t tag{ 17 };
			};

			// ExecInst(18): MULTIPLEVALUESTRING
			struct ExecInst
			{
				static constexpr uint16_t tag{ 18 };
				static inline const std::string TRYTOSTOP{ "Y" };
				static inline const std::string MIDPRCPEG{ "M" };
				static inline const std::string MARKPEG{ "P" };
				static inline const std::string CANCELONSYSFAIL{ "Q" };
				static inline const std::string PRIMPEG{ "R" };
				static inline const std::string SUSPEND{ "S" };
				static inline const std::string CUSTDISPINST{ "U" };
				static inline const std::string NETTING{ "V" };
				static inline const std::string PEGVWAP{ "W" };
				static inline const std::string TRADEALONG{ "X" };
				static inline const std::string PERCVOL{ "D" };
				static inline const std::string STAYOFFER{ "0" };
				static inline const std::string WORK{ "2" };
				static inline const std::string OVERDAY{ "4" };
				static inline const std::string HELD{ "5" };
				static inline const std::string PARTNOTINIT{ "6" };
				static inline const std::string STRICTSCALE{ "7" };
				static inline const std::string TRYTOSCALE{ "8" };
				static inline const std::string STAYBID{ "9" };
				static inline const std::string NOCROSS{ "A" };
				static inline const std::string OPENPEG{ "O" };
				static inline const std::string CALLFIRST{ "C" };
				static inline const std::string NONNEGO{ "N" };
				static inline const std::string DNI{ "E" };
				static inline const std::string DNR{ "F" };
				static inline const std::string AON{ "G" };
				static inline const std::string RESTATEONSYSFAIL{ "H" };
				static inline const std::string INSTITONLY{ "I" };
				static inline const std::string RESTATEONTRADINGHALT{ "J" };
				static inline const std::string CANCELONTRADINGHALT{ "K" };
				static inline const std::string LASTPEG{ "L" };
				static inline const std::string GOALONG{ "3" };
				static inline const std::string OKCROSS{ "B" };
				static inline const std::string NOTHELD{ "1" };
			};

			// ExecRefID(19): STRING
			struct ExecRefID
			{
				static constexpr uint16_t tag{ 19 };
			};

			// ExecTransType(20): CHAR
			struct ExecTransType
			{
				static constexpr uint16_t tag{ 20 };
				static constexpr char CANCEL{ '1' };
				static constexpr char NEW{ '0' };
				static constexpr char STATUS{ '3' };
				static constexpr char CORRECT{ '2' };
			};

			// HandlInst(21): CHAR
			struct HandlInst
			{
				static constexpr uint16_t tag{ 21 };
				static constexpr char AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION{ '1' };
				static constexpr char AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK{ '2' };
				static constexpr char MANUAL_ORDER_BEST_EXECUTION{ '3' };
			};

			// SecurityIDSource(22): STRING
			struct SecurityIDSource
			{
				static constexpr uint16_t tag{ 22 };
				static inline const std::string SICOVAM{ "E" };
				static inline const std::string SEDOL{ "2" };
				static inline const std::string CUSIP{ "1" };
				static inline const std::string QUIK{ "3" };
				static inline const std::string BELGIAN{ "F" };
				static inline const std::string VALOREN{ "D" };
				static inline const std::string DUTCH{ "C" };
				static inline const std::string WERTPAPIER{ "B" };
				static inline const std::string BLOOMBERG_SYMBOL{ "A" };
				static inline const std::string CONSOLIDATED_TAPE_ASSOCIATION{ "9" };
				static inline const std::string EXCHANGE_SYMBOL{ "8" };
				static inline const std::string ISO_COUNTRY_CODE{ "7" };
				static inline const std::string ISO_CURRENCY_CODE{ "6" };
				static inline const std::string RIC_CODE{ "5" };
				static inline const std::string ISIN_NUMBER{ "4" };
				static inline const std::string COMMON{ "G" };
			};

			// IOIid(23): STRING
			struct IOIid
			{
				static constexpr uint16_t tag{ 23 };
			};

			// IOIOthSvc(24): CHAR
			struct IOIOthSvc
			{
				static constexpr uint16_t tag{ 24 };
			};

			// IOIQltyInd(25): CHAR
			struct IOIQltyInd
			{
				static constexpr uint16_t tag{ 25 };
				static constexpr char MEDIUM{ 'M' };
				static constexpr char HIGH{ 'H' };
				static constexpr char LOW{ 'L' };
			};

			// IOIRefID(26): STRING
			struct IOIRefID
			{
				static constexpr uint16_t tag{ 26 };
			};

			// IOIQty(27): STRING
			struct IOIQty
			{
				static constexpr uint16_t tag{ 27 };
				static inline const std::string LARGE{ "L" };
				static inline const std::string MEDIUM{ "M" };
				static inline const std::string SMALL{ "S" };
			};

			// IOITransType(28): CHAR
			struct IOITransType
			{
				static constexpr uint16_t tag{ 28 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
			};

			// LastCapacity(29): CHAR
			struct LastCapacity
			{
				static constexpr uint16_t tag{ 29 };
				static constexpr char PRINCIPAL{ '4' };
				static constexpr char CROSS_AS_PRINCIPAL{ '3' };
				static constexpr char AGENT{ '1' };
				static constexpr char CROSS_AS_AGENT{ '2' };
			};

			// LastMkt(30): EXCHANGE
			struct LastMkt
			{
				static constexpr uint16_t tag{ 30 };
			};

			// LastPx(31): PRICE
			struct LastPx
			{
				static constexpr uint16_t tag{ 31 };
			};

			// LastQty(32): QTY
			struct LastQty
			{
				static constexpr uint16_t tag{ 32 };
			};

			// LinesOfText(33): NUMINGROUP
			struct LinesOfText
			{
				static constexpr uint16_t tag{ 33 };
			};

			// MsgSeqNum(34): SEQNUM
			struct MsgSeqNum
			{
				static constexpr uint16_t tag{ 34 };
			};

			// MsgType(35): STRING
			struct MsgType
			{
				static constexpr uint16_t tag{ 35 };
				static inline const std::string LIST_STRIKE_PRICE{ "m" };
				static inline const std::string BID_RESPONSE{ "l" };
				static inline const std::string BID_REQUEST{ "k" };
				static inline const std::string BUSINESS_MESSAGE_REJECT{ "j" };
				static inline const std::string MASS_QUOTE{ "i" };
				static inline const std::string TRADING_SESSION_STATUS{ "h" };
				static inline const std::string ORDER_MASS_CANCEL_REQUEST{ "q" };
				static inline const std::string TRADE_CAPTURE_REPORT{ "AE" };
				static inline const std::string REGISTRATION_INSTRUCTIONS{ "o" };
				static inline const std::string DERIVATIVE_SECURITY_LIST_REQUEST{ "z" };
				static inline const std::string QUOTE_STATUS_REPORT{ "AI" };
				static inline const std::string RFQ_REQUEST{ "AH" };
				static inline const std::string QUOTE_REQUEST_REJECT{ "AG" };
				static inline const std::string ORDER_MASS_STATUS_REQUEST{ "AF" };
				static inline const std::string XML_MESSAGE{ "n" };
				static inline const std::string TRADE_CAPTURE_REPORT_REQUEST{ "AD" };
				static inline const std::string TRADING_SESSION_STATUS_REQUEST{ "g" };
				static inline const std::string MULTILEG_ORDER_CANCEL_REPLACE{ "AC" };
				static inline const std::string DERIVATIVE_SECURITY_LIST{ "AA" };
				static inline const std::string ORDER_MASS_CANCEL_REPORT{ "r" };
				static inline const std::string SECURITY_LIST{ "y" };
				static inline const std::string SECURITY_LIST_REQUEST{ "x" };
				static inline const std::string SECURITY_TYPES{ "w" };
				static inline const std::string SECURITY_TYPE_REQUEST{ "v" };
				static inline const std::string CROSS_ORDER_CANCEL_REQUEST{ "u" };
				static inline const std::string CROSS_ORDER_CANCEL_REPLACE_REQUEST{ "t" };
				static inline const std::string NEW_ORDER_s{ "s" };
				static inline const std::string NEW_ORDER_AB{ "AB" };
				static inline const std::string ORDER_CANCEL_REJECT{ "9" };
				static inline const std::string ADVERTISEMENT{ "7" };
				static inline const std::string LIST_STATUS_REQUEST{ "M" };
				static inline const std::string ORDER_LIST{ "E" };
				static inline const std::string ORDER_SINGLE{ "D" };
				static inline const std::string EMAIL{ "C" };
				static inline const std::string NEWS{ "B" };
				static inline const std::string LOGON{ "A" };
				static inline const std::string LIST_STATUS{ "N" };
				static inline const std::string SECURITY_STATUS{ "f" };
				static inline const std::string ALLOCATION_ACK{ "P" };
				static inline const std::string EXECUTION_REPORT{ "8" };
				static inline const std::string HEARTBEAT{ "0" };
				static inline const std::string TEST_REQUEST{ "1" };
				static inline const std::string RESEND_REQUEST{ "2" };
				static inline const std::string REJECT{ "3" };
				static inline const std::string SEQUENCE_RESET{ "4" };
				static inline const std::string LOGOUT{ "5" };
				static inline const std::string INDICATION_OF_INTEREST{ "6" };
				static inline const std::string ORDER_CANCEL_REPLACE_REQUEST{ "G" };
				static inline const std::string LIST_CANCEL_REQUEST{ "K" };
				static inline const std::string SECURITY_STATUS_REQUEST{ "e" };
				static inline const std::string SECURITY_DEFINITION{ "d" };
				static inline const std::string SECURITY_DEFINITION_REQUEST{ "c" };
				static inline const std::string MASS_QUOTE_ACKNOWLEDGEMENT{ "b" };
				static inline const std::string QUOTE_STATUS_REQUEST{ "a" };
				static inline const std::string QUOTE_CANCEL{ "Z" };
				static inline const std::string MARKET_DATA_REQUEST_REJECT{ "Y" };
				static inline const std::string ORDER_CANCEL_REQUEST{ "F" };
				static inline const std::string ALLOCATION{ "J" };
				static inline const std::string REGISTRATION_INSTRUCTIONS_RESPONSE{ "p" };
				static inline const std::string LIST_EXECUTE{ "L" };
				static inline const std::string MARKET_DATA_INCREMENTAL_REFRESH{ "X" };
				static inline const std::string MARKET_DATA_SNAPSHOT_FULL_REFRESH{ "W" };
				static inline const std::string MARKET_DATA_REQUEST{ "V" };
				static inline const std::string SETTLEMENT_INSTRUCTIONS{ "T" };
				static inline const std::string QUOTE{ "S" };
				static inline const std::string QUOTE_REQUEST{ "R" };
				static inline const std::string DONT_KNOW_TRADE{ "Q" };
				static inline const std::string ORDER_STATUS_REQUEST{ "H" };
			};

			// NewSeqNo(36): SEQNUM
			struct NewSeqNo
			{
				static constexpr uint16_t tag{ 36 };
			};

			// OrderID(37): STRING
			struct OrderID
			{
				static constexpr uint16_t tag{ 37 };
			};

			// OrderQty(38): QTY
			struct OrderQty
			{
				static constexpr uint16_t tag{ 38 };
			};

			// OrdStatus(39): CHAR
			struct OrdStatus
			{
				static constexpr uint16_t tag{ 39 };
				static constexpr char NEW{ '0' };
				static constexpr char PARTIALLY_FILLED{ '1' };
				static constexpr char REPLACED{ '5' };
				static constexpr char FILLED{ '2' };
				static constexpr char PENDING_CANCEL{ '6' };
				static constexpr char STOPPED{ '7' };
				static constexpr char REJECTED{ '8' };
				static constexpr char SUSPENDED{ '9' };
				static constexpr char PENDING_NEW{ 'A' };
				static constexpr char CALCULATED{ 'B' };
				static constexpr char EXPIRED{ 'C' };
				static constexpr char ACCEPTED_FOR_BIDDING{ 'D' };
				static constexpr char PENDING_REPLACE{ 'E' };
				static constexpr char DONE_FOR_DAY{ '3' };
				static constexpr char CANCELED{ '4' };
			};

			// OrdType(40): CHAR
			struct OrdType
			{
				static constexpr uint16_t tag{ 40 };
				static constexpr char PREVIOUSLY_QUOTED{ 'D' };
				static constexpr char LIMIT{ '2' };
				static constexpr char STOP{ '3' };
				static constexpr char STOP_LIMIT{ '4' };
				static constexpr char MARKET_ON_CLOSE{ '5' };
				static constexpr char WITH_OR_WITHOUT{ '6' };
				static constexpr char LIMIT_OR_BETTER{ '7' };
				static constexpr char LIMIT_WITH_OR_WITHOUT{ '8' };
				static constexpr char ON_BASIS{ '9' };
				static constexpr char ON_CLOSE{ 'A' };
				static constexpr char MARKET{ '1' };
				static constexpr char FOREX_C{ 'C' };
				static constexpr char FOREX_F{ 'F' };
				static constexpr char PREVIOUSLY_INDICATED{ 'E' };
				static constexpr char FOREX_G{ 'G' };
				static constexpr char FUNARI{ 'I' };
				static constexpr char MARKET_IF_TOUCHED{ 'J' };
				static constexpr char MARKET_WITH_LEFTOVER_AS_LIMIT{ 'K' };
				static constexpr char PREVIOUS_FUND_VALUATION_POINT{ 'L' };
				static constexpr char NEXT_FUND_VALUATION_POINT{ 'M' };
				static constexpr char PEGGED{ 'P' };
				static constexpr char LIMIT_ON_CLOSE{ 'B' };
				static constexpr char FOREX_H{ 'H' };
			};

			// OrigClOrdID(41): STRING
			struct OrigClOrdID
			{
				static constexpr uint16_t tag{ 41 };
			};

			// OrigTime(42): UTCTIMESTAMP
			struct OrigTime
			{
				static constexpr uint16_t tag{ 42 };
			};

			// PossDupFlag(43): BOOLEAN
			struct PossDupFlag
			{
				static constexpr uint16_t tag{ 43 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// Price(44): PRICE
			struct Price
			{
				static constexpr uint16_t tag{ 44 };
			};

			// RefSeqNum(45): SEQNUM
			struct RefSeqNum
			{
				static constexpr uint16_t tag{ 45 };
			};

			// RelatdSym(46): STRING
			struct RelatdSym
			{
				static constexpr uint16_t tag{ 46 };
			};

			// Rule80A(47): CHAR
			struct Rule80A
			{
				static constexpr uint16_t tag{ 47 };
				static constexpr char PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER{ 'N' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_B{ 'B' };
				static constexpr char PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_ORG{ 'D' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL{ 'E' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_F{ 'F' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_H{ 'H' };
				static constexpr char INDIVIDUAL_INVESTOR_SINGLE_ORDER{ 'I' };
				static constexpr char PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER{ 'J' };
				static constexpr char PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER{ 'K' };
				static constexpr char PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER{ 'M' };
				static constexpr char AGENCY_SINGLE_ORDER{ 'A' };
				static constexpr char PROPRIETARY_TRANSACTIONS_FOR_COMPETING_MARKET_MAKER_THAT_IS_AFFILIATED_WITH_THE_CLEARING_MEMBER{ 'O' };
				static constexpr char PRINCIPAL{ 'P' };
				static constexpr char TRANSACTIONS_FOR_THE_ACCOUNT_OF_A_NON_MEMBER_COMPETING_MARKET_MAKER{ 'R' };
				static constexpr char SPECIALIST_TRADES{ 'S' };
				static constexpr char TRANSACTIONS_FOR_THE_ACCOUNT_OF_AN_UNAFFILIATED_MEMBERS_COMPETING_MARKET_MAKER{ 'T' };
				static constexpr char PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY{ 'U' };
				static constexpr char ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER{ 'W' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_NOT_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE{ 'X' };
				static constexpr char PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY{ 'Y' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_NON_MEMBER_COMPETING_MARKET_MAKER{ 'Z' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE{ 'L' };
				static constexpr char PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_ORG{ 'C' };
			};

			// SecurityID(48): STRING
			struct SecurityID
			{
				static constexpr uint16_t tag{ 48 };
			};

			// SenderCompID(49): STRING
			struct SenderCompID
			{
				static constexpr uint16_t tag{ 49 };
			};

			// SenderSubID(50): STRING
			struct SenderSubID
			{
				static constexpr uint16_t tag{ 50 };
			};

			// SendingDate(51): LOCALMKTDATE
			struct SendingDate
			{
				static constexpr uint16_t tag{ 51 };
			};

			// SendingTime(52): UTCTIMESTAMP
			struct SendingTime
			{
				static constexpr uint16_t tag{ 52 };
			};

			// Quantity(53): QTY
			struct Quantity
			{
				static constexpr uint16_t tag{ 53 };
			};

			// Side(54): CHAR
			struct Side
			{
				static constexpr uint16_t tag{ 54 };
				static constexpr char SELL_SHORT_EXEMPT{ '6' };
				static constexpr char AS_DEFINED{ 'B' };
				static constexpr char OPPOSITE{ 'C' };
				static constexpr char CROSS{ '8' };
				static constexpr char CROSS_SHORT{ '9' };
				static constexpr char BUY{ '1' };
				static constexpr char SELL{ '2' };
				static constexpr char BUY_MINUS{ '3' };
				static constexpr char SELL_PLUS{ '4' };
				static constexpr char CROSS_SHORT_EXEMPT{ 'A' };
				static constexpr char SELL_SHORT{ '5' };
				static constexpr char UNDISCLOSED{ '7' };
			};

			// Symbol(55): STRING
			struct Symbol
			{
				static constexpr uint16_t tag{ 55 };
			};

			// TargetCompID(56): STRING
			struct TargetCompID
			{
				static constexpr uint16_t tag{ 56 };
			};

			// TargetSubID(57): STRING
			struct TargetSubID
			{
				static constexpr uint16_t tag{ 57 };
			};

			// Text(58): STRING
			struct Text
			{
				static constexpr uint16_t tag{ 58 };
			};

			// TimeInForce(59): CHAR
			struct TimeInForce
			{
				static constexpr uint16_t tag{ 59 };
				static constexpr char AT_THE_CLOSE{ '7' };
				static constexpr char DAY{ '0' };
				static constexpr char GOOD_TILL_CANCEL{ '1' };
				static constexpr char AT_THE_OPENING{ '2' };
				static constexpr char IMMEDIATE_OR_CANCEL{ '3' };
				static constexpr char FILL_OR_KILL{ '4' };
				static constexpr char GOOD_TILL_CROSSING{ '5' };
				static constexpr char GOOD_TILL_DATE{ '6' };
			};

			// TransactTime(60): UTCTIMESTAMP
			struct TransactTime
			{
				static constexpr uint16_t tag{ 60 };
			};

			// Urgency(61): CHAR
			struct Urgency
			{
				static constexpr uint16_t tag{ 61 };
				static constexpr char FLASH{ '1' };
				static constexpr char BACKGROUND{ '2' };
				static constexpr char NORMAL{ '0' };
			};

			// ValidUntilTime(62): UTCTIMESTAMP
			struct ValidUntilTime
			{
				static constexpr uint16_t tag{ 62 };
			};

			// SettlmntTyp(63): CHAR
			struct SettlmntTyp
			{
				static constexpr uint16_t tag{ 63 };
				static constexpr char T_PLUS_4{ '5' };
				static constexpr char T_PLUS_1{ 'A' };
				static constexpr char FUTURE{ '6' };
				static constexpr char T_PLUS_2{ '3' };
				static constexpr char NEXT_DAY{ '2' };
				static constexpr char SELLERS_OPTION{ '8' };
				static constexpr char CASH{ '1' };
				static constexpr char WHEN_AND_IF_ISSUED{ '7' };
				static constexpr char REGULAR{ '0' };
				static constexpr char T_PLUS_5{ '9' };
				static constexpr char T_PLUS_3{ '4' };
			};

			// FutSettDate(64): LOCALMKTDATE
			struct FutSettDate
			{
				static constexpr uint16_t tag{ 64 };
			};

			// SymbolSfx(65): STRING
			struct SymbolSfx
			{
				static constexpr uint16_t tag{ 65 };
			};

			// ListID(66): STRING
			struct ListID
			{
				static constexpr uint16_t tag{ 66 };
			};

			// ListSeqNo(67): INT
			struct ListSeqNo
			{
				static constexpr uint16_t tag{ 67 };
			};

			// TotNoOrders(68): INT
			struct TotNoOrders
			{
				static constexpr uint16_t tag{ 68 };
			};

			// ListExecInst(69): STRING
			struct ListExecInst
			{
				static constexpr uint16_t tag{ 69 };
			};

			// AllocID(70): STRING
			struct AllocID
			{
				static constexpr uint16_t tag{ 70 };
			};

			// AllocTransType(71): CHAR
			struct AllocTransType
			{
				static constexpr uint16_t tag{ 71 };
				static constexpr char CALCULATED_WITHOUT_PRELIMINARY{ '5' };
				static constexpr char CALCULATED{ '4' };
				static constexpr char PRELIMINARY{ '3' };
				static constexpr char CANCEL{ '2' };
				static constexpr char REPLACE{ '1' };
				static constexpr char NEW{ '0' };
			};

			// RefAllocID(72): STRING
			struct RefAllocID
			{
				static constexpr uint16_t tag{ 72 };
			};

			// NoOrders(73): NUMINGROUP
			struct NoOrders
			{
				static constexpr uint16_t tag{ 73 };
			};

			// AvgPrxPrecision(74): INT
			struct AvgPrxPrecision
			{
				static constexpr uint16_t tag{ 74 };
			};

			// TradeDate(75): LOCALMKTDATE
			struct TradeDate
			{
				static constexpr uint16_t tag{ 75 };
			};

			// ExecBroker(76): STRING
			struct ExecBroker
			{
				static constexpr uint16_t tag{ 76 };
			};

			// PositionEffect(77): CHAR
			struct PositionEffect
			{
				static constexpr uint16_t tag{ 77 };
				static constexpr char FIFO{ 'F' };
				static constexpr char ROLLED{ 'R' };
				static constexpr char CLOSE{ 'C' };
				static constexpr char OPEN{ 'O' };
			};

			// NoAllocs(78): NUMINGROUP
			struct NoAllocs
			{
				static constexpr uint16_t tag{ 78 };
			};

			// AllocAccount(79): STRING
			struct AllocAccount
			{
				static constexpr uint16_t tag{ 79 };
			};

			// AllocQty(80): QTY
			struct AllocQty
			{
				static constexpr uint16_t tag{ 80 };
			};

			// ProcessCode(81): CHAR
			struct ProcessCode
			{
				static constexpr uint16_t tag{ 81 };
				static constexpr char PLAN_SPONSOR{ '6' };
				static constexpr char REGULAR{ '0' };
				static constexpr char SOFT_DOLLAR{ '1' };
				static constexpr char STEP_IN{ '2' };
				static constexpr char STEP_OUT{ '3' };
				static constexpr char SOFT_DOLLAR_STEP_IN{ '4' };
				static constexpr char SOFT_DOLLAR_STEP_OUT{ '5' };
			};

			// NoRpts(82): NUMINGROUP
			struct NoRpts
			{
				static constexpr uint16_t tag{ 82 };
			};

			// RptSeq(83): INT
			struct RptSeq
			{
				static constexpr uint16_t tag{ 83 };
			};

			// CxlQty(84): QTY
			struct CxlQty
			{
				static constexpr uint16_t tag{ 84 };
			};

			// NoDlvyInst(85): INT
			struct NoDlvyInst
			{
				static constexpr uint16_t tag{ 85 };
			};

			// DlvyInst(86): STRING
			struct DlvyInst
			{
				static constexpr uint16_t tag{ 86 };
			};

			// AllocStatus(87): INT
			struct AllocStatus
			{
				static constexpr uint16_t tag{ 87 };
				static constexpr int32_t REJECTED{ 1 };
				static constexpr int32_t PARTIAL_ACCEPT{ 2 };
				static constexpr int32_t RECEIVED{ 3 };
				static constexpr int32_t ACCEPTED{ 0 };
			};

			// AllocRejCode(88): INT
			struct AllocRejCode
			{
				static constexpr uint16_t tag{ 88 };
				static constexpr int32_t UNKNOWN_ACCOUNT{ 0 };
				static constexpr int32_t UNKNOWN_LISTID{ 6 };
				static constexpr int32_t UNKNOWN_EXECUTING_BROKER_MNEMONIC{ 3 };
				static constexpr int32_t UNKNOWN_ORDERID{ 5 };
				static constexpr int32_t OTHER{ 7 };
				static constexpr int32_t COMMISSION_DIFFERENCE{ 4 };
				static constexpr int32_t INCORRECT_QUANTITY{ 1 };
				static constexpr int32_t INCORRECT_AVERAGE_PRICE{ 2 };
			};

			// Signature(89): DATA
			struct Signature
			{
				static constexpr uint16_t tag{ 89 };
			};

			// SecureDataLen(90): LENGTH
			struct SecureDataLen
			{
				static constexpr uint16_t tag{ 90 };
			};

			// SecureData(91): DATA
			struct SecureData
			{
				static constexpr uint16_t tag{ 91 };
			};

			// BrokerOfCredit(92): STRING
			struct BrokerOfCredit
			{
				static constexpr uint16_t tag{ 92 };
			};

			// SignatureLength(93): LENGTH
			struct SignatureLength
			{
				static constexpr uint16_t tag{ 93 };
			};

			// EmailType(94): CHAR
			struct EmailType
			{
				static constexpr uint16_t tag{ 94 };
				static constexpr char NEW{ '0' };
				static constexpr char REPLY{ '1' };
				static constexpr char ADMIN_REPLY{ '2' };
			};

			// RawDataLength(95): LENGTH
			struct RawDataLength
			{
				static constexpr uint16_t tag{ 95 };
			};

			// RawData(96): DATA
			struct RawData
			{
				static constexpr uint16_t tag{ 96 };
			};

			// PossResend(97): BOOLEAN
			struct PossResend
			{
				static constexpr uint16_t tag{ 97 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// EncryptMethod(98): INT
			struct EncryptMethod
			{
				static constexpr uint16_t tag{ 98 };
				static constexpr int32_t DES{ 2 };
				static constexpr int32_t PEM_DES_MD5{ 6 };
				static constexpr int32_t PGP_DES_MD5{ 5 };
				static constexpr int32_t PKCS_DES{ 3 };
				static constexpr int32_t NONE{ 0 };
				static constexpr int32_t PKCS{ 1 };
				static constexpr int32_t PGP_DES{ 4 };
			};

			// StopPx(99): PRICE
			struct StopPx
			{
				static constexpr uint16_t tag{ 99 };
			};

			// ExDestination(100): EXCHANGE
			struct ExDestination
			{
				static constexpr uint16_t tag{ 100 };
			};

			// CxlRejReason(102): INT
			struct CxlRejReason
			{
				static constexpr uint16_t tag{ 102 };
				static constexpr int32_t UNKNOWN_ORDER{ 1 };
				static constexpr int32_t TOO_LATE_TO_CANCEL{ 0 };
				static constexpr int32_t DUPLICATE_CLORDID_RECEIVED{ 6 };
				static constexpr int32_t ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER{ 5 };
				static constexpr int32_t UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST{ 4 };
				static constexpr int32_t ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS{ 3 };
				static constexpr int32_t BROKER{ 2 };
			};

			// OrdRejReason(103): INT
			struct OrdRejReason
			{
				static constexpr uint16_t tag{ 103 };
				static constexpr int32_t EXCHANGE_CLOSED{ 2 };
				static constexpr int32_t UNKNOWN_SYMBOL{ 1 };
				static constexpr int32_t ORDER_EXCEEDS_LIMIT{ 3 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t UNKNOWN_ORDER{ 5 };
				static constexpr int32_t DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER{ 7 };
				static constexpr int32_t TRADE_ALONG_REQUIRED{ 9 };
				static constexpr int32_t INVALID_INVESTOR_ID{ 10 };
				static constexpr int32_t DUPLICATE_ORDER{ 6 };
				static constexpr int32_t UNSUPPORTED_ORDER_CHARACTERISTIC{ 11 };
				static constexpr int32_t SURVEILLENCE_OPTION{ 12 };
				static constexpr int32_t BROKER{ 0 };
				static constexpr int32_t STALE_ORDER{ 8 };
			};

			// IOIQualifier(104): CHAR
			struct IOIQualifier
			{
				static constexpr uint16_t tag{ 104 };
				static constexpr char AT_THE_OPEN{ 'O' };
				static constexpr char CROSSING_OPPORTUNITY{ 'X' };
				static constexpr char INDICATION{ 'W' };
				static constexpr char VERSUS{ 'V' };
				static constexpr char THROUGH_THE_DAY{ 'T' };
				static constexpr char PORTFOLIO_SHOWN{ 'S' };
				static constexpr char READY_TO_TRADE{ 'R' };
				static constexpr char ALL_OR_NONE{ 'A' };
				static constexpr char TAKING_A_POSITION{ 'P' };
				static constexpr char MORE_BEHIND{ 'M' };
				static constexpr char LIMIT{ 'L' };
				static constexpr char IN_TOUCH_WITH{ 'I' };
				static constexpr char VWAP{ 'D' };
				static constexpr char AT_THE_CLOSE{ 'C' };
				static constexpr char MARKET_ON_CLOSE{ 'B' };
				static constexpr char AT_THE_MARKET{ 'Q' };
				static constexpr char AT_THE_MIDPOINT{ 'Y' };
				static constexpr char PRE_OPEN{ 'Z' };
			};

			// WaveNo(105): STRING
			struct WaveNo
			{
				static constexpr uint16_t tag{ 105 };
			};

			// Issuer(106): STRING
			struct Issuer
			{
				static constexpr uint16_t tag{ 106 };
			};

			// SecurityDesc(107): STRING
			struct SecurityDesc
			{
				static constexpr uint16_t tag{ 107 };
			};

			// HeartBtInt(108): INT
			struct HeartBtInt
			{
				static constexpr uint16_t tag{ 108 };
			};

			// ClientID(109): STRING
			struct ClientID
			{
				static constexpr uint16_t tag{ 109 };
			};

			// MinQty(110): QTY
			struct MinQty
			{
				static constexpr uint16_t tag{ 110 };
			};

			// MaxFloor(111): QTY
			struct MaxFloor
			{
				static constexpr uint16_t tag{ 111 };
			};

			// TestReqID(112): STRING
			struct TestReqID
			{
				static constexpr uint16_t tag{ 112 };
			};

			// ReportToExch(113): BOOLEAN
			struct ReportToExch
			{
				static constexpr uint16_t tag{ 113 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// LocateReqd(114): BOOLEAN
			struct LocateReqd
			{
				static constexpr uint16_t tag{ 114 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// OnBehalfOfCompID(115): STRING
			struct OnBehalfOfCompID
			{
				static constexpr uint16_t tag{ 115 };
			};

			// OnBehalfOfSubID(116): STRING
			struct OnBehalfOfSubID
			{
				static constexpr uint16_t tag{ 116 };
			};

			// QuoteID(117): STRING
			struct QuoteID
			{
				static constexpr uint16_t tag{ 117 };
			};

			// NetMoney(118): AMT
			struct NetMoney
			{
				static constexpr uint16_t tag{ 118 };
			};

			// SettlCurrAmt(119): AMT
			struct SettlCurrAmt
			{
				static constexpr uint16_t tag{ 119 };
			};

			// SettlCurrency(120): CURRENCY
			struct SettlCurrency
			{
				static constexpr uint16_t tag{ 120 };
			};

			// ForexReq(121): BOOLEAN
			struct ForexReq
			{
				static constexpr uint16_t tag{ 121 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// OrigSendingTime(122): UTCTIMESTAMP
			struct OrigSendingTime
			{
				static constexpr uint16_t tag{ 122 };
			};

			// GapFillFlag(123): BOOLEAN
			struct GapFillFlag
			{
				static constexpr uint16_t tag{ 123 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// NoExecs(124): NUMINGROUP
			struct NoExecs
			{
				static constexpr uint16_t tag{ 124 };
			};

			// CxlType(125): CHAR
			struct CxlType
			{
				static constexpr uint16_t tag{ 125 };
			};

			// ExpireTime(126): UTCTIMESTAMP
			struct ExpireTime
			{
				static constexpr uint16_t tag{ 126 };
			};

			// DKReason(127): CHAR
			struct DKReason
			{
				static constexpr uint16_t tag{ 127 };
				static constexpr char WRONG_SIDE{ 'B' };
				static constexpr char QUANTITY_EXCEEDS_ORDER{ 'C' };
				static constexpr char NO_MATCHING_ORDER{ 'D' };
				static constexpr char PRICE_EXCEEDS_LIMIT{ 'E' };
				static constexpr char OTHER{ 'Z' };
				static constexpr char UNKNOWN_SYMBOL{ 'A' };
			};

			// DeliverToCompID(128): STRING
			struct DeliverToCompID
			{
				static constexpr uint16_t tag{ 128 };
			};

			// DeliverToSubID(129): STRING
			struct DeliverToSubID
			{
				static constexpr uint16_t tag{ 129 };
			};

			// IOINaturalFlag(130): BOOLEAN
			struct IOINaturalFlag
			{
				static constexpr uint16_t tag{ 130 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// QuoteReqID(131): STRING
			struct QuoteReqID
			{
				static constexpr uint16_t tag{ 131 };
			};

			// BidPx(132): PRICE
			struct BidPx
			{
				static constexpr uint16_t tag{ 132 };
			};

			// OfferPx(133): PRICE
			struct OfferPx
			{
				static constexpr uint16_t tag{ 133 };
			};

			// BidSize(134): QTY
			struct BidSize
			{
				static constexpr uint16_t tag{ 134 };
			};

			// OfferSize(135): QTY
			struct OfferSize
			{
				static constexpr uint16_t tag{ 135 };
			};

			// NoMiscFees(136): NUMINGROUP
			struct NoMiscFees
			{
				static constexpr uint16_t tag{ 136 };
			};

			// MiscFeeAmt(137): AMT
			struct MiscFeeAmt
			{
				static constexpr uint16_t tag{ 137 };
			};

			// MiscFeeCurr(138): CURRENCY
			struct MiscFeeCurr
			{
				static constexpr uint16_t tag{ 138 };
			};

			// MiscFeeType(139): CHAR
			struct MiscFeeType
			{
				static constexpr uint16_t tag{ 139 };
				static constexpr char LOCAL_COMMISSION{ '3' };
				static constexpr char EXCHANGE_FEES{ '4' };
				static constexpr char STAMP{ '5' };
				static constexpr char LEVY{ '6' };
				static constexpr char OTHER{ '7' };
				static constexpr char MARKUP{ '8' };
				static constexpr char CONSUMPTION_TAX{ '9' };
				static constexpr char REGULATORY{ '1' };
				static constexpr char TAX{ '2' };
			};

			// PrevClosePx(140): PRICE
			struct PrevClosePx
			{
				static constexpr uint16_t tag{ 140 };
			};

			// ResetSeqNumFlag(141): BOOLEAN
			struct ResetSeqNumFlag
			{
				static constexpr uint16_t tag{ 141 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// SenderLocationID(142): STRING
			struct SenderLocationID
			{
				static constexpr uint16_t tag{ 142 };
			};

			// TargetLocationID(143): STRING
			struct TargetLocationID
			{
				static constexpr uint16_t tag{ 143 };
			};

			// OnBehalfOfLocationID(144): STRING
			struct OnBehalfOfLocationID
			{
				static constexpr uint16_t tag{ 144 };
			};

			// DeliverToLocationID(145): STRING
			struct DeliverToLocationID
			{
				static constexpr uint16_t tag{ 145 };
			};

			// NoRelatedSym(146): NUMINGROUP
			struct NoRelatedSym
			{
				static constexpr uint16_t tag{ 146 };
			};

			// Subject(147): STRING
			struct Subject
			{
				static constexpr uint16_t tag{ 147 };
			};

			// Headline(148): STRING
			struct Headline
			{
				static constexpr uint16_t tag{ 148 };
			};

			// URLLink(149): STRING
			struct URLLink
			{
				static constexpr uint16_t tag{ 149 };
			};

			// ExecType(150): CHAR
			struct ExecType
			{
				static constexpr uint16_t tag{ 150 };
				static constexpr char PENDING_CANCEL{ '6' };
				static constexpr char NEW{ '0' };
				static constexpr char PARTIAL_FILL{ '1' };
				static constexpr char FILL{ '2' };
				static constexpr char CANCELED{ '4' };
				static constexpr char REPLACE{ '5' };
				static constexpr char REJECTED{ '8' };
				static constexpr char SUSPENDED{ '9' };
				static constexpr char PENDING_NEW{ 'A' };
				static constexpr char CALCULATED{ 'B' };
				static constexpr char EXPIRED{ 'C' };
				static constexpr char RESTATED{ 'D' };
				static constexpr char PENDING_REPLACE{ 'E' };
				static constexpr char TRADE{ 'F' };
				static constexpr char TRADE_CORRECT{ 'G' };
				static constexpr char TRADE_CANCEL{ 'H' };
				static constexpr char ORDER_STATUS{ 'I' };
				static constexpr char DONE_FOR_DAY{ '3' };
				static constexpr char STOPPED{ '7' };
			};

			// LeavesQty(151): QTY
			struct LeavesQty
			{
				static constexpr uint16_t tag{ 151 };
			};

			// CashOrderQty(152): QTY
			struct CashOrderQty
			{
				static constexpr uint16_t tag{ 152 };
			};

			// AllocAvgPx(153): PRICE
			struct AllocAvgPx
			{
				static constexpr uint16_t tag{ 153 };
			};

			// AllocNetMoney(154): AMT
			struct AllocNetMoney
			{
				static constexpr uint16_t tag{ 154 };
			};

			// SettlCurrFxRate(155): FLOAT
			struct SettlCurrFxRate
			{
				static constexpr uint16_t tag{ 155 };
			};

			// SettlCurrFxRateCalc(156): CHAR
			struct SettlCurrFxRateCalc
			{
				static constexpr uint16_t tag{ 156 };
				static constexpr char DIVIDE{ 'D' };
				static constexpr char MULTIPLY{ 'M' };
			};

			// NumDaysInterest(157): INT
			struct NumDaysInterest
			{
				static constexpr uint16_t tag{ 157 };
			};

			// AccruedInterestRate(158): PERCENTAGE
			struct AccruedInterestRate
			{
				static constexpr uint16_t tag{ 158 };
			};

			// AccruedInterestAmt(159): AMT
			struct AccruedInterestAmt
			{
				static constexpr uint16_t tag{ 159 };
			};

			// SettlInstMode(160): CHAR
			struct SettlInstMode
			{
				static constexpr uint16_t tag{ 160 };
				static constexpr char DEFAULT{ '0' };
				static constexpr char SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT{ '4' };
				static constexpr char SPECIFIC_ALLOCATION_ACCOUNT_STANDING{ '3' };
				static constexpr char STANDING_INSTRUCTIONS_PROVIDED{ '1' };
				static constexpr char SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING{ '2' };
			};

			// AllocText(161): STRING
			struct AllocText
			{
				static constexpr uint16_t tag{ 161 };
			};

			// SettlInstID(162): STRING
			struct SettlInstID
			{
				static constexpr uint16_t tag{ 162 };
			};

			// SettlInstTransType(163): CHAR
			struct SettlInstTransType
			{
				static constexpr uint16_t tag{ 163 };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
				static constexpr char CANCEL{ 'C' };
			};

			// EmailThreadID(164): STRING
			struct EmailThreadID
			{
				static constexpr uint16_t tag{ 164 };
			};

			// SettlInstSource(165): CHAR
			struct SettlInstSource
			{
				static constexpr uint16_t tag{ 165 };
				static constexpr char INSTITUTIONS_INSTRUCTIONS{ '2' };
				static constexpr char INVESTOR{ '3' };
				static constexpr char BROKERS_INSTRUCTIONS{ '1' };
			};

			// SettlLocation(166): STRING
			struct SettlLocation
			{
				static constexpr uint16_t tag{ 166 };
				static inline const std::string FEDERAL_BOOK_ENTRY{ "FED" };
				static inline const std::string LOCAL_MARKET_SETTLE_LOCATION{ "ISO Country Code" };
				static inline const std::string PHYSICAL{ "PNY" };
				static inline const std::string EUROCLEAR{ "EUR" };
				static inline const std::string DEPOSITORY_TRUST_COMPANY{ "DTC" };
				static inline const std::string CEDEL{ "CED" };
				static inline const std::string PARTICIPANT_TRUST_COMPANY{ "PTC" };
			};

			// SecurityType(167): STRING
			struct SecurityType
			{
				static constexpr uint16_t tag{ 167 };
				static inline const std::string COMMERCIAL_PAPER{ "CP" };
				static inline const std::string VARIABLE_RATE_DEMAND_NOTE{ "VRDN" };
				static inline const std::string PLAZOS_FIJOS{ "PZFJ" };
				static inline const std::string PROMISSORY_NOTE{ "PN" };
				static inline const std::string OVERNIGHT{ "ONITE" };
				static inline const std::string MEDIUM_TERM_NOTES{ "MTN" };
				static inline const std::string TAX_EXEMPT_COMMERCIAL_PAPER{ "TECP" };
				static inline const std::string AMENDED_RESTATED{ "AMENDED" };
				static inline const std::string BRIDGE_LOAN{ "BRIDGE" };
				static inline const std::string LETTER_OF_CREDIT{ "LOFC" };
				static inline const std::string SWING_LINE_FACILITY{ "SWING" };
				static inline const std::string DEBTOR_IN_POSSESSION{ "DINP" };
				static inline const std::string DEFAULTED{ "DEFLTED" };
				static inline const std::string WITHDRAWN{ "WITHDRN" };
				static inline const std::string LIQUIDITY_NOTE{ "LQN" };
				static inline const std::string MATURED{ "MATURED" };
				static inline const std::string DEPOSIT_NOTES{ "DN" };
				static inline const std::string RETIRED{ "RETIRED" };
				static inline const std::string BANKERS_ACCEPTANCE{ "BA" };
				static inline const std::string BANK_NOTES{ "BN" };
				static inline const std::string BILL_OF_EXCHANGES{ "BOX" };
				static inline const std::string CERTIFICATE_OF_DEPOSIT{ "CD" };
				static inline const std::string CALL_LOANS{ "CL" };
				static inline const std::string REPLACED{ "REPLACD" };
				static inline const std::string MANDATORY_TENDER{ "MT" };
				static inline const std::string REVOLVER_TERM_LOAN{ "RVLVTRM" };
				static inline const std::string MORTGAGE_PRIVATE_PLACEMENT{ "MPP" };
				static inline const std::string SHORT_TERM_LOAN_NOTE{ "STN" };
				static inline const std::string MISCELLANEOUS_PASS_THROUGH{ "MPT" };
				static inline const std::string TO_BE_ANNOUNCED{ "TBA" };
				static inline const std::string OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC{ "AN" };
				static inline const std::string MORTGAGE_INTEREST_ONLY{ "MIO" };
				static inline const std::string CERTIFICATE_OF_PARTICIPATION{ "COFP" };
				static inline const std::string MORTGAGE_BACKED_SECURITIES{ "MBS" };
				static inline const std::string REVENUE_BONDS{ "REV" };
				static inline const std::string SPECIAL_ASSESSMENT{ "SPCLA" };
				static inline const std::string SPECIAL_OBLIGATION{ "SPCLO" };
				static inline const std::string SPECIAL_TAX{ "SPCLT" };
				static inline const std::string TAX_ANTICIPATION_NOTE{ "TAN" };
				static inline const std::string TAX_ALLOCATION{ "TAXA" };
				static inline const std::string CERTIFICATE_OF_OBLIGATION{ "COFO" };
				static inline const std::string TIME_DEPOSIT{ "TD" };
				static inline const std::string GENERAL_OBLIGATION_BONDS{ "GO" };
				static inline const std::string WILDCARD_ENTRY{ "?" };
				static inline const std::string WARRANT{ "WAR" };
				static inline const std::string MUTUAL_FUND{ "MF" };
				static inline const std::string MULTI_LEG_INSTRUMENT{ "MLEG" };
				static inline const std::string TAX_REVENUE_ANTICIPATION_NOTE{ "TRAN" };
				static inline const std::string MORTGAGE_PRINCIPAL_ONLY{ "MPO" };
				static inline const std::string REPURCHASE_AGREEMENT{ "RP" };
				static inline const std::string NO_SECURITY_TYPE{ "NONE" };
				static inline const std::string EXTENDED_COMM_NOTE{ "XCN" };
				static inline const std::string AGENCY_POOLS{ "POOL" };
				static inline const std::string ASSET_BACKED_SECURITIES{ "ABS" };
				static inline const std::string CORP_MORTGAGE_BACKED_SECURITIES{ "CMBS" };
				static inline const std::string COLLATERALIZED_MORTGAGE_OBLIGATION{ "CMO" };
				static inline const std::string IOETTE_MORTGAGE{ "IET" };
				static inline const std::string REVERSE_REPURCHASE_AGREEMENT{ "RVRP" };
				static inline const std::string FOREIGN_EXCHANGE_CONTRACT{ "FOR" };
				static inline const std::string REVENUE_ANTICIPATION_NOTE{ "RAN" };
				static inline const std::string REVOLVER_LOAN{ "RVLV" };
				static inline const std::string FEDERAL_AGENCY_COUPON{ "FAC" };
				static inline const std::string FEDERAL_AGENCY_DISCOUNT_NOTE{ "FADN" };
				static inline const std::string PRIVATE_EXPORT_FUNDING{ "PEF" };
				static inline const std::string CORPORATE_BOND{ "CORP" };
				static inline const std::string CORPORATE_PRIVATE_PLACEMENT{ "CPP" };
				static inline const std::string CONVERTIBLE_BOND{ "CB" };
				static inline const std::string DUAL_CURRENCY{ "DUAL" };
				static inline const std::string INDEXED_LINKED{ "XLINKD" };
				static inline const std::string YANKEE_CORPORATE_BOND{ "YANK" };
				static inline const std::string COMMON_STOCK{ "CS" };
				static inline const std::string PREFERRED_STOCK{ "PS" };
				static inline const std::string BRADY_BOND{ "BRADY" };
				static inline const std::string US_TREASURY_BOND{ "TBOND" };
				static inline const std::string INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE{ "TINT" };
				static inline const std::string TREASURY_INFLATION_PROTECTED_SECURITIES{ "TIPS" };
				static inline const std::string PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE{ "TCAL" };
				static inline const std::string PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE{ "TPRN" };
				static inline const std::string US_TREASURY_NOTE_BOND{ "UST" };
				static inline const std::string US_TREASURY_BILL{ "USTB" };
				static inline const std::string TERM_LOAN{ "TERM" };
				static inline const std::string STRUCTURED_NOTES{ "STRUCT" };
			};

			// EffectiveTime(168): UTCTIMESTAMP
			struct EffectiveTime
			{
				static constexpr uint16_t tag{ 168 };
			};

			// StandInstDbType(169): INT
			struct StandInstDbType
			{
				static constexpr uint16_t tag{ 169 };
				static constexpr int32_t OTHER{ 0 };
				static constexpr int32_t DTC_SID{ 1 };
				static constexpr int32_t A_GLOBAL_CUSTODIAN{ 3 };
				static constexpr int32_t THOMSON_ALERT{ 2 };
			};

			// StandInstDbName(170): STRING
			struct StandInstDbName
			{
				static constexpr uint16_t tag{ 170 };
			};

			// StandInstDbID(171): STRING
			struct StandInstDbID
			{
				static constexpr uint16_t tag{ 171 };
			};

			// SettlDeliveryType(172): INT
			struct SettlDeliveryType
			{
				static constexpr uint16_t tag{ 172 };
				static constexpr int32_t FREE{ 1 };
				static constexpr int32_t VERSUS_PAYMENT{ 0 };
			};

			// SettlDepositoryCode(173): STRING
			struct SettlDepositoryCode
			{
				static constexpr uint16_t tag{ 173 };
			};

			// SettlBrkrCode(174): STRING
			struct SettlBrkrCode
			{
				static constexpr uint16_t tag{ 174 };
			};

			// SettlInstCode(175): STRING
			struct SettlInstCode
			{
				static constexpr uint16_t tag{ 175 };
			};

			// SecuritySettlAgentName(176): STRING
			struct SecuritySettlAgentName
			{
				static constexpr uint16_t tag{ 176 };
			};

			// SecuritySettlAgentCode(177): STRING
			struct SecuritySettlAgentCode
			{
				static constexpr uint16_t tag{ 177 };
			};

			// SecuritySettlAgentAcctNum(178): STRING
			struct SecuritySettlAgentAcctNum
			{
				static constexpr uint16_t tag{ 178 };
			};

			// SecuritySettlAgentAcctName(179): STRING
			struct SecuritySettlAgentAcctName
			{
				static constexpr uint16_t tag{ 179 };
			};

			// SecuritySettlAgentContactName(180): STRING
			struct SecuritySettlAgentContactName
			{
				static constexpr uint16_t tag{ 180 };
			};

			// SecuritySettlAgentContactPhone(181): STRING
			struct SecuritySettlAgentContactPhone
			{
				static constexpr uint16_t tag{ 181 };
			};

			// CashSettlAgentName(182): STRING
			struct CashSettlAgentName
			{
				static constexpr uint16_t tag{ 182 };
			};

			// CashSettlAgentCode(183): STRING
			struct CashSettlAgentCode
			{
				static constexpr uint16_t tag{ 183 };
			};

			// CashSettlAgentAcctNum(184): STRING
			struct CashSettlAgentAcctNum
			{
				static constexpr uint16_t tag{ 184 };
			};

			// CashSettlAgentAcctName(185): STRING
			struct CashSettlAgentAcctName
			{
				static constexpr uint16_t tag{ 185 };
			};

			// CashSettlAgentContactName(186): STRING
			struct CashSettlAgentContactName
			{
				static constexpr uint16_t tag{ 186 };
			};

			// CashSettlAgentContactPhone(187): STRING
			struct CashSettlAgentContactPhone
			{
				static constexpr uint16_t tag{ 187 };
			};

			// BidSpotRate(188): PRICE
			struct BidSpotRate
			{
				static constexpr uint16_t tag{ 188 };
			};

			// BidForwardPoints(189): PRICEOFFSET
			struct BidForwardPoints
			{
				static constexpr uint16_t tag{ 189 };
			};

			// OfferSpotRate(190): PRICE
			struct OfferSpotRate
			{
				static constexpr uint16_t tag{ 190 };
			};

			// OfferForwardPoints(191): PRICEOFFSET
			struct OfferForwardPoints
			{
				static constexpr uint16_t tag{ 191 };
			};

			// OrderQty2(192): QTY
			struct OrderQty2
			{
				static constexpr uint16_t tag{ 192 };
			};

			// FutSettDate2(193): LOCALMKTDATE
			struct FutSettDate2
			{
				static constexpr uint16_t tag{ 193 };
			};

			// LastSpotRate(194): PRICE
			struct LastSpotRate
			{
				static constexpr uint16_t tag{ 194 };
			};

			// LastForwardPoints(195): PRICEOFFSET
			struct LastForwardPoints
			{
				static constexpr uint16_t tag{ 195 };
			};

			// AllocLinkID(196): STRING
			struct AllocLinkID
			{
				static constexpr uint16_t tag{ 196 };
			};

			// AllocLinkType(197): INT
			struct AllocLinkType
			{
				static constexpr uint16_t tag{ 197 };
				static constexpr int32_t F_X_NETTING{ 0 };
				static constexpr int32_t F_X_SWAP{ 1 };
			};

			// SecondaryOrderID(198): STRING
			struct SecondaryOrderID
			{
				static constexpr uint16_t tag{ 198 };
			};

			// NoIOIQualifiers(199): NUMINGROUP
			struct NoIOIQualifiers
			{
				static constexpr uint16_t tag{ 199 };
			};

			// MaturityMonthYear(200): MONTHYEAR
			struct MaturityMonthYear
			{
				static constexpr uint16_t tag{ 200 };
			};

			// PutOrCall(201): INT
			struct PutOrCall
			{
				static constexpr uint16_t tag{ 201 };
				static constexpr int32_t PUT{ 0 };
				static constexpr int32_t CALL{ 1 };
			};

			// StrikePrice(202): PRICE
			struct StrikePrice
			{
				static constexpr uint16_t tag{ 202 };
			};

			// CoveredOrUncovered(203): INT
			struct CoveredOrUncovered
			{
				static constexpr uint16_t tag{ 203 };
				static constexpr int32_t UNCOVERED{ 1 };
				static constexpr int32_t COVERED{ 0 };
			};

			// CustomerOrFirm(204): INT
			struct CustomerOrFirm
			{
				static constexpr uint16_t tag{ 204 };
				static constexpr int32_t CUSTOMER{ 0 };
				static constexpr int32_t FIRM{ 1 };
			};

			// MaturityDay(205): DAYOFMONTH
			struct MaturityDay
			{
				static constexpr uint16_t tag{ 205 };
			};

			// OptAttribute(206): CHAR
			struct OptAttribute
			{
				static constexpr uint16_t tag{ 206 };
			};

			// SecurityExchange(207): EXCHANGE
			struct SecurityExchange
			{
				static constexpr uint16_t tag{ 207 };
			};

			// NotifyBrokerOfCredit(208): BOOLEAN
			struct NotifyBrokerOfCredit
			{
				static constexpr uint16_t tag{ 208 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// AllocHandlInst(209): INT
			struct AllocHandlInst
			{
				static constexpr uint16_t tag{ 209 };
				static constexpr int32_t FORWARD_AND_MATCH{ 3 };
				static constexpr int32_t FORWARD{ 2 };
				static constexpr int32_t MATCH{ 1 };
			};

			// MaxShow(210): QTY
			struct MaxShow
			{
				static constexpr uint16_t tag{ 210 };
			};

			// PegDifference(211): PRICEOFFSET
			struct PegDifference
			{
				static constexpr uint16_t tag{ 211 };
			};

			// XmlDataLen(212): LENGTH
			struct XmlDataLen
			{
				static constexpr uint16_t tag{ 212 };
			};

			// XmlData(213): DATA
			struct XmlData
			{
				static constexpr uint16_t tag{ 213 };
			};

			// SettlInstRefID(214): STRING
			struct SettlInstRefID
			{
				static constexpr uint16_t tag{ 214 };
			};

			// NoRoutingIDs(215): NUMINGROUP
			struct NoRoutingIDs
			{
				static constexpr uint16_t tag{ 215 };
			};

			// RoutingType(216): INT
			struct RoutingType
			{
				static constexpr uint16_t tag{ 216 };
				static constexpr int32_t TARGET_FIRM{ 1 };
				static constexpr int32_t TARGET_LIST{ 2 };
				static constexpr int32_t BLOCK_FIRM{ 3 };
				static constexpr int32_t BLOCK_LIST{ 4 };
			};

			// RoutingID(217): STRING
			struct RoutingID
			{
				static constexpr uint16_t tag{ 217 };
			};

			// Spread(218): PRICEOFFSET
			struct Spread
			{
				static constexpr uint16_t tag{ 218 };
			};

			// Benchmark(219): CHAR
			struct Benchmark
			{
				static constexpr uint16_t tag{ 219 };
				static constexpr char OLD_10{ '5' };
				static constexpr char CURVE{ '1' };
				static constexpr char _5_YR{ '2' };
				static constexpr char _10_YR{ '4' };
				static constexpr char _30_YR{ '6' };
				static constexpr char OLD_30{ '7' };
				static constexpr char _3_MO_LIBOR{ '8' };
				static constexpr char _6_MO_LIBOR{ '9' };
				static constexpr char OLD_5{ '3' };
			};

			// BenchmarkCurveCurrency(220): CURRENCY
			struct BenchmarkCurveCurrency
			{
				static constexpr uint16_t tag{ 220 };
			};

			// BenchmarkCurveName(221): STRING
			struct BenchmarkCurveName
			{
				static constexpr uint16_t tag{ 221 };
				static inline const std::string SWAP{ "SWAP" };
				static inline const std::string LIBID{ "LIBID" };
				static inline const std::string OTHER{ "OTHER" };
				static inline const std::string TREASURY{ "Treasury" };
				static inline const std::string EURIBOR{ "Euribor" };
				static inline const std::string PFANDBRIEFE{ "Pfandbriefe" };
				static inline const std::string FUTURESWAP{ "FutureSWAP" };
				static inline const std::string MUNIAAA{ "MuniAAA" };
				static inline const std::string LIBOR{ "LIBOR" };
			};

			// BenchmarkCurvePoint(222): STRING
			struct BenchmarkCurvePoint
			{
				static constexpr uint16_t tag{ 222 };
			};

			// CouponRate(223): PERCENTAGE
			struct CouponRate
			{
				static constexpr uint16_t tag{ 223 };
			};

			// CouponPaymentDate(224): UTCDATE
			struct CouponPaymentDate
			{
				static constexpr uint16_t tag{ 224 };
			};

			// IssueDate(225): UTCDATE
			struct IssueDate
			{
				static constexpr uint16_t tag{ 225 };
			};

			// RepurchaseTerm(226): INT
			struct RepurchaseTerm
			{
				static constexpr uint16_t tag{ 226 };
			};

			// RepurchaseRate(227): PERCENTAGE
			struct RepurchaseRate
			{
				static constexpr uint16_t tag{ 227 };
			};

			// Factor(228): FLOAT
			struct Factor
			{
				static constexpr uint16_t tag{ 228 };
			};

			// TradeOriginationDate(229): UTCDATE
			struct TradeOriginationDate
			{
				static constexpr uint16_t tag{ 229 };
			};

			// ExDate(230): UTCDATE
			struct ExDate
			{
				static constexpr uint16_t tag{ 230 };
			};

			// ContractMultiplier(231): FLOAT
			struct ContractMultiplier
			{
				static constexpr uint16_t tag{ 231 };
			};

			// NoStipulations(232): NUMINGROUP
			struct NoStipulations
			{
				static constexpr uint16_t tag{ 232 };
			};

			// StipulationType(233): STRING
			struct StipulationType
			{
				static constexpr uint16_t tag{ 233 };
				static inline const std::string ABSOLUTE_PREPAYMENT_SPEED{ "ABS" };
				static inline const std::string WEIGHTED_AVERAGE_LOAN_AGE{ "WALA" };
				static inline const std::string WEIGHTED_AVERAGE_MATURITY{ "WAM" };
				static inline const std::string CONSTANT_PREPAYMENT_RATE{ "CPR" };
				static inline const std::string FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE{ "HEP" };
				static inline const std::string WEIGHTED_AVERAGE_LIFE{ "WAL" };
				static inline const std::string OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE{ "MHP" };
				static inline const std::string SINGLE_MONTHLY_MORTALITY{ "SMM" };
				static inline const std::string MONTHLY_PREPAYMENT_RATE{ "MPR" };
				static inline const std::string OF_BMA_PREPAYMENT_CURVE{ "PSA" };
				static inline const std::string OF_PROSPECTUS_PREPAYMENT_CURVE{ "PPC" };
				static inline const std::string CONSTANT_PREPAYMENT_PENALTY{ "CPP" };
				static inline const std::string LOT_VARIANCE{ "LOTVAR" };
				static inline const std::string CONSTANT_PREPAYMENT_YIELD{ "CPY" };
				static inline const std::string WEIGHTED_AVERAGE_COUPON{ "WAC" };
				static inline const std::string YEAR_OF_ISSUE{ "ISSUE" };
				static inline const std::string MATURITY_YEAR{ "MAT" };
				static inline const std::string NUMBER_OF_PIECES{ "PIECES" };
				static inline const std::string POOLS_MAXIMUM{ "PMAX" };
				static inline const std::string POOLS_PER_MILLION{ "PPM" };
				static inline const std::string POOLS_PER_LOT{ "PPL" };
				static inline const std::string POOLS_PER_TRADE{ "PPT" };
				static inline const std::string PRODUCTION_YEAR{ "PROD" };
				static inline const std::string TRADE_VARIANCE{ "TRDVAR" };
				static inline const std::string GEOGRAPHICS{ "GEOG" };
			};

			// StipulationValue(234): STRING
			struct StipulationValue
			{
				static constexpr uint16_t tag{ 234 };
			};

			// YieldType(235): STRING
			struct YieldType
			{
				static constexpr uint16_t tag{ 235 };
				static inline const std::string TRUE_YIELD_THE_YIELD_CALCULATED_WITH_COUPON_DATES_MOVED_FROM_A_WEEKEND_OR_HOLIDAY_TO_THE_NEXT_VALID_SETTLEMENT_DATE{ "TRUE" };
				static inline const std::string PREVIOUS_CLOSE_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_1_DAY_AGO{ "PREVCLOSE" };
				static inline const std::string YIELD_TO_LONGEST_AVERAGE{ "LONGEST" };
				static inline const std::string YIELD_TO_LONGEST_AVERAGE_LIFE_THE_YIELD_ASSUMING_ONLY_MANDATORY_SINKS_ARE_TAKEN_THIS_RESULTS_IN_A_LOWER_PAYDOWN_OF_DEBT_THE_YIELD_IS_THEN_CALCULATED_TO_THE_FINAL_PAYMENT_DATE{ "LONGAVGLIFE" };
				static inline const std::string YIELD_TO_MATURITY_THE_YIELD_OF_A_BOND_TO_ITS_MATURITY_DATE{ "MATURITY" };
				static inline const std::string MARK_TO_MARKET_YIELD_AN_ADJUSTMENT_IN_THE_VALUATION_OF_A_SECURITIES_PORTFOLIO_TO_REFLECT_THE_CURRENT_MARKET_VALUES_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO{ "MARK" };
				static inline const std::string OPEN_AVERAGE_YIELD_THE_AVERAGE_YIELD_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO{ "OPENAVG" };
				static inline const std::string YIELD_TO_NEXT_PUT_THE_YIELD_TO_THE_DATE_AT_WHICH_THE_BOND_HOLDER_CAN_NEXT_PUT_THE_BOND_TO_THE_ISSUER{ "PUT" };
				static inline const std::string PROCEEDS_YIELD_THE_CD_EQUIVALENT_YIELD_WHEN_THE_REMAINING_TIME_TO_MATURITY_IS_LESS_THAN_TWO_YEARS{ "PROCEEDS" };
				static inline const std::string SEMI_ANNUAL_YIELD_THE_YIELD_OF_A_BOND_WHOSE_COUPON_PAYMENTS_ARE_REINVESTED_SEMI_ANNUALLY{ "SEMIANNUAL" };
				static inline const std::string YIELD_TO_SHORTEST_AVERAGE_LIFE_SAME_AS_AVGLIFE_ABOVE{ "SHORTAVGLIFE" };
				static inline const std::string YIELD_TO_SHORTEST_AVERAGE{ "SHORTEST" };
				static inline const std::string SIMPLE_YIELD_THE_YIELD_OF_A_BOND_ASSUMING_NO_REINVESTMENT_OF_COUPON_PAYMENTS{ "SIMPLE" };
				static inline const std::string YIELD_TO_TENDER_DATE_THE_YIELD_ON_A_MUNICIPAL_BOND_TO_ITS_MANDATORY_TENDER_DATE{ "TENDER" };
				static inline const std::string YIELD_VALUE_OF_1_32_THE_AMOUNT_THAT_THE_YIELD_WILL_CHANGE_FOR_A_1_32ND_CHANGE_IN_PRICE{ "VALUE1/32" };
				static inline const std::string YIELD_TO_WORST_CONVENTION_THE_LOWEST_YIELD_TO_ALL_POSSIBLE_REDEMPTION_DATE_SCENARIOS{ "WORST" };
				static inline const std::string TAX_EQUIVALENT_YIELD_THE_AFTER_TAX_YIELD_GROSSED_UP_BY_THE_MAXIMUM_FEDERAL_TAX_RATE_OF_396_FOR_COMPARISON_TO_TAXABLE_YIELDS{ "TAXEQUIV" };
				static inline const std::string ANNUAL_YIELD_THE_ANNUAL_INTEREST_OR_DIVIDEND_INCOME_AN_INVESTMENT_EARNS_EXPRESSED_AS_A_PERCENTAGE_OF_THE_INVESTMENTS_TOTAL_VALUE{ "ANNUAL" };
				static inline const std::string CLOSING_YIELD_MOST_RECENT_YEAR_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_YEARS_END{ "LASTYEAR" };
				static inline const std::string YIELD_TO_NEXT_REFUND{ "NEXTREFUND" };
				static inline const std::string AFTER_TAX_YIELD{ "AFTERTAX" };
				static inline const std::string YIELD_AT_ISSUE{ "ATISSUE" };
				static inline const std::string YIELD_TO_AVERAGE_LIFE_THE_YIELD_ASSUMING_THAT_ALL_SINKS{ "AVGLIFE" };
				static inline const std::string YIELD_TO_AVERAGE_MATURITY{ "AVGMATURITY" };
				static inline const std::string BOOK_YIELD_THE_YIELD_OF_A_SECURITY_CALCULATED_BY_USING_ITS_BOOK_VALUE_INSTEAD_OF_THE_CURRENT_MARKET_PRICE_THIS_TERM_IS_TYPICALLY_USED_IN_THE_US_DOMESTIC_MARKET{ "BOOK" };
				static inline const std::string YIELD_TO_NEXT_CALL_THE_YIELD_OF_A_BOND_TO_THE_NEXT_POSSIBLE_CALL_DATE{ "CALL" };
				static inline const std::string YIELD_CHANGE_SINCE_CLOSE_THE_CHANGE_IN_THE_YIELD_SINCE_THE_PREVIOUS_DAYS_CLOSING_YIELD{ "CHANGE" };
				static inline const std::string COMPOUND_YIELD_THE_YIELD_OF_CERTAIN_JAPANESE_BONDS_BASED_ON_ITS_PRICE_CERTAIN_JAPANESE_BONDS_HAVE_IRREGULAR_FIRST_OR_LAST_COUPONS_AND_THE_YIELD_IS_CALCULATED_COMPOUND_FOR_THESE_IRREGULAR_PERIODS{ "COMPOUND" };
				static inline const std::string CURRENT_YIELD_ANNUAL_INTEREST_ON_A_BOND_DIVIDED_BY_THE_MARKET_VALUE_THE_ACTUAL_INCOME_RATE_OF_RETURN_AS_OPPOSED_TO_THE_COUPON_RATE_EXPRESSED_AS_A_PERCENTAGE{ "CURRENT" };
				static inline const std::string TRUE_GROSS_YIELD_YIELD_CALCULATED_USING_THE_PRICE_INCLUDING_ACCRUED_INTEREST_WHERE_COUPON_DATES_ARE_MOVED_FROM_HOLIDAYS_AND_WEEKENDS_TO_THE_NEXT_TRADING_DAY{ "GROSS" };
				static inline const std::string GOVERNMENT_EQUIVALENT_YIELD_ASK_YIELD_BASED_ON_SEMI_ANNUAL_COUPONS_COMPOUNDING_IN_ALL_PERIODS_AND_ACTUAL_ACTUAL_CALENDAR{ "GOVTEQUIV" };
				static inline const std::string YIELD_WITH_INFLATION_ASSUMPTION_BASED_ON_PRICE_THE_RETURN_AN_INVESTOR_WOULD_REQUIRE_ON_A_NORMAL_BOND_THAT_WOULD_MAKE_THE_REAL_RETURN_EQUAL_TO_THAT_OF_THE_INFLATION_INDEXED_BOND_ASSUMING_A_CONSTANT_INFLATION_RATE{ "INFLATION" };
				static inline const std::string INVERSE_FLOATER_BOND_YIELD_INVERSE_FLOATER_SEMI_ANNUAL_BOND_EQUIVALENT_RATE{ "INVERSEFLOATER" };
				static inline const std::string CLOSING_YIELD_MOST_RECENT_QUARTER_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_QUARTERS_END{ "LASTQUARTER" };
				static inline const std::string MOST_RECENT_CLOSING_YIELD_THE_LAST_AVAILABLE_YIELD_STORED_IN_HISTORY_COMPUTED_USING_PRICE{ "LASTCLOSE" };
				static inline const std::string CLOSING_YIELD_MOST_RECENT_MONTH_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_MONTHS_END{ "LASTMONTH" };
				static inline const std::string CLOSING_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE{ "CLOSE" };
			};

			// Yield(236): PERCENTAGE
			struct Yield
			{
				static constexpr uint16_t tag{ 236 };
			};

			// TotalTakedown(237): AMT
			struct TotalTakedown
			{
				static constexpr uint16_t tag{ 237 };
			};

			// Concession(238): AMT
			struct Concession
			{
				static constexpr uint16_t tag{ 238 };
			};

			// RepoCollateralSecurityType(239): INT
			struct RepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 239 };
			};

			// RedemptionDate(240): UTCDATE
			struct RedemptionDate
			{
				static constexpr uint16_t tag{ 240 };
			};

			// UnderlyingCouponPaymentDate(241): UTCDATE
			struct UnderlyingCouponPaymentDate
			{
				static constexpr uint16_t tag{ 241 };
			};

			// UnderlyingIssueDate(242): UTCDATE
			struct UnderlyingIssueDate
			{
				static constexpr uint16_t tag{ 242 };
			};

			// UnderlyingRepoCollateralSecurityType(243): INT
			struct UnderlyingRepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 243 };
			};

			// UnderlyingRepurchaseTerm(244): INT
			struct UnderlyingRepurchaseTerm
			{
				static constexpr uint16_t tag{ 244 };
			};

			// UnderlyingRepurchaseRate(245): PERCENTAGE
			struct UnderlyingRepurchaseRate
			{
				static constexpr uint16_t tag{ 245 };
			};

			// UnderlyingFactor(246): FLOAT
			struct UnderlyingFactor
			{
				static constexpr uint16_t tag{ 246 };
			};

			// UnderlyingRedemptionDate(247): UTCDATE
			struct UnderlyingRedemptionDate
			{
				static constexpr uint16_t tag{ 247 };
			};

			// LegCouponPaymentDate(248): UTCDATE
			struct LegCouponPaymentDate
			{
				static constexpr uint16_t tag{ 248 };
			};

			// LegIssueDate(249): UTCDATE
			struct LegIssueDate
			{
				static constexpr uint16_t tag{ 249 };
			};

			// LegRepoCollateralSecurityType(250): INT
			struct LegRepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 250 };
			};

			// LegRepurchaseTerm(251): INT
			struct LegRepurchaseTerm
			{
				static constexpr uint16_t tag{ 251 };
			};

			// LegRepurchaseRate(252): PERCENTAGE
			struct LegRepurchaseRate
			{
				static constexpr uint16_t tag{ 252 };
			};

			// LegFactor(253): FLOAT
			struct LegFactor
			{
				static constexpr uint16_t tag{ 253 };
			};

			// LegRedemptionDate(254): UTCDATE
			struct LegRedemptionDate
			{
				static constexpr uint16_t tag{ 254 };
			};

			// CreditRating(255): STRING
			struct CreditRating
			{
				static constexpr uint16_t tag{ 255 };
			};

			// UnderlyingCreditRating(256): STRING
			struct UnderlyingCreditRating
			{
				static constexpr uint16_t tag{ 256 };
			};

			// LegCreditRating(257): STRING
			struct LegCreditRating
			{
				static constexpr uint16_t tag{ 257 };
			};

			// TradedFlatSwitch(258): BOOLEAN
			struct TradedFlatSwitch
			{
				static constexpr uint16_t tag{ 258 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// BasisFeatureDate(259): UTCDATE
			struct BasisFeatureDate
			{
				static constexpr uint16_t tag{ 259 };
			};

			// BasisFeaturePrice(260): PRICE
			struct BasisFeaturePrice
			{
				static constexpr uint16_t tag{ 260 };
			};

			// MDReqID(262): STRING
			struct MDReqID
			{
				static constexpr uint16_t tag{ 262 };
			};

			// SubscriptionRequestType(263): CHAR
			struct SubscriptionRequestType
			{
				static constexpr uint16_t tag{ 263 };
				static constexpr char SNAPSHOT_PLUS_UPDATES{ '1' };
				static constexpr char DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST{ '2' };
				static constexpr char SNAPSHOT{ '0' };
			};

			// MarketDepth(264): INT
			struct MarketDepth
			{
				static constexpr uint16_t tag{ 264 };
			};

			// MDUpdateType(265): INT
			struct MDUpdateType
			{
				static constexpr uint16_t tag{ 265 };
				static constexpr int32_t FULL_REFRESH{ 0 };
				static constexpr int32_t INCREMENTAL_REFRESH{ 1 };
			};

			// AggregatedBook(266): BOOLEAN
			struct AggregatedBook
			{
				static constexpr uint16_t tag{ 266 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// NoMDEntryTypes(267): NUMINGROUP
			struct NoMDEntryTypes
			{
				static constexpr uint16_t tag{ 267 };
			};

			// NoMDEntries(268): NUMINGROUP
			struct NoMDEntries
			{
				static constexpr uint16_t tag{ 268 };
			};

			// MDEntryType(269): CHAR
			struct MDEntryType
			{
				static constexpr uint16_t tag{ 269 };
				static constexpr char TRADING_SESSION_HIGH_PRICE{ '7' };
				static constexpr char OFFER{ '1' };
				static constexpr char IMBALANCE{ 'A' };
				static constexpr char TRADING_SESSION_VWAP_PRICE{ '9' };
				static constexpr char TRADING_SESSION_LOW_PRICE{ '8' };
				static constexpr char CLOSING_PRICE{ '5' };
				static constexpr char OPENING_PRICE{ '4' };
				static constexpr char BID{ '0' };
				static constexpr char TRADE{ '2' };
				static constexpr char INDEX_VALUE{ '3' };
				static constexpr char SETTLEMENT_PRICE{ '6' };
			};

			// MDEntryPx(270): PRICE
			struct MDEntryPx
			{
				static constexpr uint16_t tag{ 270 };
			};

			// MDEntrySize(271): QTY
			struct MDEntrySize
			{
				static constexpr uint16_t tag{ 271 };
			};

			// MDEntryDate(272): UTCDATE
			struct MDEntryDate
			{
				static constexpr uint16_t tag{ 272 };
			};

			// MDEntryTime(273): UTCTIMEONLY
			struct MDEntryTime
			{
				static constexpr uint16_t tag{ 273 };
			};

			// TickDirection(274): CHAR
			struct TickDirection
			{
				static constexpr uint16_t tag{ 274 };
				static constexpr char PLUS_TICK{ '0' };
				static constexpr char ZERO_PLUS_TICK{ '1' };
				static constexpr char MINUS_TICK{ '2' };
				static constexpr char ZERO_MINUS_TICK{ '3' };
			};

			// MDMkt(275): EXCHANGE
			struct MDMkt
			{
				static constexpr uint16_t tag{ 275 };
			};

			// QuoteCondition(276): MULTIPLEVALUESTRING
			struct QuoteCondition
			{
				static constexpr uint16_t tag{ 276 };
				static inline const std::string LOCKED{ "E" };
				static inline const std::string NON_FIRM{ "I" };
				static inline const std::string FAST_TRADING{ "H" };
				static inline const std::string CROSSED{ "F" };
				static inline const std::string CONSOLIDATED_BEST{ "D" };
				static inline const std::string EXCHANGE_BEST{ "C" };
				static inline const std::string CLOSED{ "B" };
				static inline const std::string OPEN{ "A" };
				static inline const std::string DEPTH{ "G" };
			};

			// TradeCondition(277): MULTIPLEVALUESTRING
			struct TradeCondition
			{
				static constexpr uint16_t tag{ 277 };
				static inline const std::string NEXT_DAY_TRADE{ "J" };
				static inline const std::string OPENED{ "K" };
				static inline const std::string SELLER{ "L" };
				static inline const std::string AVERAGE_PRICE_TRADE{ "B" };
				static inline const std::string SOLD{ "M" };
				static inline const std::string RULE_155_TRADE{ "H" };
				static inline const std::string STOPPED_STOCK{ "N" };
				static inline const std::string IMBALANCE_MORE_BUYERS{ "P" };
				static inline const std::string IMBALANCE_MORE_SELLERS{ "Q" };
				static inline const std::string OPENING_PRICE{ "R" };
				static inline const std::string SOLD_LAST{ "I" };
				static inline const std::string CASH{ "A" };
				static inline const std::string CASH_TRADE{ "C" };
				static inline const std::string OPENING{ "E" };
				static inline const std::string INTRADAY_TRADE_DETAIL{ "F" };
				static inline const std::string RULE_127_TRADE{ "G" };
				static inline const std::string NEXT_DAY{ "D" };
			};

			// MDEntryID(278): STRING
			struct MDEntryID
			{
				static constexpr uint16_t tag{ 278 };
			};

			// MDUpdateAction(279): CHAR
			struct MDUpdateAction
			{
				static constexpr uint16_t tag{ 279 };
				static constexpr char NEW{ '0' };
				static constexpr char CHANGE{ '1' };
				static constexpr char DELETE{ '2' };
			};

			// MDEntryRefID(280): STRING
			struct MDEntryRefID
			{
				static constexpr uint16_t tag{ 280 };
			};

			// MDReqRejReason(281): CHAR
			struct MDReqRejReason
			{
				static constexpr uint16_t tag{ 281 };
				static constexpr char UNSUPPORTED_AGGREGATEDBOOK{ '7' };
				static constexpr char DUPLICATE_MDREQID{ '1' };
				static constexpr char UNSUPPORTED_MDIMPLICITDELETE{ 'C' };
				static constexpr char UNSUPPORTED_OPENCLOSESETTLEFLAG{ 'B' };
				static constexpr char UNSUPPORTED_SCOPE{ 'A' };
				static constexpr char UNSUPPORTED_TRADINGSESSIONID{ '9' };
				static constexpr char UNSUPPORTED_MDENTRYTYPE{ '8' };
				static constexpr char UNSUPPORTED_MDUPDATETYPE{ '6' };
				static constexpr char UNSUPPORTED_MARKETDEPTH{ '5' };
				static constexpr char UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE{ '4' };
				static constexpr char INSUFFICIENT_BANDWIDTH{ '2' };
				static constexpr char UNKNOWN_SYMBOL{ '0' };
				static constexpr char INSUFFICIENT_PERMISSIONS{ '3' };
			};

			// MDEntryOriginator(282): STRING
			struct MDEntryOriginator
			{
				static constexpr uint16_t tag{ 282 };
			};

			// LocationID(283): STRING
			struct LocationID
			{
				static constexpr uint16_t tag{ 283 };
			};

			// DeskID(284): STRING
			struct DeskID
			{
				static constexpr uint16_t tag{ 284 };
			};

			// DeleteReason(285): CHAR
			struct DeleteReason
			{
				static constexpr uint16_t tag{ 285 };
				static constexpr char CANCELATION{ '0' };
				static constexpr char ERROR{ '1' };
			};

			// OpenCloseSettleFlag(286): MULTIPLEVALUESTRING
			struct OpenCloseSettleFlag
			{
				static constexpr uint16_t tag{ 286 };
				static inline const std::string SESSION_OPEN{ "1" };
				static inline const std::string DELIVERY_SETTLEMENT_PRICE{ "2" };
				static inline const std::string EXPECTED_PRICE{ "3" };
				static inline const std::string PRICE_FROM_PREVIOUS_BUSINESS_DAY{ "4" };
				static inline const std::string DAILY_OPEN{ "0" };
			};

			// SellerDays(287): INT
			struct SellerDays
			{
				static constexpr uint16_t tag{ 287 };
			};

			// MDEntryBuyer(288): STRING
			struct MDEntryBuyer
			{
				static constexpr uint16_t tag{ 288 };
			};

			// MDEntrySeller(289): STRING
			struct MDEntrySeller
			{
				static constexpr uint16_t tag{ 289 };
			};

			// MDEntryPositionNo(290): INT
			struct MDEntryPositionNo
			{
				static constexpr uint16_t tag{ 290 };
			};

			// FinancialStatus(291): MULTIPLEVALUESTRING
			struct FinancialStatus
			{
				static constexpr uint16_t tag{ 291 };
				static inline const std::string BANKRUPT{ "1" };
				static inline const std::string PENDING_DELISTING{ "2" };
			};

			// CorporateAction(292): MULTIPLEVALUESTRING
			struct CorporateAction
			{
				static constexpr uint16_t tag{ 292 };
				static inline const std::string EX_DISTRIBUTION{ "B" };
				static inline const std::string EX_INTEREST{ "E" };
				static inline const std::string EX_RIGHTS{ "C" };
				static inline const std::string EX_DIVIDEND{ "A" };
				static inline const std::string NEW{ "D" };
			};

			// DefBidSize(293): QTY
			struct DefBidSize
			{
				static constexpr uint16_t tag{ 293 };
			};

			// DefOfferSize(294): QTY
			struct DefOfferSize
			{
				static constexpr uint16_t tag{ 294 };
			};

			// NoQuoteEntries(295): NUMINGROUP
			struct NoQuoteEntries
			{
				static constexpr uint16_t tag{ 295 };
			};

			// NoQuoteSets(296): NUMINGROUP
			struct NoQuoteSets
			{
				static constexpr uint16_t tag{ 296 };
			};

			// QuoteStatus(297): INT
			struct QuoteStatus
			{
				static constexpr uint16_t tag{ 297 };
				static constexpr int32_t REMOVED_FROM_MARKET{ 6 };
				static constexpr int32_t CANCELED_FOR_SYMBOL{ 1 };
				static constexpr int32_t PENDING{ 10 };
				static constexpr int32_t QUOTE_NOT_FOUND{ 9 };
				static constexpr int32_t QUERY{ 8 };
				static constexpr int32_t EXPIRED{ 7 };
				static constexpr int32_t REJECTED{ 5 };
				static constexpr int32_t CANCELED_ALL{ 4 };
				static constexpr int32_t CANCELED_FOR_UNDERLYING{ 3 };
				static constexpr int32_t CANCELED_FOR_SECURITY_TYPE{ 2 };
				static constexpr int32_t ACCEPTED{ 0 };
			};

			// QuoteCancelType(298): INT
			struct QuoteCancelType
			{
				static constexpr uint16_t tag{ 298 };
				static constexpr int32_t CANCEL_ALL_QUOTES{ 4 };
				static constexpr int32_t CANCEL_FOR_SECURITY_TYPE{ 2 };
				static constexpr int32_t CANCEL_FOR_SYMBOL{ 1 };
				static constexpr int32_t CANCEL_FOR_UNDERLYING_SYMBOL{ 3 };
			};

			// QuoteEntryID(299): STRING
			struct QuoteEntryID
			{
				static constexpr uint16_t tag{ 299 };
			};

			// QuoteRejectReason(300): INT
			struct QuoteRejectReason
			{
				static constexpr uint16_t tag{ 300 };
				static constexpr int32_t NOT_AUTHORIZED_TO_QUOTE_SECURITY{ 9 };
				static constexpr int32_t UNKNOWN_SYMBOL{ 1 };
				static constexpr int32_t EXCHANGE{ 2 };
				static constexpr int32_t QUOTE_REQUEST_EXCEEDS_LIMIT{ 3 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t UNKNOWN_QUOTE{ 5 };
				static constexpr int32_t DUPLICATE_QUOTE{ 6 };
				static constexpr int32_t INVALID_BID_ASK_SPREAD{ 7 };
				static constexpr int32_t INVALID_PRICE{ 8 };
			};

			// QuoteResponseLevel(301): INT
			struct QuoteResponseLevel
			{
				static constexpr uint16_t tag{ 301 };
				static constexpr int32_t ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES{ 1 };
				static constexpr int32_t NO_ACKNOWLEDGEMENT{ 0 };
				static constexpr int32_t ACKNOWLEDGE_EACH_QUOTE_MESSAGES{ 2 };
			};

			// QuoteSetID(302): STRING
			struct QuoteSetID
			{
				static constexpr uint16_t tag{ 302 };
			};

			// QuoteRequestType(303): INT
			struct QuoteRequestType
			{
				static constexpr uint16_t tag{ 303 };
				static constexpr int32_t AUTOMATIC{ 2 };
				static constexpr int32_t MANUAL{ 1 };
			};

			// TotQuoteEntries(304): INT
			struct TotQuoteEntries
			{
				static constexpr uint16_t tag{ 304 };
			};

			// UnderlyingSecurityIDSource(305): STRING
			struct UnderlyingSecurityIDSource
			{
				static constexpr uint16_t tag{ 305 };
			};

			// UnderlyingIssuer(306): STRING
			struct UnderlyingIssuer
			{
				static constexpr uint16_t tag{ 306 };
			};

			// UnderlyingSecurityDesc(307): STRING
			struct UnderlyingSecurityDesc
			{
				static constexpr uint16_t tag{ 307 };
			};

			// UnderlyingSecurityExchange(308): EXCHANGE
			struct UnderlyingSecurityExchange
			{
				static constexpr uint16_t tag{ 308 };
			};

			// UnderlyingSecurityID(309): STRING
			struct UnderlyingSecurityID
			{
				static constexpr uint16_t tag{ 309 };
			};

			// UnderlyingSecurityType(310): STRING
			struct UnderlyingSecurityType
			{
				static constexpr uint16_t tag{ 310 };
			};

			// UnderlyingSymbol(311): STRING
			struct UnderlyingSymbol
			{
				static constexpr uint16_t tag{ 311 };
			};

			// UnderlyingSymbolSfx(312): STRING
			struct UnderlyingSymbolSfx
			{
				static constexpr uint16_t tag{ 312 };
			};

			// UnderlyingMaturityMonthYear(313): MONTHYEAR
			struct UnderlyingMaturityMonthYear
			{
				static constexpr uint16_t tag{ 313 };
			};

			// UnderlyingMaturityDay(314): DAYOFMONTH
			struct UnderlyingMaturityDay
			{
				static constexpr uint16_t tag{ 314 };
			};

			// UnderlyingPutOrCall(315): INT
			struct UnderlyingPutOrCall
			{
				static constexpr uint16_t tag{ 315 };
			};

			// UnderlyingStrikePrice(316): PRICE
			struct UnderlyingStrikePrice
			{
				static constexpr uint16_t tag{ 316 };
			};

			// UnderlyingOptAttribute(317): CHAR
			struct UnderlyingOptAttribute
			{
				static constexpr uint16_t tag{ 317 };
			};

			// UnderlyingCurrency(318): CURRENCY
			struct UnderlyingCurrency
			{
				static constexpr uint16_t tag{ 318 };
			};

			// RatioQty(319): QUANTITY
			struct RatioQty
			{
				static constexpr uint16_t tag{ 319 };
			};

			// SecurityReqID(320): STRING
			struct SecurityReqID
			{
				static constexpr uint16_t tag{ 320 };
			};

			// SecurityRequestType(321): INT
			struct SecurityRequestType
			{
				static constexpr uint16_t tag{ 321 };
				static constexpr int32_t REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS{ 0 };
				static constexpr int32_t REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED{ 1 };
				static constexpr int32_t REQUEST_LIST_SECURITY_TYPES{ 2 };
				static constexpr int32_t REQUEST_LIST_SECURITIES{ 3 };
			};

			// SecurityResponseID(322): STRING
			struct SecurityResponseID
			{
				static constexpr uint16_t tag{ 322 };
			};

			// SecurityResponseType(323): INT
			struct SecurityResponseType
			{
				static constexpr uint16_t tag{ 323 };
				static constexpr int32_t REJECT_SECURITY_PROPOSAL{ 5 };
				static constexpr int32_t ACCEPT_SECURITY_PROPOSAL_AS_IS{ 1 };
				static constexpr int32_t CAN_NOT_MATCH_SELECTION_CRITERIA{ 6 };
				static constexpr int32_t ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE{ 2 };
				static constexpr int32_t LIST_OF_SECURITIES_RETURNED_PER_REQUEST{ 4 };
				static constexpr int32_t LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST{ 3 };
			};

			// SecurityStatusReqID(324): STRING
			struct SecurityStatusReqID
			{
				static constexpr uint16_t tag{ 324 };
			};

			// UnsolicitedIndicator(325): BOOLEAN
			struct UnsolicitedIndicator
			{
				static constexpr uint16_t tag{ 325 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// SecurityTradingStatus(326): INT
			struct SecurityTradingStatus
			{
				static constexpr uint16_t tag{ 326 };
				static constexpr int32_t UNKNOWN_OR_INVALID{ 20 };
				static constexpr int32_t NO_MARKET_ON_CLOSE_IMBALANCE{ 13 };
				static constexpr int32_t ITS_PRE_OPENING{ 14 };
				static constexpr int32_t NEW_PRICE_INDICATION{ 15 };
				static constexpr int32_t TRADE_DISSEMINATION_TIME{ 16 };
				static constexpr int32_t READY_TO_TRADE{ 17 };
				static constexpr int32_t NOT_TRADED_ON_THIS_MARKET{ 19 };
				static constexpr int32_t OPENING_ROTATION{ 22 };
				static constexpr int32_t PRE_OPEN{ 21 };
				static constexpr int32_t NO_MARKET_IMBALANCE{ 12 };
				static constexpr int32_t NOT_AVAILABLE_FOR_TRADING{ 18 };
				static constexpr int32_t MARKET_ON_CLOSE_IMBALANCE_SELL{ 10 };
				static constexpr int32_t MARKET_ON_CLOSE_IMBALANCE_BUY{ 9 };
				static constexpr int32_t MARKET_IMBALANCE_SELL{ 8 };
				static constexpr int32_t MARKET_IMBALANCE_BUY{ 7 };
				static constexpr int32_t TRADING_RANGE_INDICATION{ 6 };
				static constexpr int32_t PRICE_INDICATION{ 5 };
				static constexpr int32_t NO_OPEN_NO_RESUME{ 4 };
				static constexpr int32_t RESUME{ 3 };
				static constexpr int32_t OPENING_DELAY{ 1 };
				static constexpr int32_t TRADING_HALT{ 2 };
				static constexpr int32_t _11{ 11 };
				static constexpr int32_t FAST_MARKET{ 23 };
			};

			// HaltReasonChar(327): CHAR
			struct HaltReasonChar
			{
				static constexpr uint16_t tag{ 327 };
				static constexpr char EQUIPMENT_CHANGEOVER{ 'X' };
				static constexpr char ADDITIONAL_INFORMATION{ 'M' };
				static constexpr char ORDER_INFLUX{ 'E' };
				static constexpr char NEWS_PENDING{ 'P' };
				static constexpr char ORDER_IMBALANCE{ 'I' };
				static constexpr char NEWS_DISSEMINATION{ 'D' };
			};

			// InViewOfCommon(328): BOOLEAN
			struct InViewOfCommon
			{
				static constexpr uint16_t tag{ 328 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// DueToRelated(329): BOOLEAN
			struct DueToRelated
			{
				static constexpr uint16_t tag{ 329 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// BuyVolume(330): QTY
			struct BuyVolume
			{
				static constexpr uint16_t tag{ 330 };
			};

			// SellVolume(331): QTY
			struct SellVolume
			{
				static constexpr uint16_t tag{ 331 };
			};

			// HighPx(332): PRICE
			struct HighPx
			{
				static constexpr uint16_t tag{ 332 };
			};

			// LowPx(333): PRICE
			struct LowPx
			{
				static constexpr uint16_t tag{ 333 };
			};

			// Adjustment(334): INT
			struct Adjustment
			{
				static constexpr uint16_t tag{ 334 };
				static constexpr int32_t CANCEL{ 1 };
				static constexpr int32_t ERROR{ 2 };
				static constexpr int32_t CORRECTION{ 3 };
			};

			// TradSesReqID(335): STRING
			struct TradSesReqID
			{
				static constexpr uint16_t tag{ 335 };
			};

			// TradingSessionID(336): STRING
			struct TradingSessionID
			{
				static constexpr uint16_t tag{ 336 };
			};

			// ContraTrader(337): STRING
			struct ContraTrader
			{
				static constexpr uint16_t tag{ 337 };
			};

			// TradSesMethod(338): INT
			struct TradSesMethod
			{
				static constexpr uint16_t tag{ 338 };
				static constexpr int32_t TWO_PARTY{ 3 };
				static constexpr int32_t ELECTRONIC{ 1 };
				static constexpr int32_t OPEN_OUTCRY{ 2 };
			};

			// TradSesMode(339): INT
			struct TradSesMode
			{
				static constexpr uint16_t tag{ 339 };
				static constexpr int32_t PRODUCTION{ 3 };
				static constexpr int32_t TESTING{ 1 };
				static constexpr int32_t SIMULATED{ 2 };
			};

			// TradSesStatus(340): INT
			struct TradSesStatus
			{
				static constexpr uint16_t tag{ 340 };
				static constexpr int32_t PRE_CLOSE{ 5 };
				static constexpr int32_t REQUEST_REJECTED{ 6 };
				static constexpr int32_t PRE_OPEN{ 4 };
				static constexpr int32_t CLOSED{ 3 };
				static constexpr int32_t OPEN{ 2 };
				static constexpr int32_t HALTED{ 1 };
				static constexpr int32_t UNKNOWN{ 0 };
			};

			// TradSesStartTime(341): UTCTIMESTAMP
			struct TradSesStartTime
			{
				static constexpr uint16_t tag{ 341 };
			};

			// TradSesOpenTime(342): UTCTIMESTAMP
			struct TradSesOpenTime
			{
				static constexpr uint16_t tag{ 342 };
			};

			// TradSesPreCloseTime(343): UTCTIMESTAMP
			struct TradSesPreCloseTime
			{
				static constexpr uint16_t tag{ 343 };
			};

			// TradSesCloseTime(344): UTCTIMESTAMP
			struct TradSesCloseTime
			{
				static constexpr uint16_t tag{ 344 };
			};

			// TradSesEndTime(345): UTCTIMESTAMP
			struct TradSesEndTime
			{
				static constexpr uint16_t tag{ 345 };
			};

			// NumberOfOrders(346): INT
			struct NumberOfOrders
			{
				static constexpr uint16_t tag{ 346 };
			};

			// MessageEncoding(347): STRING
			struct MessageEncoding
			{
				static constexpr uint16_t tag{ 347 };
				static inline const std::string UTF_8{ "UTF-8" };
				static inline const std::string ISO_2022_JP{ "ISO-2022-JP" };
				static inline const std::string EUC_JP{ "EUC-JP" };
				static inline const std::string SHIFT_JIS{ "SHIFT_JIS" };
			};

			// EncodedIssuerLen(348): LENGTH
			struct EncodedIssuerLen
			{
				static constexpr uint16_t tag{ 348 };
			};

			// EncodedIssuer(349): DATA
			struct EncodedIssuer
			{
				static constexpr uint16_t tag{ 349 };
			};

			// EncodedSecurityDescLen(350): LENGTH
			struct EncodedSecurityDescLen
			{
				static constexpr uint16_t tag{ 350 };
			};

			// EncodedSecurityDesc(351): DATA
			struct EncodedSecurityDesc
			{
				static constexpr uint16_t tag{ 351 };
			};

			// EncodedListExecInstLen(352): LENGTH
			struct EncodedListExecInstLen
			{
				static constexpr uint16_t tag{ 352 };
			};

			// EncodedListExecInst(353): DATA
			struct EncodedListExecInst
			{
				static constexpr uint16_t tag{ 353 };
			};

			// EncodedTextLen(354): LENGTH
			struct EncodedTextLen
			{
				static constexpr uint16_t tag{ 354 };
			};

			// EncodedText(355): DATA
			struct EncodedText
			{
				static constexpr uint16_t tag{ 355 };
			};

			// EncodedSubjectLen(356): LENGTH
			struct EncodedSubjectLen
			{
				static constexpr uint16_t tag{ 356 };
			};

			// EncodedSubject(357): DATA
			struct EncodedSubject
			{
				static constexpr uint16_t tag{ 357 };
			};

			// EncodedHeadlineLen(358): LENGTH
			struct EncodedHeadlineLen
			{
				static constexpr uint16_t tag{ 358 };
			};

			// EncodedHeadline(359): DATA
			struct EncodedHeadline
			{
				static constexpr uint16_t tag{ 359 };
			};

			// EncodedAllocTextLen(360): LENGTH
			struct EncodedAllocTextLen
			{
				static constexpr uint16_t tag{ 360 };
			};

			// EncodedAllocText(361): DATA
			struct EncodedAllocText
			{
				static constexpr uint16_t tag{ 361 };
			};

			// EncodedUnderlyingIssuerLen(362): LENGTH
			struct EncodedUnderlyingIssuerLen
			{
				static constexpr uint16_t tag{ 362 };
			};

			// EncodedUnderlyingIssuer(363): DATA
			struct EncodedUnderlyingIssuer
			{
				static constexpr uint16_t tag{ 363 };
			};

			// EncodedUnderlyingSecurityDescLen(364): LENGTH
			struct EncodedUnderlyingSecurityDescLen
			{
				static constexpr uint16_t tag{ 364 };
			};

			// EncodedUnderlyingSecurityDesc(365): DATA
			struct EncodedUnderlyingSecurityDesc
			{
				static constexpr uint16_t tag{ 365 };
			};

			// AllocPrice(366): PRICE
			struct AllocPrice
			{
				static constexpr uint16_t tag{ 366 };
			};

			// QuoteSetValidUntilTime(367): UTCTIMESTAMP
			struct QuoteSetValidUntilTime
			{
				static constexpr uint16_t tag{ 367 };
			};

			// QuoteEntryRejectReason(368): INT
			struct QuoteEntryRejectReason
			{
				static constexpr uint16_t tag{ 368 };
				static constexpr int32_t UNKNOWN_QUOTE{ 5 };
				static constexpr int32_t NOT_AUTHORIZED_TO_QUOTE_SECURITY{ 9 };
				static constexpr int32_t INVALID_PRICE{ 8 };
				static constexpr int32_t DUPLICATE_QUOTE{ 6 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t QUOTE_EXCEEDS_LIMIT{ 3 };
				static constexpr int32_t EXCHANGE{ 2 };
				static constexpr int32_t UNKNOWN_SYMBOL{ 1 };
				static constexpr int32_t INVALID_BID_ASK_SPREAD{ 7 };
			};

			// LastMsgSeqNumProcessed(369): SEQNUM
			struct LastMsgSeqNumProcessed
			{
				static constexpr uint16_t tag{ 369 };
			};

			// OnBehalfOfSendingTime(370): UTCTIMESTAMP
			struct OnBehalfOfSendingTime
			{
				static constexpr uint16_t tag{ 370 };
			};

			// RefTagID(371): INT
			struct RefTagID
			{
				static constexpr uint16_t tag{ 371 };
			};

			// RefMsgType(372): STRING
			struct RefMsgType
			{
				static constexpr uint16_t tag{ 372 };
			};

			// SessionRejectReason(373): INT
			struct SessionRejectReason
			{
				static constexpr uint16_t tag{ 373 };
				static constexpr int32_t XML_VALIDATION_ERROR{ 12 };
				static constexpr int32_t NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER{ 17 };
				static constexpr int32_t INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP{ 16 };
				static constexpr int32_t REPEATING_GROUP_FIELDS_OUT_OF_ORDER{ 15 };
				static constexpr int32_t TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER{ 14 };
				static constexpr int32_t INVALID_MSGTYPE{ 11 };
				static constexpr int32_t INVALID_TAG_NUMBER{ 0 };
				static constexpr int32_t COMPID_PROBLEM{ 9 };
				static constexpr int32_t SIGNATURE_PROBLEM{ 8 };
				static constexpr int32_t DECRYPTION_PROBLEM{ 7 };
				static constexpr int32_t INCORRECT_DATA_FORMAT_FOR_VALUE{ 6 };
				static constexpr int32_t VALUE_IS_INCORRECT{ 5 };
				static constexpr int32_t TAG_SPECIFIED_WITHOUT_A_VALUE{ 4 };
				static constexpr int32_t UNDEFINED_TAG{ 3 };
				static constexpr int32_t SENDINGTIME_ACCURACY_PROBLEM{ 10 };
				static constexpr int32_t TAG_APPEARS_MORE_THAN_ONCE{ 13 };
				static constexpr int32_t TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE{ 2 };
				static constexpr int32_t REQUIRED_TAG_MISSING{ 1 };
			};

			// BidRequestTransType(374): CHAR
			struct BidRequestTransType
			{
				static constexpr uint16_t tag{ 374 };
				static constexpr char NEW{ 'N' };
				static constexpr char CANCEL{ 'C' };
			};

			// ContraBroker(375): STRING
			struct ContraBroker
			{
				static constexpr uint16_t tag{ 375 };
			};

			// ComplianceID(376): STRING
			struct ComplianceID
			{
				static constexpr uint16_t tag{ 376 };
			};

			// SolicitedFlag(377): BOOLEAN
			struct SolicitedFlag
			{
				static constexpr uint16_t tag{ 377 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// ExecRestatementReason(378): INT
			struct ExecRestatementReason
			{
				static constexpr uint16_t tag{ 378 };
				static constexpr int32_t CANCEL_ON_SYSTEM_FAILURE{ 7 };
				static constexpr int32_t GT_CORPORATE_ACTION{ 0 };
				static constexpr int32_t MARKET{ 8 };
				static constexpr int32_t CANCEL_ON_TRADING_HALT{ 6 };
				static constexpr int32_t PARTIAL_DECLINE_OF_ORDERQTY{ 5 };
				static constexpr int32_t BROKER_OPTION{ 4 };
				static constexpr int32_t REPRICING_OF_ORDER{ 3 };
				static constexpr int32_t GT_RENEWAL{ 1 };
				static constexpr int32_t VERBAL_CHANGE{ 2 };
			};

			// BusinessRejectRefID(379): STRING
			struct BusinessRejectRefID
			{
				static constexpr uint16_t tag{ 379 };
			};

			// BusinessRejectReason(380): INT
			struct BusinessRejectReason
			{
				static constexpr uint16_t tag{ 380 };
				static constexpr int32_t UNSUPPORTED_MESSAGE_TYPE{ 3 };
				static constexpr int32_t DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME{ 7 };
				static constexpr int32_t APPLICATION_NOT_AVAILABLE{ 4 };
				static constexpr int32_t NOT_AUTHORIZED{ 6 };
				static constexpr int32_t OTHER{ 0 };
				static constexpr int32_t CONDITIONALLY_REQUIRED_FIELD_MISSING{ 5 };
				static constexpr int32_t UNKOWN_ID{ 1 };
				static constexpr int32_t UNKNOWN_SECURITY{ 2 };
			};

			// GrossTradeAmt(381): AMT
			struct GrossTradeAmt
			{
				static constexpr uint16_t tag{ 381 };
			};

			// NoContraBrokers(382): NUMINGROUP
			struct NoContraBrokers
			{
				static constexpr uint16_t tag{ 382 };
			};

			// MaxMessageSize(383): LENGTH
			struct MaxMessageSize
			{
				static constexpr uint16_t tag{ 383 };
			};

			// NoMsgTypes(384): NUMINGROUP
			struct NoMsgTypes
			{
				static constexpr uint16_t tag{ 384 };
			};

			// MsgDirection(385): CHAR
			struct MsgDirection
			{
				static constexpr uint16_t tag{ 385 };
				static constexpr char SEND{ 'S' };
				static constexpr char RECEIVE{ 'R' };
			};

			// NoTradingSessions(386): NUMINGROUP
			struct NoTradingSessions
			{
				static constexpr uint16_t tag{ 386 };
			};

			// TotalVolumeTraded(387): QTY
			struct TotalVolumeTraded
			{
				static constexpr uint16_t tag{ 387 };
			};

			// DiscretionInst(388): CHAR
			struct DiscretionInst
			{
				static constexpr uint16_t tag{ 388 };
				static constexpr char RELATED_TO_DISPLAYED_PRICE{ '0' };
				static constexpr char RELATED_TO_MARKET_PRICE{ '1' };
				static constexpr char RELATED_TO_PRIMARY_PRICE{ '2' };
				static constexpr char RELATED_TO_LOCAL_PRIMARY_PRICE{ '3' };
				static constexpr char RELATED_TO_MIDPOINT_PRICE{ '4' };
				static constexpr char RELATED_TO_LAST_TRADE_PRICE{ '5' };
			};

			// DiscretionOffset(389): PRICEOFFSET
			struct DiscretionOffset
			{
				static constexpr uint16_t tag{ 389 };
			};

			// BidID(390): STRING
			struct BidID
			{
				static constexpr uint16_t tag{ 390 };
			};

			// ClientBidID(391): STRING
			struct ClientBidID
			{
				static constexpr uint16_t tag{ 391 };
			};

			// ListName(392): STRING
			struct ListName
			{
				static constexpr uint16_t tag{ 392 };
			};

			// TotalNumSecurities(393): INT
			struct TotalNumSecurities
			{
				static constexpr uint16_t tag{ 393 };
			};

			// BidType(394): INT
			struct BidType
			{
				static constexpr uint16_t tag{ 394 };
				static constexpr int32_t NON_DISCLOSED_STYLE{ 1 };
				static constexpr int32_t DISCLOSED_STYLE{ 2 };
				static constexpr int32_t NO_BIDDING_PROCESS{ 3 };
			};

			// NumTickets(395): INT
			struct NumTickets
			{
				static constexpr uint16_t tag{ 395 };
			};

			// SideValue1(396): AMT
			struct SideValue1
			{
				static constexpr uint16_t tag{ 396 };
			};

			// SideValue2(397): AMT
			struct SideValue2
			{
				static constexpr uint16_t tag{ 397 };
			};

			// NoBidDescriptors(398): NUMINGROUP
			struct NoBidDescriptors
			{
				static constexpr uint16_t tag{ 398 };
			};

			// BidDescriptorType(399): INT
			struct BidDescriptorType
			{
				static constexpr uint16_t tag{ 399 };
				static constexpr int32_t INDEX{ 3 };
				static constexpr int32_t COUNTRY{ 2 };
				static constexpr int32_t SECTOR{ 1 };
			};

			// BidDescriptor(400): STRING
			struct BidDescriptor
			{
				static constexpr uint16_t tag{ 400 };
			};

			// SideValueInd(401): INT
			struct SideValueInd
			{
				static constexpr uint16_t tag{ 401 };
				static constexpr int32_t SIDEVALUE1{ 1 };
				static constexpr int32_t SIDEVALUE_2{ 2 };
			};

			// LiquidityPctLow(402): PERCENTAGE
			struct LiquidityPctLow
			{
				static constexpr uint16_t tag{ 402 };
			};

			// LiquidityPctHigh(403): PERCENTAGE
			struct LiquidityPctHigh
			{
				static constexpr uint16_t tag{ 403 };
			};

			// LiquidityValue(404): AMT
			struct LiquidityValue
			{
				static constexpr uint16_t tag{ 404 };
			};

			// EFPTrackingError(405): PERCENTAGE
			struct EFPTrackingError
			{
				static constexpr uint16_t tag{ 405 };
			};

			// FairValue(406): AMT
			struct FairValue
			{
				static constexpr uint16_t tag{ 406 };
			};

			// OutsideIndexPct(407): PERCENTAGE
			struct OutsideIndexPct
			{
				static constexpr uint16_t tag{ 407 };
			};

			// ValueOfFutures(408): AMT
			struct ValueOfFutures
			{
				static constexpr uint16_t tag{ 408 };
			};

			// LiquidityIndType(409): INT
			struct LiquidityIndType
			{
				static constexpr uint16_t tag{ 409 };
				static constexpr int32_t NORMAL_MARKET_SIZE{ 3 };
				static constexpr int32_t OTHER{ 4 };
				static constexpr int32_t _20_DAY_MOVING_AVERAGE{ 2 };
				static constexpr int32_t _5DAY_MOVING_AVERAGE{ 1 };
			};

			// WtAverageLiquidity(410): PERCENTAGE
			struct WtAverageLiquidity
			{
				static constexpr uint16_t tag{ 410 };
			};

			// ExchangeForPhysical(411): BOOLEAN
			struct ExchangeForPhysical
			{
				static constexpr uint16_t tag{ 411 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// OutMainCntryUIndex(412): AMT
			struct OutMainCntryUIndex
			{
				static constexpr uint16_t tag{ 412 };
			};

			// CrossPercent(413): PERCENTAGE
			struct CrossPercent
			{
				static constexpr uint16_t tag{ 413 };
			};

			// ProgRptReqs(414): INT
			struct ProgRptReqs
			{
				static constexpr uint16_t tag{ 414 };
				static constexpr int32_t REAL_TIME_EXECUTION_REPORTS{ 3 };
				static constexpr int32_t SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD{ 2 };
				static constexpr int32_t BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST{ 1 };
			};

			// ProgPeriodInterval(415): INT
			struct ProgPeriodInterval
			{
				static constexpr uint16_t tag{ 415 };
			};

			// IncTaxInd(416): INT
			struct IncTaxInd
			{
				static constexpr uint16_t tag{ 416 };
				static constexpr int32_t GROSS{ 2 };
				static constexpr int32_t NET{ 1 };
			};

			// NumBidders(417): INT
			struct NumBidders
			{
				static constexpr uint16_t tag{ 417 };
			};

			// TradeType(418): CHAR
			struct TradeType
			{
				static constexpr uint16_t tag{ 418 };
				static constexpr char VWAP_GUARANTEE{ 'G' };
				static constexpr char AGENCY{ 'A' };
				static constexpr char GUARANTEED_CLOSE{ 'J' };
				static constexpr char RISK_TRADE{ 'R' };
			};

			// BasisPxType(419): CHAR
			struct BasisPxType
			{
				static constexpr uint16_t tag{ 419 };
				static constexpr char VWAP_THROUGH_AN_AFTERNOON_SESSION{ '8' };
				static constexpr char OPEN{ 'D' };
				static constexpr char OTHERS{ 'Z' };
				static constexpr char STRIKE{ 'C' };
				static constexpr char VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI{ 'B' };
				static constexpr char VWAP_THROUGH_A_DAY_EXCEPT_YORI{ '9' };
				static constexpr char VWAP_THROUGH_A_MORNING_SESSION{ '7' };
				static constexpr char VWAP_THROUGH_A_DAY{ '6' };
				static constexpr char SQ{ '5' };
				static constexpr char CURRENT_PRICE{ '4' };
				static constexpr char CLOSING_PRICE{ '3' };
				static constexpr char CLOSING_PRICE_AT_MORNING_SESSION{ '2' };
				static constexpr char VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI{ 'A' };
			};

			// NoBidComponents(420): NUMINGROUP
			struct NoBidComponents
			{
				static constexpr uint16_t tag{ 420 };
			};

			// Country(421): COUNTRY
			struct Country
			{
				static constexpr uint16_t tag{ 421 };
			};

			// TotNoStrikes(422): INT
			struct TotNoStrikes
			{
				static constexpr uint16_t tag{ 422 };
			};

			// PriceType(423): INT
			struct PriceType
			{
				static constexpr uint16_t tag{ 423 };
				static constexpr int32_t FIXED_AMOUNT{ 3 };
				static constexpr int32_t PERCENTAGE{ 1 };
				static constexpr int32_t DISCOUNT{ 4 };
				static constexpr int32_t BASIS_POINTS_RELATIVE_TO_BENCHMARK{ 6 };
				static constexpr int32_t TED_PRICE{ 7 };
				static constexpr int32_t TED_YIELD{ 8 };
				static constexpr int32_t PREMIUM{ 5 };
				static constexpr int32_t PER_SHARE{ 2 };
			};

			// DayOrderQty(424): QTY
			struct DayOrderQty
			{
				static constexpr uint16_t tag{ 424 };
			};

			// DayCumQty(425): QTY
			struct DayCumQty
			{
				static constexpr uint16_t tag{ 425 };
			};

			// DayAvgPx(426): PRICE
			struct DayAvgPx
			{
				static constexpr uint16_t tag{ 426 };
			};

			// GTBookingInst(427): INT
			struct GTBookingInst
			{
				static constexpr uint16_t tag{ 427 };
				static constexpr int32_t BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION{ 0 };
				static constexpr int32_t ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE{ 2 };
				static constexpr int32_t ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES{ 1 };
			};

			// NoStrikes(428): NUMINGROUP
			struct NoStrikes
			{
				static constexpr uint16_t tag{ 428 };
			};

			// ListStatusType(429): INT
			struct ListStatusType
			{
				static constexpr uint16_t tag{ 429 };
				static constexpr int32_t ALERT{ 6 };
				static constexpr int32_t EXECSTARTED{ 4 };
				static constexpr int32_t TIMED{ 3 };
				static constexpr int32_t RESPONSE{ 2 };
				static constexpr int32_t ACK{ 1 };
				static constexpr int32_t ALLDONE{ 5 };
			};

			// NetGrossInd(430): INT
			struct NetGrossInd
			{
				static constexpr uint16_t tag{ 430 };
				static constexpr int32_t NET{ 1 };
				static constexpr int32_t GROSS{ 2 };
			};

			// ListOrderStatus(431): INT
			struct ListOrderStatus
			{
				static constexpr uint16_t tag{ 431 };
				static constexpr int32_t CANCELING{ 4 };
				static constexpr int32_t EXECUTING{ 3 };
				static constexpr int32_t REJECT{ 7 };
				static constexpr int32_t ALL_DONE{ 6 };
				static constexpr int32_t ALERT{ 5 };
				static constexpr int32_t RECEIVEDFOREXECUTION{ 2 };
				static constexpr int32_t INBIDDINGPROCESS{ 1 };
			};

			// ExpireDate(432): LOCALMKTDATE
			struct ExpireDate
			{
				static constexpr uint16_t tag{ 432 };
			};

			// ListExecInstType(433): CHAR
			struct ListExecInstType
			{
				static constexpr uint16_t tag{ 433 };
				static constexpr char EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW{ '5' };
				static constexpr char EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP{ '4' };
				static constexpr char WAIT_FOR_EXECUTE_INSTRUCTION{ '2' };
				static constexpr char IMMEDIATE{ '1' };
				static constexpr char EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN{ '3' };
			};

			// CxlRejResponseTo(434): CHAR
			struct CxlRejResponseTo
			{
				static constexpr uint16_t tag{ 434 };
				static constexpr char ORDER_CANCEL_REPLACE_REQUEST{ '2' };
				static constexpr char ORDER_CANCEL_REQUEST{ '1' };
			};

			// UnderlyingCouponRate(435): PERCENTAGE
			struct UnderlyingCouponRate
			{
				static constexpr uint16_t tag{ 435 };
			};

			// UnderlyingContractMultiplier(436): FLOAT
			struct UnderlyingContractMultiplier
			{
				static constexpr uint16_t tag{ 436 };
			};

			// ContraTradeQty(437): QTY
			struct ContraTradeQty
			{
				static constexpr uint16_t tag{ 437 };
			};

			// ContraTradeTime(438): UTCTIMESTAMP
			struct ContraTradeTime
			{
				static constexpr uint16_t tag{ 438 };
			};

			// ClearingFirm(439): STRING
			struct ClearingFirm
			{
				static constexpr uint16_t tag{ 439 };
			};

			// ClearingAccount(440): STRING
			struct ClearingAccount
			{
				static constexpr uint16_t tag{ 440 };
			};

			// LiquidityNumSecurities(441): INT
			struct LiquidityNumSecurities
			{
				static constexpr uint16_t tag{ 441 };
			};

			// MultiLegReportingType(442): CHAR
			struct MultiLegReportingType
			{
				static constexpr uint16_t tag{ 442 };
				static constexpr char SINGLE_SECURITY{ '1' };
				static constexpr char INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY{ '2' };
				static constexpr char MULTI_LEG_SECURITY{ '3' };
			};

			// StrikeTime(443): UTCTIMESTAMP
			struct StrikeTime
			{
				static constexpr uint16_t tag{ 443 };
			};

			// ListStatusText(444): STRING
			struct ListStatusText
			{
				static constexpr uint16_t tag{ 444 };
			};

			// EncodedListStatusTextLen(445): LENGTH
			struct EncodedListStatusTextLen
			{
				static constexpr uint16_t tag{ 445 };
			};

			// EncodedListStatusText(446): DATA
			struct EncodedListStatusText
			{
				static constexpr uint16_t tag{ 446 };
			};

			// PartyIDSource(447): CHAR
			struct PartyIDSource
			{
				static constexpr uint16_t tag{ 447 };
				static constexpr char CHINESE_B_SHARE{ '5' };
				static constexpr char US_EMPLOYER_IDENTIFICATION_NUMBER{ '8' };
				static constexpr char AUSTRALIAN_TAX_FILE_NUMBER{ 'A' };
				static constexpr char AUSTRALIAN_BUSINESS_NUMBER{ '9' };
				static constexpr char ISO_COUNTRY_CODE{ 'E' };
				static constexpr char BIC{ 'B' };
				static constexpr char US_SOCIAL_SECURITY_NUMBER{ '7' };
				static constexpr char PROPRIETARY_CUSTOM_CODE{ 'D' };
				static constexpr char SETTLEMENT_ENTITY_LOCATION{ 'F' };
				static constexpr char KOREAN_INVESTOR_ID{ '1' };
				static constexpr char TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII{ '2' };
				static constexpr char TAIWANESE_TRADING_ACCOUNT{ '3' };
				static constexpr char MALAYSIAN_CENTRAL_DEPOSITORY{ '4' };
				static constexpr char UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER{ '6' };
				static constexpr char GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER{ 'C' };
			};

			// PartyID(448): STRING
			struct PartyID
			{
				static constexpr uint16_t tag{ 448 };
			};

			// TotalVolumeTradedDate(449): UTCDATE
			struct TotalVolumeTradedDate
			{
				static constexpr uint16_t tag{ 449 };
			};

			// TotalVolumeTradedTime(450): UTCTIMEONLY
			struct TotalVolumeTradedTime
			{
				static constexpr uint16_t tag{ 450 };
			};

			// NetChgPrevDay(451): PRICEOFFSET
			struct NetChgPrevDay
			{
				static constexpr uint16_t tag{ 451 };
			};

			// PartyRole(452): INT
			struct PartyRole
			{
				static constexpr uint16_t tag{ 452 };
				static constexpr int32_t CORRESPONDANT_CLEARING_FIRM{ 15 };
				static constexpr int32_t CLIENT_ID{ 3 };
				static constexpr int32_t UNDERLYING_CONTRA_FIRM{ 20 };
				static constexpr int32_t SPONSORING_FIRM{ 19 };
				static constexpr int32_t CONTRA_CLEARING_FIRM{ 18 };
				static constexpr int32_t CONTRA_FIRM{ 17 };
				static constexpr int32_t EXECUTING_SYSTEM{ 16 };
				static constexpr int32_t ENTERING_FIRM{ 7 };
				static constexpr int32_t EXECUTING_FIRM{ 1 };
				static constexpr int32_t BROKER_OF_CREDIT{ 2 };
				static constexpr int32_t INVESTOR_ID{ 5 };
				static constexpr int32_t INTRODUCING_FIRM{ 6 };
				static constexpr int32_t GIVEUP_CLEARING_FIRM{ 14 };
				static constexpr int32_t LOCATE_LENDING_FIRM{ 8 };
				static constexpr int32_t FUND_MANAGER_CLIENT_ID{ 9 };
				static constexpr int32_t SETTLEMENT_LOCATION{ 10 };
				static constexpr int32_t ORDER_ORIGINATION_TRADER{ 11 };
				static constexpr int32_t EXECUTING_TRADER{ 12 };
				static constexpr int32_t ORDER_ORIGINATION_FIRM{ 13 };
				static constexpr int32_t CLEARING_FIRM{ 4 };
			};

			// NoPartyIDs(453): NUMINGROUP
			struct NoPartyIDs
			{
				static constexpr uint16_t tag{ 453 };
			};

			// NoSecurityAltID(454): NUMINGROUP
			struct NoSecurityAltID
			{
				static constexpr uint16_t tag{ 454 };
			};

			// SecurityAltID(455): STRING
			struct SecurityAltID
			{
				static constexpr uint16_t tag{ 455 };
			};

			// SecurityAltIDSource(456): STRING
			struct SecurityAltIDSource
			{
				static constexpr uint16_t tag{ 456 };
			};

			// NoUnderlyingSecurityAltID(457): NUMINGROUP
			struct NoUnderlyingSecurityAltID
			{
				static constexpr uint16_t tag{ 457 };
			};

			// UnderlyingSecurityAltID(458): STRING
			struct UnderlyingSecurityAltID
			{
				static constexpr uint16_t tag{ 458 };
			};

			// UnderlyingSecurityAltIDSource(459): STRING
			struct UnderlyingSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 459 };
			};

			// Product(460): INT 
			struct Product
			{
				static constexpr uint16_t tag{ 460 };
				static inline const std::string LOAN{ "8" };
				static inline const std::string OTHER{ "12" };
				static inline const std::string MUNICIPAL{ "11" };
				static inline const std::string AGENCY{ "1" };
				static inline const std::string CORPORATE{ "3" };
				static inline const std::string CURRENCY{ "4" };
				static inline const std::string COMMODITY{ "2" };
				static inline const std::string GOVERNMENT{ "6" };
				static inline const std::string MORTGAGE{ "10" };
				static inline const std::string INDEX{ "7" };
				static inline const std::string MONEYMARKET{ "9" };
				static inline const std::string EQUITY{ "5" };
			};

			// CFICode(461): STRING
			struct CFICode
			{
				static constexpr uint16_t tag{ 461 };
			};

			// UnderlyingProduct(462): INT
			struct UnderlyingProduct
			{
				static constexpr uint16_t tag{ 462 };
			};

			// UnderlyingCFICode(463): STRING
			struct UnderlyingCFICode
			{
				static constexpr uint16_t tag{ 463 };
			};

			// TestMessageIndicator(464): BOOLEAN
			struct TestMessageIndicator
			{
				static constexpr uint16_t tag{ 464 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// QuantityType(465): INT
			struct QuantityType
			{
				static constexpr uint16_t tag{ 465 };
				static constexpr int32_t CONTRACTS{ 6 };
				static constexpr int32_t OTHER{ 7 };
				static constexpr int32_t CURRENCY{ 5 };
				static constexpr int32_t ORIGINALFACE{ 4 };
				static constexpr int32_t CURRENTFACE{ 3 };
				static constexpr int32_t BONDS{ 2 };
				static constexpr int32_t SHARES{ 1 };
				static constexpr int32_t PAR{ 8 };
			};

			// BookingRefID(466): STRING
			struct BookingRefID
			{
				static constexpr uint16_t tag{ 466 };
			};

			// IndividualAllocID(467): STRING
			struct IndividualAllocID
			{
				static constexpr uint16_t tag{ 467 };
			};

			// RoundingDirection(468): CHAR
			struct RoundingDirection
			{
				static constexpr uint16_t tag{ 468 };
				static constexpr char ROUND_TO_NEAREST{ '0' };
				static constexpr char ROUND_DOWN{ '1' };
				static constexpr char ROUND_UP{ '2' };
			};

			// RoundingModulus(469): FLOAT
			struct RoundingModulus
			{
				static constexpr uint16_t tag{ 469 };
			};

			// CountryOfIssue(470): COUNTRY
			struct CountryOfIssue
			{
				static constexpr uint16_t tag{ 470 };
			};

			// StateOrProvinceOfIssue(471): STRING
			struct StateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 471 };
			};

			// LocaleOfIssue(472): STRING
			struct LocaleOfIssue
			{
				static constexpr uint16_t tag{ 472 };
			};

			// NoRegistDtls(473): NUMINGROUP
			struct NoRegistDtls
			{
				static constexpr uint16_t tag{ 473 };
			};

			// MailingDtls(474): STRING
			struct MailingDtls
			{
				static constexpr uint16_t tag{ 474 };
			};

			// InvestorCountryOfResidence(475): COUNTRY
			struct InvestorCountryOfResidence
			{
				static constexpr uint16_t tag{ 475 };
			};

			// PaymentRef(476): STRING
			struct PaymentRef
			{
				static constexpr uint16_t tag{ 476 };
			};

			// DistribPaymentMethod(477): INT
			struct DistribPaymentMethod
			{
				static constexpr uint16_t tag{ 477 };
			};

			// CashDistribCurr(478): CURRENCY
			struct CashDistribCurr
			{
				static constexpr uint16_t tag{ 478 };
			};

			// CommCurrency(479): CURRENCY
			struct CommCurrency
			{
				static constexpr uint16_t tag{ 479 };
			};

			// CancellationRights(480): CHAR
			struct CancellationRights
			{
				static constexpr uint16_t tag{ 480 };
				static constexpr char NO_WAIVER_AGREEMENT{ 'M' };
				static constexpr char NO_EXECUTION_ONLY{ 'N' };
				static constexpr char YES{ 'Y' };
				static constexpr char NO_INSTITUTIONAL{ 'O' };
			};

			// MoneyLaunderingStatus(481): CHAR
			struct MoneyLaunderingStatus
			{
				static constexpr uint16_t tag{ 481 };
				static constexpr char EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION{ '3' };
				static constexpr char EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION{ '2' };
				static constexpr char EXEMPT_BELOW_THE_LIMIT{ '1' };
				static constexpr char PASSED{ 'Y' };
				static constexpr char NOT_CHECKED{ 'N' };
			};

			// MailingInst(482): STRING
			struct MailingInst
			{
				static constexpr uint16_t tag{ 482 };
			};

			// TransBkdTime(483): UTCTIMESTAMP
			struct TransBkdTime
			{
				static constexpr uint16_t tag{ 483 };
			};

			// ExecPriceType(484): CHAR
			struct ExecPriceType
			{
				static constexpr uint16_t tag{ 484 };
				static constexpr char SINGLE_PRICE{ 'S' };
				static constexpr char OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT{ 'Q' };
				static constexpr char OFFER_PRICE_MINUS_ADJUSTMENT{ 'P' };
				static constexpr char OFFER_PRICE{ 'O' };
				static constexpr char CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT{ 'E' };
				static constexpr char CREATION_PRICE_PLUS_ADJUSTMENT{ 'D' };
				static constexpr char CREATION_PRICE{ 'C' };
				static constexpr char BID_PRICE{ 'B' };
			};

			// ExecPriceAdjustment(485): FLOAT
			struct ExecPriceAdjustment
			{
				static constexpr uint16_t tag{ 485 };
			};

			// DateOfBirth(486): LOCALMKTDATE
			struct DateOfBirth
			{
				static constexpr uint16_t tag{ 486 };
			};

			// TradeReportTransType(487): CHAR
			struct TradeReportTransType
			{
				static constexpr uint16_t tag{ 487 };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
				static constexpr char CANCEL{ 'C' };
			};

			// CardHolderName(488): STRING
			struct CardHolderName
			{
				static constexpr uint16_t tag{ 488 };
			};

			// CardNumber(489): STRING
			struct CardNumber
			{
				static constexpr uint16_t tag{ 489 };
			};

			// CardExpDate(490): LOCALMKTDATE
			struct CardExpDate
			{
				static constexpr uint16_t tag{ 490 };
			};

			// CardIssNo(491): STRING
			struct CardIssNo
			{
				static constexpr uint16_t tag{ 491 };
			};

			// PaymentMethod(492): INT
			struct PaymentMethod
			{
				static constexpr uint16_t tag{ 492 };
				static constexpr int32_t BPAY{ 14 };
				static constexpr int32_t ACH_CREDIT{ 13 };
				static constexpr int32_t ACH_DEBIT{ 12 };
				static constexpr int32_t CREDIT_CARD{ 11 };
				static constexpr int32_t DIRECT_CREDIT{ 10 };
				static constexpr int32_t DIRECT_DEBIT{ 9 };
				static constexpr int32_t DEBIT_CARD{ 8 };
				static constexpr int32_t FEDWIRE{ 7 };
				static constexpr int32_t HIGH_VALUE_CLEARING_SYSTEM{ 15 };
				static constexpr int32_t EUROCLEAR{ 3 };
				static constexpr int32_t TELEGRAPHIC_TRANSFER{ 6 };
				static constexpr int32_t CLEARSTREAM{ 4 };
				static constexpr int32_t CREST{ 1 };
				static constexpr int32_t NSCC{ 2 };
				static constexpr int32_t CHEQUE{ 5 };
			};

			// RegistAcctType(493): STRING
			struct RegistAcctType
			{
				static constexpr uint16_t tag{ 493 };
			};

			// Designation(494): STRING
			struct Designation
			{
				static constexpr uint16_t tag{ 494 };
			};

			// TaxAdvantageType(495): INT
			struct TaxAdvantageType
			{
				static constexpr uint16_t tag{ 495 };
				static constexpr int32_t PROFIT_SHARING_PLAN{ 19 };
				static constexpr int32_t EMPLOYER{ 11 };
				static constexpr int32_t EMPLOYER_CURRENT_YEAR{ 12 };
				static constexpr int32_t NON_FUND_PROTOTYPE_IRA{ 13 };
				static constexpr int32_t NON_FUND_QUALIFIED_PLAN{ 14 };
				static constexpr int32_t DEFINED_CONTRIBUTION_PLAN{ 15 };
				static constexpr int32_t EMPLOYEE_CURRENT_YEAR{ 10 };
				static constexpr int32_t INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER{ 17 };
				static constexpr int32_t MINI_INSURANCE_ISA{ 5 };
				static constexpr int32_t INDIVIDUAL_RETIREMENT_ACCOUNT{ 16 };
				static constexpr int32_t EMPLOYEE{ 9 };
				static constexpr int32_t ASSET_TRANSFER{ 8 };
				static constexpr int32_t SELF_DIRECTED_IRA{ 21 };
				static constexpr int32_t CURRENT_YEAR_PAYMENT{ 6 };
				static constexpr int32_t _401K{ 20 };
				static constexpr int32_t MINI_STOCKS_AND_SHARES_ISA{ 4 };
				static constexpr int32_t MINI_CASH_ISA{ 3 };
				static constexpr int32_t TESSA{ 2 };
				static constexpr int32_t MAXI_ISA{ 1 };
				static constexpr int32_t NONE_NOT_APPLICABLE{ 0 };
				static constexpr int32_t PRIOR_YEAR_PAYMENT{ 7 };
				static constexpr int32_t _457{ 23 };
				static constexpr int32_t ROTH_IRA_24{ 24 };
				static constexpr int32_t ROTH_IRA_25{ 25 };
				static constexpr int32_t ROTH_CONVERSION_IRA_26{ 26 };
				static constexpr int32_t ROTH_CONVERSION_IRA_27{ 27 };
				static constexpr int32_t EDUCATION_IRA_28{ 28 };
				static constexpr int32_t EDUCATION_IRA_29{ 29 };
				static constexpr int32_t KEOGH{ 18 };
				static constexpr int32_t _403{ 22 };
			};

			// RegistRejReasonText(496): STRING
			struct RegistRejReasonText
			{
				static constexpr uint16_t tag{ 496 };
			};

			// FundRenewWaiv(497): CHAR
			struct FundRenewWaiv
			{
				static constexpr uint16_t tag{ 497 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// CashDistribAgentName(498): STRING
			struct CashDistribAgentName
			{
				static constexpr uint16_t tag{ 498 };
			};

			// CashDistribAgentCode(499): STRING
			struct CashDistribAgentCode
			{
				static constexpr uint16_t tag{ 499 };
			};

			// CashDistribAgentAcctNumber(500): STRING
			struct CashDistribAgentAcctNumber
			{
				static constexpr uint16_t tag{ 500 };
			};

			// CashDistribPayRef(501): STRING
			struct CashDistribPayRef
			{
				static constexpr uint16_t tag{ 501 };
			};

			// CashDistribAgentAcctName(502): STRING
			struct CashDistribAgentAcctName
			{
				static constexpr uint16_t tag{ 502 };
			};

			// CardStartDate(503): LOCALMKTDATE
			struct CardStartDate
			{
				static constexpr uint16_t tag{ 503 };
			};

			// PaymentDate(504): LOCALMKTDATE
			struct PaymentDate
			{
				static constexpr uint16_t tag{ 504 };
			};

			// PaymentRemitterID(505): STRING
			struct PaymentRemitterID
			{
				static constexpr uint16_t tag{ 505 };
			};

			// RegistStatus(506): CHAR
			struct RegistStatus
			{
				static constexpr uint16_t tag{ 506 };
				static constexpr char ACCEPT{ 'A' };
				static constexpr char REMINDER{ 'N' };
				static constexpr char REJECT{ 'R' };
				static constexpr char HELD{ 'H' };
			};

			// RegistRejReasonCode(507): INT
			struct RegistRejReasonCode
			{
				static constexpr uint16_t tag{ 507 };
				static constexpr int32_t INVALID_UNACCEPTABLE_NODISTRIBINSTNS{ 13 };
				static constexpr int32_t INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE{ 17 };
				static constexpr int32_t INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME{ 16 };
				static constexpr int32_t INVALID_UNACCEPTABLE_NO_REG_DETLS{ 4 };
				static constexpr int32_t INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD{ 15 };
				static constexpr int32_t INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE{ 14 };
				static constexpr int32_t INVALID_UNACCEPTABLE_OWNERSHIP_TYPE{ 3 };
				static constexpr int32_t INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE{ 2 };
				static constexpr int32_t INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE{ 12 };
				static constexpr int32_t INVALID_UNACCEPTABLE_DATE_OF_BIRTH{ 11 };
				static constexpr int32_t INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE{ 10 };
				static constexpr int32_t INVALID_UNACCEPTABLE_INVESTOR_ID{ 9 };
				static constexpr int32_t INVALID_UNACCEPTABLE_MAILING_INST{ 8 };
				static constexpr int32_t INVALID_UNACCEPTABLE_MAILING_DTLS{ 7 };
				static constexpr int32_t INVALID_UNACCEPTABLE_REG_SEQ_NO{ 5 };
				static constexpr int32_t INVALID_UNACCEPTABLE_ACCOUNT_TYPE{ 1 };
				static constexpr int32_t INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM{ 18 };
				static constexpr int32_t INVALID_UNACCEPTABLE_REG_DTLS{ 6 };
			};

			// RegistRefID(508): STRING
			struct RegistRefID
			{
				static constexpr uint16_t tag{ 508 };
			};

			// RegistDetls(509): STRING
			struct RegistDetls
			{
				static constexpr uint16_t tag{ 509 };
			};

			// NoDistribInsts(510): NUMINGROUP
			struct NoDistribInsts
			{
				static constexpr uint16_t tag{ 510 };
			};

			// RegistEmail(511): STRING
			struct RegistEmail
			{
				static constexpr uint16_t tag{ 511 };
			};

			// DistribPercentage(512): PERCENTAGE
			struct DistribPercentage
			{
				static constexpr uint16_t tag{ 512 };
			};

			// RegistID(513): STRING
			struct RegistID
			{
				static constexpr uint16_t tag{ 513 };
			};

			// RegistTransType(514): CHAR
			struct RegistTransType
			{
				static constexpr uint16_t tag{ 514 };
				static constexpr char CANCEL{ '2' };
				static constexpr char NEW{ '0' };
				static constexpr char REPLACE{ '1' };
			};

			// ExecValuationPoint(515): UTCTIMESTAMP
			struct ExecValuationPoint
			{
				static constexpr uint16_t tag{ 515 };
			};

			// OrderPercent(516): PERCENTAGE
			struct OrderPercent
			{
				static constexpr uint16_t tag{ 516 };
			};

			// OwnershipType(517): CHAR
			struct OwnershipType
			{
				static constexpr uint16_t tag{ 517 };
			};

			// NoContAmts(518): NUMINGROUP
			struct NoContAmts
			{
				static constexpr uint16_t tag{ 518 };
			};

			// ContAmtType(519): INT
			struct ContAmtType
			{
				static constexpr uint16_t tag{ 519 };
				static constexpr int32_t NET_SETTLEMENT_AMOUNT{ 15 };
				static constexpr int32_t COMMISSION_AMOUNT{ 1 };
				static constexpr int32_t COMMISSION{ 2 };
				static constexpr int32_t INITIAL_CHARGE_AMOUNT{ 3 };
				static constexpr int32_t INITIAL_CHARGE{ 4 };
				static constexpr int32_t DISCOUNT_AMOUNT{ 5 };
				static constexpr int32_t DISCOUNT{ 6 };
				static constexpr int32_t DILUTION_LEVY_AMOUNT{ 7 };
				static constexpr int32_t DILUTION_LEVY{ 8 };
				static constexpr int32_t EXIT_CHARGE_AMOUNT{ 9 };
				static constexpr int32_t EXIT_CHARGE{ 10 };
				static constexpr int32_t FUND_BASED_RENEWAL_COMMISSION{ 11 };
				static constexpr int32_t PROJECTED_FUND_VALUE{ 12 };
				static constexpr int32_t FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14{ 14 };
				static constexpr int32_t FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13{ 13 };
			};

			// ContAmtValue(520): FLOAT
			struct ContAmtValue
			{
				static constexpr uint16_t tag{ 520 };
			};

			// ContAmtCurr(521): CURRENCY
			struct ContAmtCurr
			{
				static constexpr uint16_t tag{ 521 };
			};

			// OwnerType(522): INT
			struct OwnerType
			{
				static constexpr uint16_t tag{ 522 };
				static constexpr int32_t COMPANY_TRUSTEE{ 5 };
				static constexpr int32_t NOMINEE{ 13 };
				static constexpr int32_t CORPORATE_BODY{ 12 };
				static constexpr int32_t NON_PROFIT_ORGANIZATION{ 11 };
				static constexpr int32_t NETWORKING_SUB_ACCOUNT{ 10 };
				static constexpr int32_t FIDUCIARIES{ 9 };
				static constexpr int32_t TRUSTS{ 8 };
				static constexpr int32_t PENSION_PLAN{ 6 };
				static constexpr int32_t INDIVIDUAL_TRUSTEE{ 4 };
				static constexpr int32_t PUBLIC_COMPANY{ 2 };
				static constexpr int32_t PRIVATE_COMPANY{ 3 };
				static constexpr int32_t INDIVIDUAL_INVESTOR{ 1 };
				static constexpr int32_t CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT{ 7 };
			};

			// PartySubID(523): STRING
			struct PartySubID
			{
				static constexpr uint16_t tag{ 523 };
			};

			// NestedPartyID(524): STRING
			struct NestedPartyID
			{
				static constexpr uint16_t tag{ 524 };
			};

			// NestedPartyIDSource(525): CHAR
			struct NestedPartyIDSource
			{
				static constexpr uint16_t tag{ 525 };
			};

			// SecondaryClOrdID(526): STRING
			struct SecondaryClOrdID
			{
				static constexpr uint16_t tag{ 526 };
			};

			// SecondaryExecID(527): STRING
			struct SecondaryExecID
			{
				static constexpr uint16_t tag{ 527 };
			};

			// OrderCapacity(528): CHAR
			struct OrderCapacity
			{
				static constexpr uint16_t tag{ 528 };
				static constexpr char RISKLESS_PRINCIPAL{ 'R' };
				static constexpr char INDIVIDUAL{ 'I' };
				static constexpr char PRINCIPAL{ 'P' };
				static constexpr char AGENT_FOR_OTHER_MEMBER{ 'W' };
				static constexpr char AGENCY{ 'A' };
				static constexpr char PROPRIETARY{ 'G' };
			};

			// OrderRestrictions(529): MULTIPLEVALUESTRING
			struct OrderRestrictions
			{
				static constexpr uint16_t tag{ 529 };
				static inline const std::string FOREIGN_ENTITY{ "7" };
				static inline const std::string RISKLESS_ARBITRAGE{ "A" };
				static inline const std::string PROGRAM_TRADE{ "1" };
				static inline const std::string EXTERNAL_MARKET_PARTICIPANT{ "8" };
				static inline const std::string ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY{ "6" };
				static inline const std::string ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY{ "5" };
				static inline const std::string NON_INDEX_ARBITRAGE{ "3" };
				static inline const std::string INDEX_ARBITRAGE{ "2" };
				static inline const std::string COMPETING_MARKET_MAKER{ "4" };
				static inline const std::string EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE{ "9" };
			};

			// MassCancelRequestType(530): CHAR
			struct MassCancelRequestType
			{
				static constexpr uint16_t tag{ 530 };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITY{ '1' };
				static constexpr char CANCEL_ALL_ORDERS{ '7' };
				static constexpr char CANCEL_ORDERS_FOR_A_TRADING_SESSION{ '6' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITYTYPE{ '5' };
				static constexpr char CANCEL_ORDERS_FOR_A_CFICODE{ '4' };
				static constexpr char CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY{ '2' };
				static constexpr char CANCEL_ORDERS_FOR_A_PRODUCT{ '3' };
			};

			// MassCancelResponse(531): CHAR
			struct MassCancelResponse
			{
				static constexpr uint16_t tag{ 531 };
				static constexpr char CANCEL_ORDERS_FOR_A_TRADING_SESSION{ '6' };
				static constexpr char CANCEL_REQUEST_REJECTED{ '0' };
				static constexpr char CANCEL_ALL_ORDERS{ '7' };
				static constexpr char CANCEL_ORDERS_FOR_A_PRODUCT{ '3' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITYTYPE{ '5' };
				static constexpr char CANCEL_ORDERS_FOR_A_CFICODE{ '4' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITY{ '1' };
				static constexpr char CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY{ '2' };
			};

			// MassCancelRejectReason(532): CHAR
			struct MassCancelRejectReason
			{
				static constexpr uint16_t tag{ 532 };
				static constexpr char INVALID_OR_UNKNOWN_UNDERLYING{ '2' };
				static constexpr char INVALID_OR_UNKNOWN_TRADING_SESSION{ '6' };
				static constexpr char INVALID_OR_UNKNOWN_SECURITY_TYPE{ '5' };
				static constexpr char INVALID_OR_UNKNOWN_PRODUCT{ '3' };
				static constexpr char INVALID_OR_UNKNOWN_SECURITY{ '1' };
				static constexpr char MASS_CANCEL_NOT_SUPPORTED{ '0' };
				static constexpr char INVALID_OR_UNKNOWN_CFICODE{ '4' };
			};

			// TotalAffectedOrders(533): INT
			struct TotalAffectedOrders
			{
				static constexpr uint16_t tag{ 533 };
			};

			// NoAffectedOrders(534): INT
			struct NoAffectedOrders
			{
				static constexpr uint16_t tag{ 534 };
			};

			// AffectedOrderID(535): STRING
			struct AffectedOrderID
			{
				static constexpr uint16_t tag{ 535 };
			};

			// AffectedSecondaryOrderID(536): STRING
			struct AffectedSecondaryOrderID
			{
				static constexpr uint16_t tag{ 536 };
			};

			// QuoteType(537): INT
			struct QuoteType
			{
				static constexpr uint16_t tag{ 537 };
				static constexpr int32_t INDICATIVE{ 0 };
				static constexpr int32_t TRADEABLE{ 1 };
				static constexpr int32_t RESTRICTED_TRADEABLE{ 2 };
			};

			// NestedPartyRole(538): INT
			struct NestedPartyRole
			{
				static constexpr uint16_t tag{ 538 };
			};

			// NoNestedPartyIDs(539): NUMINGROUP
			struct NoNestedPartyIDs
			{
				static constexpr uint16_t tag{ 539 };
			};

			// TotalAccruedInterestAmt(540): AMT
			struct TotalAccruedInterestAmt
			{
				static constexpr uint16_t tag{ 540 };
			};

			// MaturityDate(541): LOCALMKTDATE
			struct MaturityDate
			{
				static constexpr uint16_t tag{ 541 };
			};

			// UnderlyingMaturityDate(542): LOCALMKTDATE
			struct UnderlyingMaturityDate
			{
				static constexpr uint16_t tag{ 542 };
			};

			// InstrRegistry(543): STRING
			struct InstrRegistry
			{
				static constexpr uint16_t tag{ 543 };
			};

			// CashMargin(544): CHAR
			struct CashMargin
			{
				static constexpr uint16_t tag{ 544 };
				static constexpr char MARGIN_OPEN{ '2' };
				static constexpr char MARGIN_CLOSE{ '3' };
				static constexpr char CASH{ '1' };
			};

			// NestedPartySubID(545): STRING
			struct NestedPartySubID
			{
				static constexpr uint16_t tag{ 545 };
			};

			// Scope(546): MULTIPLEVALUESTRING
			struct Scope
			{
				static constexpr uint16_t tag{ 546 };
				static inline const std::string LOCAL{ "1" };
				static inline const std::string NATIONAL{ "2" };
				static inline const std::string GLOBAL{ "3" };
			};

			// MDImplicitDelete(547): BOOLEAN
			struct MDImplicitDelete
			{
				static constexpr uint16_t tag{ 547 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// CrossID(548): STRING
			struct CrossID
			{
				static constexpr uint16_t tag{ 548 };
			};

			// CrossType(549): INT
			struct CrossType
			{
				static constexpr uint16_t tag{ 549 };
				static constexpr int32_t CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE{ 1 };
				static constexpr int32_t CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE{ 2 };
				static constexpr int32_t CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED{ 3 };
				static constexpr int32_t CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE{ 4 };
			};

			// CrossPrioritization(550): INT
			struct CrossPrioritization
			{
				static constexpr uint16_t tag{ 550 };
				static constexpr int32_t SELLSIDE_PRIORITIZED{ 2 };
				static constexpr int32_t NONE{ 0 };
				static constexpr int32_t BUYSIDE_PRIORITIZED{ 1 };
			};

			// OrigCrossID(551): STRING
			struct OrigCrossID
			{
				static constexpr uint16_t tag{ 551 };
			};

			// NoSides(552): NUMINGROUP
			struct NoSides
			{
				static constexpr uint16_t tag{ 552 };
				static inline const std::string ONE_SIDE{ "1" };
				static inline const std::string BOTH_SIDES{ "2" };
			};

			// Username(553): STRING
			struct Username
			{
				static constexpr uint16_t tag{ 553 };
			};

			// Password(554): STRING
			struct Password
			{
				static constexpr uint16_t tag{ 554 };
			};

			// NoLegs(555): NUMINGROUP
			struct NoLegs
			{
				static constexpr uint16_t tag{ 555 };
			};

			// LegCurrency(556): CURRENCY
			struct LegCurrency
			{
				static constexpr uint16_t tag{ 556 };
			};

			// TotalNumSecurityTypes(557): INT
			struct TotalNumSecurityTypes
			{
				static constexpr uint16_t tag{ 557 };
			};

			// NoSecurityTypes(558): NUMINGROUP
			struct NoSecurityTypes
			{
				static constexpr uint16_t tag{ 558 };
			};

			// SecurityListRequestType(559): INT
			struct SecurityListRequestType
			{
				static constexpr uint16_t tag{ 559 };
				static constexpr int32_t SECURITYTYPE_AND_OR_CFICODE{ 1 };
				static constexpr int32_t PRODUCT{ 2 };
				static constexpr int32_t TRADINGSESSIONID{ 3 };
				static constexpr int32_t ALL_SECURITIES{ 4 };
				static constexpr int32_t SYMBOL{ 0 };
			};

			// SecurityRequestResult(560): INT
			struct SecurityRequestResult
			{
				static constexpr uint16_t tag{ 560 };
				static constexpr int32_t INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE{ 4 };
				static constexpr int32_t VALID_REQUEST{ 0 };
				static constexpr int32_t INVALID_OR_UNSUPPORTED_REQUEST{ 1 };
				static constexpr int32_t REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED{ 5 };
				static constexpr int32_t NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA{ 3 };
				static constexpr int32_t NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA{ 2 };
			};

			// RoundLot(561): QTY
			struct RoundLot
			{
				static constexpr uint16_t tag{ 561 };
			};

			// MinTradeVol(562): QTY
			struct MinTradeVol
			{
				static constexpr uint16_t tag{ 562 };
			};

			// MultiLegRptTypeReq(563): INT
			struct MultiLegRptTypeReq
			{
				static constexpr uint16_t tag{ 563 };
			};

			// LegPositionEffect(564): CHAR
			struct LegPositionEffect
			{
				static constexpr uint16_t tag{ 564 };
			};

			// LegCoveredOrUncovered(565): INT
			struct LegCoveredOrUncovered
			{
				static constexpr uint16_t tag{ 565 };
			};

			// LegPrice(566): PRICE
			struct LegPrice
			{
				static constexpr uint16_t tag{ 566 };
			};

			// TradSesStatusRejReason(567): INT
			struct TradSesStatusRejReason
			{
				static constexpr uint16_t tag{ 567 };
				static constexpr int32_t UNKNOWN_OR_INVALID_TRADINGSESSIONID{ 1 };
			};

			// TradeRequestID(568): STRING
			struct TradeRequestID
			{
				static constexpr uint16_t tag{ 568 };
			};

			// TradeRequestType(569): INT
			struct TradeRequestType
			{
				static constexpr uint16_t tag{ 569 };
				static constexpr int32_t ADVISORIES_THAT_MATCH_CRITERIA{ 4 };
				static constexpr int32_t UNREPORTED_TRADES_THAT_MATCH_CRITERIA{ 3 };
				static constexpr int32_t UNMATCHED_TRADES_THAT_MATCH_CRITERIA{ 2 };
				static constexpr int32_t MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST{ 1 };
				static constexpr int32_t ALL_TRADES{ 0 };
			};

			// PreviouslyReported(570): BOOLEAN
			struct PreviouslyReported
			{
				static constexpr uint16_t tag{ 570 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// TradeReportID(571): STRING
			struct TradeReportID
			{
				static constexpr uint16_t tag{ 571 };
			};

			// TradeReportRefID(572): STRING
			struct TradeReportRefID
			{
				static constexpr uint16_t tag{ 572 };
			};

			// MatchStatus(573): CHAR
			struct MatchStatus
			{
				static constexpr uint16_t tag{ 573 };
				static constexpr char COMPARED_MATCHED_OR_AFFIRMED{ '0' };
				static constexpr char UNCOMPARED_UNMATCHED_OR_UNAFFIRMED{ '1' };
				static constexpr char ADVISORY_OR_ALERT{ '2' };
			};

			// MatchType(574): STRING
			struct MatchType
			{
				static constexpr uint16_t tag{ 574 };
				static inline const std::string SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S5{ "S5" };
				static inline const std::string ACT_M1_MATCH{ "M1" };
				static inline const std::string ACT_M6_MATCH{ "M6" };
				static inline const std::string ACT_DEFAULT_AFTER_M2{ "M5" };
				static inline const std::string ACT_ACCEPTED_TRADE{ "M3" };
				static inline const std::string SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S2{ "S2" };
				static inline const std::string SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S3{ "S3" };
				static inline const std::string SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S4{ "S4" };
				static inline const std::string ACT_M2_MATCH{ "M2" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES{ "A2" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME{ "A3" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND{ "A4" };
				static inline const std::string COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST{ "AQ" };
				static inline const std::string NON_ACT{ "MT" };
				static inline const std::string ACT_DEFAULT_TRADE{ "M4" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME{ "A1" };
				static inline const std::string SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S1{ "S1" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME{ "A5" };
			};

			// OddLot(575): BOOLEAN
			struct OddLot
			{
				static constexpr uint16_t tag{ 575 };
			};

			// NoClearingInstructions(576): INT
			struct NoClearingInstructions
			{
				static constexpr uint16_t tag{ 576 };
			};

			// ClearingInstruction(577): INT
			struct ClearingInstruction
			{
				static constexpr uint16_t tag{ 577 };
				static constexpr int32_t MANUAL_MODE{ 8 };
				static constexpr int32_t MULTILATERAL_NETTING{ 5 };
				static constexpr int32_t AUTOMATIC_POSTING_MODE{ 9 };
				static constexpr int32_t BILATERAL_NETTING_ONLY{ 2 };
				static constexpr int32_t CLEAR_AGAINST_CENTRAL_COUNTERPARTY{ 6 };
				static constexpr int32_t AUTOMATIC_GIVE_UP_MODE{ 10 };
				static constexpr int32_t SPECIAL_TRADE{ 4 };
				static constexpr int32_t EX_CLEARING{ 3 };
				static constexpr int32_t PROCESS_NORMALLY{ 0 };
				static constexpr int32_t EXCLUDE_FROM_CENTRAL_COUNTERPARTY{ 7 };
				static constexpr int32_t EXCLUDE_FROM_ALL_NETTING{ 1 };
			};

			// TradeInputSource(578): STRING
			struct TradeInputSource
			{
				static constexpr uint16_t tag{ 578 };
			};

			// TradeInputDevice(579): STRING
			struct TradeInputDevice
			{
				static constexpr uint16_t tag{ 579 };
			};

			// NoDates(580): INT
			struct NoDates
			{
				static constexpr uint16_t tag{ 580 };
			};

			// AccountType(581): INT
			struct AccountType
			{
				static constexpr uint16_t tag{ 581 };
				static constexpr int32_t HOUSE_TRADER{ 3 };
				static constexpr int32_t ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED{ 7 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED{ 6 };
				static constexpr int32_t FLOOR_TRADER{ 4 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS{ 2 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS{ 1 };
				static constexpr int32_t JOINT_BACKOFFICE_ACCOUNT{ 8 };
			};

			// CustOrderCapacity(582): INT
			struct CustOrderCapacity
			{
				static constexpr uint16_t tag{ 582 };
			};

			// ClOrdLinkID(583): STRING
			struct ClOrdLinkID
			{
				static constexpr uint16_t tag{ 583 };
			};

			// MassStatusReqID(584): STRING
			struct MassStatusReqID
			{
				static constexpr uint16_t tag{ 584 };
			};

			// MassStatusReqType(585): INT
			struct MassStatusReqType
			{
				static constexpr uint16_t tag{ 585 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_SECURITY{ 1 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY{ 2 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_PRODUCT{ 3 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_CFICODE{ 4 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE{ 5 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION{ 6 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_PARTYID{ 8 };
				static constexpr int32_t STATUS_FOR_ALL_ORDERS{ 7 };
			};

			// OrigOrdModTime(586): UTCTIMESTAMP
			struct OrigOrdModTime
			{
				static constexpr uint16_t tag{ 586 };
			};

			// LegSettlmntTyp(587): CHAR
			struct LegSettlmntTyp
			{
				static constexpr uint16_t tag{ 587 };
			};

			// LegFutSettDate(588): LOCALMKTDATE
			struct LegFutSettDate
			{
				static constexpr uint16_t tag{ 588 };
			};

			// DayBookingInst(589): CHAR
			struct DayBookingInst
			{
				static constexpr uint16_t tag{ 589 };
				static constexpr char CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR{ '0' };
				static constexpr char SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING{ '1' };
			};

			// BookingUnit(590): CHAR
			struct BookingUnit
			{
				static constexpr uint16_t tag{ 590 };
				static constexpr char AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER{ '1' };
				static constexpr char AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE{ '2' };
				static constexpr char EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT{ '0' };
			};

			// PreallocMethod(591): CHAR
			struct PreallocMethod
			{
				static constexpr uint16_t tag{ 591 };
				static constexpr char PRO_RATA{ '0' };
				static constexpr char DO_NOT_PRO_RATA_DISCUSS_FIRST{ '1' };
			};

			// UnderlyingCountryOfIssue(592): COUNTRY
			struct UnderlyingCountryOfIssue
			{
				static constexpr uint16_t tag{ 592 };
			};

			// UnderlyingStateOrProvinceOfIssue(593): STRING
			struct UnderlyingStateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 593 };
			};

			// UnderlyingLocaleOfIssue(594): STRING
			struct UnderlyingLocaleOfIssue
			{
				static constexpr uint16_t tag{ 594 };
			};

			// UnderlyingInstrRegistry(595): STRING
			struct UnderlyingInstrRegistry
			{
				static constexpr uint16_t tag{ 595 };
			};

			// LegCountryOfIssue(596): COUNTRY
			struct LegCountryOfIssue
			{
				static constexpr uint16_t tag{ 596 };
			};

			// LegStateOrProvinceOfIssue(597): STRING
			struct LegStateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 597 };
			};

			// LegLocaleOfIssue(598): STRING
			struct LegLocaleOfIssue
			{
				static constexpr uint16_t tag{ 598 };
			};

			// LegInstrRegistry(599): STRING
			struct LegInstrRegistry
			{
				static constexpr uint16_t tag{ 599 };
			};

			// LegSymbol(600): STRING
			struct LegSymbol
			{
				static constexpr uint16_t tag{ 600 };
			};

			// LegSymbolSfx(601): STRING
			struct LegSymbolSfx
			{
				static constexpr uint16_t tag{ 601 };
			};

			// LegSecurityID(602): STRING
			struct LegSecurityID
			{
				static constexpr uint16_t tag{ 602 };
			};

			// LegSecurityIDSource(603): STRING
			struct LegSecurityIDSource
			{
				static constexpr uint16_t tag{ 603 };
			};

			// NoLegSecurityAltID(604): STRING
			struct NoLegSecurityAltID
			{
				static constexpr uint16_t tag{ 604 };
			};

			// LegSecurityAltID(605): STRING
			struct LegSecurityAltID
			{
				static constexpr uint16_t tag{ 605 };
			};

			// LegSecurityAltIDSource(606): STRING
			struct LegSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 606 };
			};

			// LegProduct(607): INT
			struct LegProduct
			{
				static constexpr uint16_t tag{ 607 };
			};

			// LegCFICode(608): STRING
			struct LegCFICode
			{
				static constexpr uint16_t tag{ 608 };
			};

			// LegSecurityType(609): STRING
			struct LegSecurityType
			{
				static constexpr uint16_t tag{ 609 };
			};

			// LegMaturityMonthYear(610): MONTHYEAR
			struct LegMaturityMonthYear
			{
				static constexpr uint16_t tag{ 610 };
			};

			// LegMaturityDate(611): LOCALMKTDATE
			struct LegMaturityDate
			{
				static constexpr uint16_t tag{ 611 };
			};

			// LegStrikePrice(612): PRICE
			struct LegStrikePrice
			{
				static constexpr uint16_t tag{ 612 };
			};

			// LegOptAttribute(613): CHAR
			struct LegOptAttribute
			{
				static constexpr uint16_t tag{ 613 };
			};

			// LegContractMultiplier(614): FLOAT
			struct LegContractMultiplier
			{
				static constexpr uint16_t tag{ 614 };
			};

			// LegCouponRate(615): PERCENTAGE
			struct LegCouponRate
			{
				static constexpr uint16_t tag{ 615 };
			};

			// LegSecurityExchange(616): EXCHANGE
			struct LegSecurityExchange
			{
				static constexpr uint16_t tag{ 616 };
			};

			// LegIssuer(617): STRING
			struct LegIssuer
			{
				static constexpr uint16_t tag{ 617 };
			};

			// EncodedLegIssuerLen(618): LENGTH
			struct EncodedLegIssuerLen
			{
				static constexpr uint16_t tag{ 618 };
			};

			// EncodedLegIssuer(619): DATA
			struct EncodedLegIssuer
			{
				static constexpr uint16_t tag{ 619 };
			};

			// LegSecurityDesc(620): STRING
			struct LegSecurityDesc
			{
				static constexpr uint16_t tag{ 620 };
			};

			// EncodedLegSecurityDescLen(621): LENGTH
			struct EncodedLegSecurityDescLen
			{
				static constexpr uint16_t tag{ 621 };
			};

			// EncodedLegSecurityDesc(622): DATA
			struct EncodedLegSecurityDesc
			{
				static constexpr uint16_t tag{ 622 };
			};

			// LegRatioQty(623): FLOAT
			struct LegRatioQty
			{
				static constexpr uint16_t tag{ 623 };
			};

			// LegSide(624): CHAR
			struct LegSide
			{
				static constexpr uint16_t tag{ 624 };
			};

			// TradingSessionSubID(625): STRING
			struct TradingSessionSubID
			{
				static constexpr uint16_t tag{ 625 };
			};

			// AllocType(626): INT
			struct AllocType
			{
				static constexpr uint16_t tag{ 626 };
				static constexpr int32_t BUYSIDE_READY_TO_BOOK_6{ 6 };
				static constexpr int32_t BUYSIDE_PRELIMINARY{ 2 };
				static constexpr int32_t SELLSIDE_CALCULATED_USING_PRELIMINARY{ 3 };
				static constexpr int32_t BUYSIDE_READY_TO_BOOK_5{ 5 };
				static constexpr int32_t BUYSIDE_CALCULATED{ 1 };
				static constexpr int32_t SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY{ 4 };
			};

			// NoHops(627): NUMINGROUP
			struct NoHops
			{
				static constexpr uint16_t tag{ 627 };
			};

			// HopCompID(628): STRING
			struct HopCompID
			{
				static constexpr uint16_t tag{ 628 };
			};

			// HopSendingTime(629): UTCTIMESTAMP
			struct HopSendingTime
			{
				static constexpr uint16_t tag{ 629 };
			};

			// HopRefID(630): SEQNUM
			struct HopRefID
			{
				static constexpr uint16_t tag{ 630 };
			};

			// MidPx(631): PRICE
			struct MidPx
			{
				static constexpr uint16_t tag{ 631 };
			};

			// BidYield(632): PERCENTAGE
			struct BidYield
			{
				static constexpr uint16_t tag{ 632 };
			};

			// MidYield(633): PERCENTAGE
			struct MidYield
			{
				static constexpr uint16_t tag{ 633 };
			};

			// OfferYield(634): PERCENTAGE
			struct OfferYield
			{
				static constexpr uint16_t tag{ 634 };
			};

			// ClearingFeeIndicator(635): STRING
			struct ClearingFeeIndicator
			{
				static constexpr uint16_t tag{ 635 };
				static inline const std::string _106H_AND_106J_FIRMS{ "H" };
				static inline const std::string _5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT{ "5" };
				static inline const std::string _4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT{ "4" };
				static inline const std::string _3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT{ "3" };
				static inline const std::string _2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT{ "2" };
				static inline const std::string _1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT{ "1" };
				static inline const std::string ALL_OTHER_OWNERSHIP_TYPES{ "M" };
				static inline const std::string GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS{ "I" };
				static inline const std::string _6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT{ "9" };
				static inline const std::string FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR{ "F" };
				static inline const std::string EQUITY_MEMBER_AND_CLEARING_MEMBER{ "E" };
				static inline const std::string NON_MEMBER_AND_CUSTOMER{ "C" };
				static inline const std::string CBOE_MEMBER{ "B" };
				static inline const std::string LESSEE_AND_106F_EMPLOYEES{ "L" };
			};

			// WorkingIndicator(636): BOOLEAN
			struct WorkingIndicator
			{
				static constexpr uint16_t tag{ 636 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// LegLastPx(637): PRICE
			struct LegLastPx
			{
				static constexpr uint16_t tag{ 637 };
			};

			// PriorityIndicator(638): INT
			struct PriorityIndicator
			{
				static constexpr uint16_t tag{ 638 };
				static constexpr int32_t PRIORITY_UNCHANGED{ 0 };
				static constexpr int32_t LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE{ 1 };
			};

			// PriceImprovement(639): PRICEOFFSET
			struct PriceImprovement
			{
				static constexpr uint16_t tag{ 639 };
			};

			// Price2(640): PRICE
			struct Price2
			{
				static constexpr uint16_t tag{ 640 };
			};

			// LastForwardPoints2(641): PRICEOFFSET
			struct LastForwardPoints2
			{
				static constexpr uint16_t tag{ 641 };
			};

			// BidForwardPoints2(642): PRICEOFFSET
			struct BidForwardPoints2
			{
				static constexpr uint16_t tag{ 642 };
			};

			// OfferForwardPoints2(643): PRICEOFFSET
			struct OfferForwardPoints2
			{
				static constexpr uint16_t tag{ 643 };
			};

			// RFQReqID(644): STRING
			struct RFQReqID
			{
				static constexpr uint16_t tag{ 644 };
			};

			// MktBidPx(645): PRICE
			struct MktBidPx
			{
				static constexpr uint16_t tag{ 645 };
			};

			// MktOfferPx(646): PRICE
			struct MktOfferPx
			{
				static constexpr uint16_t tag{ 646 };
			};

			// MinBidSize(647): QTY
			struct MinBidSize
			{
				static constexpr uint16_t tag{ 647 };
			};

			// MinOfferSize(648): QTY
			struct MinOfferSize
			{
				static constexpr uint16_t tag{ 648 };
			};

			// QuoteStatusReqID(649): STRING
			struct QuoteStatusReqID
			{
				static constexpr uint16_t tag{ 649 };
			};

			// LegalConfirm(650): BOOLEAN
			struct LegalConfirm
			{
				static constexpr uint16_t tag{ 650 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// UnderlyingLastPx(651): PRICE
			struct UnderlyingLastPx
			{
				static constexpr uint16_t tag{ 651 };
			};

			// UnderlyingLastQty(652): QTY
			struct UnderlyingLastQty
			{
				static constexpr uint16_t tag{ 652 };
			};

			// SecDefStatus(653): INT
			struct SecDefStatus
			{
				static constexpr uint16_t tag{ 653 };
				static constexpr int32_t REJECTED{ 2 };
				static constexpr int32_t UNAUTHORIZED_REQUEST{ 3 };
				static constexpr int32_t APPROVED{ 1 };
				static constexpr int32_t PENDING_APPROVAL{ 0 };
				static constexpr int32_t INVALID_DEFINITION_REQUEST{ 4 };
			};

			// LegRefID(654): STRING
			struct LegRefID
			{
				static constexpr uint16_t tag{ 654 };
			};

			// ContraLegRefID(655): STRING
			struct ContraLegRefID
			{
				static constexpr uint16_t tag{ 655 };
			};

			// SettlCurrBidFxRate(656): FLOAT
			struct SettlCurrBidFxRate
			{
				static constexpr uint16_t tag{ 656 };
			};

			// SettlCurrOfferFxRate(657): FLOAT
			struct SettlCurrOfferFxRate
			{
				static constexpr uint16_t tag{ 657 };
			};

			// QuoteRequestRejectReason(658): INT
			struct QuoteRequestRejectReason
			{
				static constexpr uint16_t tag{ 658 };
				static constexpr int32_t UNKNOWN_SYMBOL{ 1 };
				static constexpr int32_t EXCHANGE{ 2 };
				static constexpr int32_t QUOTE_REQUEST_EXCEEDS_LIMIT{ 3 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t INVALID_PRICE{ 5 };
				static constexpr int32_t NOT_AUTHORIZED_TO_REQUEST_QUOTE{ 6 };
			};

			// SideComplianceID(659): STRING
			struct SideComplianceID
			{
				static constexpr uint16_t tag{ 659 };
			};
		}
	}
}

#endif // UFECPP_CONSTS_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_