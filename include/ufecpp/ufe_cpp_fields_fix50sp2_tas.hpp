/*
    ____                      __      ____
   /\  _`\   __             /'_ `\   /\  _`\
   \ \ \L\_\/\_\    __  _  /\ \L\ \  \ \ \L\ \ _ __    ___
    \ \  _\/\/\ \  /\ \/'\ \/_> _ <_  \ \ ,__//\`'__\ / __`\
     \ \ \/  \ \ \ \/>  </   /\ \L\ \  \ \ \/ \ \ \/ /\ \L\ \
      \ \_\   \ \_\ /\_/\_\  \ \____/   \ \_\  \ \_\ \ \____/
       \/_/    \/_/ \//\/_/   \/___/     \/_/   \/_/  \/___/

               Fix8Pro FIX Engine and Framework

Copyright (C) 2010-19 Fix8 Market Technologies Pty Ltd (ABN 29 167 027 198)
All Rights Reserved. [http://www.fix8mt.com] <heretohelp@fix8mt.com>

THIS FILE IS PROPRIETARY AND  CONFIDENTIAL. NO PART OF THIS FILE MAY BE REPRODUCED,  STORED
IN A RETRIEVAL SYSTEM,  OR TRANSMITTED, IN ANY FORM OR ANY MEANS,  ELECTRONIC, PHOTOSTATIC,
RECORDED OR OTHERWISE, WITHOUT THE PRIOR AND  EXPRESS WRITTEN  PERMISSION  OF  FIX8  MARKET
TECHNOLOGIES PTY LTD.
*/

// Autogenerated on 2019-10-09 00:55:48.076162
// /home/juliux/fix8/fix8pro/compiler/py/f8c/f8c.py --template ufe_java_fields ufe_cpp_fields ufe_cs_fields ufe_py_fields ufe_cpp_messages --output-dir ./generated --schema-dir /home/juliux/fix8/nsxgw/schema FIX42_PT FIX50SP2_TAS FIXT11
// DO NOT EDIT!

#ifndef UFECPP_FIELDS_FIX50SP2_TAS_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_
#define UFECPP_FIELDS_FIX50SP2_TAS_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_

#include <string>
#include <ufecpp/ufecppversion.h>

namespace UFECPP
{
	namespace FIX50SP2_TAS
	{
		namespace Field
		{

			// Account(1): STRING
			struct Account
			{
				static constexpr uint16_t tag{ 1 };
			};

			// AdvId(2): STRING
			struct AdvId
			{
				static constexpr uint16_t tag{ 2 };
			};

			// AdvRefID(3): STRING
			struct AdvRefID
			{
				static constexpr uint16_t tag{ 3 };
			};

			// AdvSide(4): CHAR
			struct AdvSide
			{
				static constexpr uint16_t tag{ 4 };
				static constexpr char BUY{ 'B' };
				static constexpr char SELL{ 'S' };
				static constexpr char TRADE{ 'T' };
				static constexpr char CROSS{ 'X' };
			};

			// AdvTransType(5): STRING
			struct AdvTransType
			{
				static constexpr uint16_t tag{ 5 };
				static inline const std::string CANCEL{ "C" };
				static inline const std::string NEW{ "N" };
				static inline const std::string REPLACE{ "R" };
			};

			// AvgPx(6): PRICE
			struct AvgPx
			{
				static constexpr uint16_t tag{ 6 };
			};

			// BeginSeqNo(7): SEQNUM
			struct BeginSeqNo
			{
				static constexpr uint16_t tag{ 7 };
			};

			// BeginString(8): STRING
			struct BeginString
			{
				static constexpr uint16_t tag{ 8 };
			};

			// BodyLength(9): LENGTH
			struct BodyLength
			{
				static constexpr uint16_t tag{ 9 };
			};

			// CheckSum(10): STRING
			struct CheckSum
			{
				static constexpr uint16_t tag{ 10 };
			};

			// ClOrdID(11): STRING
			struct ClOrdID
			{
				static constexpr uint16_t tag{ 11 };
			};

			// Commission(12): AMT
			struct Commission
			{
				static constexpr uint16_t tag{ 12 };
			};

			// CommType(13): CHAR
			struct CommType
			{
				static constexpr uint16_t tag{ 13 };
				static constexpr char PER_UNIT{ '1' };
				static constexpr char PERCENT{ '2' };
				static constexpr char ABSOLUTE{ '3' };
				static constexpr char PERCENTAGE_WAIVED_4{ '4' };
				static constexpr char PERCENTAGE_WAIVED_5{ '5' };
				static constexpr char POINTS_PER_BOND_OR_CONTRACT{ '6' };
			};

			// CumQty(14): QTY
			struct CumQty
			{
				static constexpr uint16_t tag{ 14 };
			};

			// Currency(15): CURRENCY
			struct Currency
			{
				static constexpr uint16_t tag{ 15 };
			};

			// EndSeqNo(16): SEQNUM
			struct EndSeqNo
			{
				static constexpr uint16_t tag{ 16 };
			};

			// ExecID(17): STRING
			struct ExecID
			{
				static constexpr uint16_t tag{ 17 };
			};

			// ExecInst(18): MULTIPLECHARVALUE
			struct ExecInst
			{
				static constexpr uint16_t tag{ 18 };
				static inline const std::string STAY_ON_OFFER_SIDE{ "0" };
				static inline const std::string NOT_HELD{ "1" };
				static inline const std::string WORK{ "2" };
				static inline const std::string GO_ALONG{ "3" };
				static inline const std::string OVER_THE_DAY{ "4" };
				static inline const std::string HELD{ "5" };
				static inline const std::string PARTICIPANT_DONT_INITIATE{ "6" };
				static inline const std::string STRICT_SCALE{ "7" };
				static inline const std::string TRY_TO_SCALE{ "8" };
				static inline const std::string STAY_ON_BID_SIDE{ "9" };
				static inline const std::string NO_CROSS{ "A" };
				static inline const std::string TRAILING_STOP_PEG{ "a" };
				static inline const std::string OK_TO_CROSS{ "B" };
				static inline const std::string STRICT_LIMIT{ "b" };
				static inline const std::string IGNORE_PRICE_VALIDITY_CHECKS{ "c" };
				static inline const std::string CALL_FIRST{ "C" };
				static inline const std::string PEG_TO_LIMIT_PRICE{ "d" };
				static inline const std::string PERCENT_OF_VOLUME{ "D" };
				static inline const std::string DO_NOT_INCREASE{ "E" };
				static inline const std::string WORK_TO_TARGET_STRATEGY{ "e" };
				static inline const std::string DO_NOT_REDUCE{ "F" };
				static inline const std::string ALL_OR_NONE{ "G" };
				static inline const std::string REINSTATE_ON_SYSTEM_FAILURE{ "H" };
				static inline const std::string INSTITUTIONS_ONLY{ "I" };
				static inline const std::string REINSTATE_ON_TRADING_HALT{ "J" };
				static inline const std::string CANCEL_ON_TRADING_HALT{ "K" };
				static inline const std::string LAST_PEG{ "L" };
				static inline const std::string MID_PRICE_PEG{ "M" };
				static inline const std::string NON_NEGOTIABLE{ "N" };
				static inline const std::string OPENING_PEG{ "O" };
				static inline const std::string MARKET_PEG{ "P" };
				static inline const std::string CANCEL_ON_SYSTEM_FAILURE{ "Q" };
				static inline const std::string PRIMARY_PEG{ "R" };
				static inline const std::string SUSPEND{ "S" };
				static inline const std::string CUSTOMER_DISPLAY_INSTRUCTION{ "U" };
				static inline const std::string NETTING{ "V" };
				static inline const std::string PEG_TO_VWAP{ "W" };
				static inline const std::string TRADE_ALONG{ "X" };
				static inline const std::string TRY_TO_STOP{ "Y" };
				static inline const std::string CANCEL_IF_NOT_BEST{ "Z" };
				static inline const std::string INTERMARKET_SWEEP{ "f" };
				static inline const std::string SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE{ "j" };
				static inline const std::string EXTERNAL_ROUTING_ALLOWED{ "g" };
				static inline const std::string EXTERNAL_ROUTING_NOT_ALLOWED{ "h" };
				static inline const std::string IMBALANCE_ONLY{ "i" };
				static inline const std::string FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER{ "T" };
				static inline const std::string BEST_EXECUTION{ "k" };
				static inline const std::string SUSPEND_ON_SYSTEM_FAILURE{ "l" };
				static inline const std::string SUSPEND_ON_TRADING_HALT{ "m" };
				static inline const std::string REINSTATE_ON_CONNECTION_LOSS{ "n" };
				static inline const std::string CANCEL_ON_CONNECTION_LOSS{ "o" };
				static inline const std::string SUSPEND_ON_CONNECTION_LOSS{ "p" };
				static inline const std::string RELEASE_FROM_SUSPENSION{ "q" };
				static inline const std::string EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED{ "r" };
				static inline const std::string EXECUTE_AS_DURATION_NEUTRAL{ "s" };
				static inline const std::string EXECUTE_AS_FX_NEUTRAL{ "t" };
			};

			// ExecRefID(19): STRING
			struct ExecRefID
			{
				static constexpr uint16_t tag{ 19 };
			};

			// ExecTransType(20): CHAR
			struct ExecTransType
			{
				static constexpr uint16_t tag{ 20 };
				static constexpr char NEW{ '0' };
				static constexpr char CANCEL{ '1' };
				static constexpr char CORRECT{ '2' };
				static constexpr char STATUS{ '3' };
			};

			// HandlInst(21): CHAR
			struct HandlInst
			{
				static constexpr uint16_t tag{ 21 };
				static constexpr char AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION{ '1' };
				static constexpr char AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK{ '2' };
				static constexpr char MANUAL_ORDER_BEST_EXECUTION{ '3' };
			};

			// SecurityIDSource(22): STRING
			struct SecurityIDSource
			{
				static constexpr uint16_t tag{ 22 };
				static inline const std::string CUSIP{ "1" };
				static inline const std::string SEDOL{ "2" };
				static inline const std::string QUIK{ "3" };
				static inline const std::string ISIN_NUMBER{ "4" };
				static inline const std::string RIC_CODE{ "5" };
				static inline const std::string ISO_CURRENCY_CODE{ "6" };
				static inline const std::string ISO_COUNTRY_CODE{ "7" };
				static inline const std::string EXCHANGE_SYMBOL{ "8" };
				static inline const std::string CONSOLIDATED_TAPE_ASSOCIATION{ "9" };
				static inline const std::string BLOOMBERG_SYMBOL{ "A" };
				static inline const std::string WERTPAPIER{ "B" };
				static inline const std::string DUTCH{ "C" };
				static inline const std::string VALOREN{ "D" };
				static inline const std::string SICOVAM{ "E" };
				static inline const std::string BELGIAN{ "F" };
				static inline const std::string COMMON{ "G" };
				static inline const std::string CLEARING_HOUSE{ "H" };
				static inline const std::string ISDA_FPML_PRODUCT_SPECIFICATION{ "I" };
				static inline const std::string OPTION_PRICE_REPORTING_AUTHORITY{ "J" };
				static inline const std::string LETTER_OF_CREDIT{ "L" };
				static inline const std::string ISDA_FPML_PRODUCT_URL{ "K" };
				static inline const std::string MARKETPLACE_ASSIGNED_IDENTIFIER{ "M" };
			};

			// IOIID(23): STRING
			struct IOIID
			{
				static constexpr uint16_t tag{ 23 };
			};

			// IOIOthSvc(24): CHAR
			struct IOIOthSvc
			{
				static constexpr uint16_t tag{ 24 };
			};

			// IOIQltyInd(25): CHAR
			struct IOIQltyInd
			{
				static constexpr uint16_t tag{ 25 };
				static constexpr char HIGH{ 'H' };
				static constexpr char LOW{ 'L' };
				static constexpr char MEDIUM{ 'M' };
			};

			// IOIRefID(26): STRING
			struct IOIRefID
			{
				static constexpr uint16_t tag{ 26 };
			};

			// IOIQty(27): STRING
			struct IOIQty
			{
				static constexpr uint16_t tag{ 27 };
				static inline const std::string _1000000000{ "0" };
				static inline const std::string SMALL{ "S" };
				static inline const std::string MEDIUM{ "M" };
				static inline const std::string LARGE{ "L" };
				static inline const std::string UNDISCLOSED_QUANTITY{ "U" };
			};

			// IOITransType(28): CHAR
			struct IOITransType
			{
				static constexpr uint16_t tag{ 28 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
			};

			// LastCapacity(29): CHAR
			struct LastCapacity
			{
				static constexpr uint16_t tag{ 29 };
				static constexpr char AGENT{ '1' };
				static constexpr char CROSS_AS_AGENT{ '2' };
				static constexpr char CROSS_AS_PRINCIPAL{ '3' };
				static constexpr char PRINCIPAL{ '4' };
			};

			// LastMkt(30): EXCHANGE
			struct LastMkt
			{
				static constexpr uint16_t tag{ 30 };
			};

			// LastPx(31): PRICE
			struct LastPx
			{
				static constexpr uint16_t tag{ 31 };
			};

			// LastQty(32): QTY
			struct LastQty
			{
				static constexpr uint16_t tag{ 32 };
			};

			// NoLinesOfText(33): NUMINGROUP
			struct NoLinesOfText
			{
				static constexpr uint16_t tag{ 33 };
			};

			// MsgSeqNum(34): SEQNUM
			struct MsgSeqNum
			{
				static constexpr uint16_t tag{ 34 };
			};

			// MsgType(35): STRING
			struct MsgType
			{
				static constexpr uint16_t tag{ 35 };
				static inline const std::string HEARTBEAT{ "0" };
				static inline const std::string TESTREQUEST{ "1" };
				static inline const std::string RESENDREQUEST{ "2" };
				static inline const std::string REJECT{ "3" };
				static inline const std::string SEQUENCERESET{ "4" };
				static inline const std::string LOGOUT{ "5" };
				static inline const std::string IOI{ "6" };
				static inline const std::string ADVERTISEMENT{ "7" };
				static inline const std::string EXECUTIONREPORT{ "8" };
				static inline const std::string ORDERCANCELREJECT{ "9" };
				static inline const std::string LOGON{ "A" };
				static inline const std::string DERIVATIVESECURITYLIST{ "AA" };
				static inline const std::string NEWORDERMULTILEG{ "AB" };
				static inline const std::string MULTILEGORDERCANCELREPLACE{ "AC" };
				static inline const std::string TRADECAPTUREREPORTREQUEST{ "AD" };
				static inline const std::string TRADECAPTUREREPORT{ "AE" };
				static inline const std::string ORDERMASSSTATUSREQUEST{ "AF" };
				static inline const std::string QUOTEREQUESTREJECT{ "AG" };
				static inline const std::string RFQREQUEST{ "AH" };
				static inline const std::string QUOTESTATUSREPORT{ "AI" };
				static inline const std::string QUOTERESPONSE{ "AJ" };
				static inline const std::string CONFIRMATION{ "AK" };
				static inline const std::string POSITIONMAINTENANCEREQUEST{ "AL" };
				static inline const std::string POSITIONMAINTENANCEREPORT{ "AM" };
				static inline const std::string REQUESTFORPOSITIONS{ "AN" };
				static inline const std::string REQUESTFORPOSITIONSACK{ "AO" };
				static inline const std::string POSITIONREPORT{ "AP" };
				static inline const std::string TRADECAPTUREREPORTREQUESTACK{ "AQ" };
				static inline const std::string TRADECAPTUREREPORTACK{ "AR" };
				static inline const std::string ALLOCATIONREPORT{ "AS" };
				static inline const std::string ALLOCATIONREPORTACK{ "AT" };
				static inline const std::string CONFIRMATION_ACK{ "AU" };
				static inline const std::string SETTLEMENTINSTRUCTIONREQUEST{ "AV" };
				static inline const std::string ASSIGNMENTREPORT{ "AW" };
				static inline const std::string COLLATERALREQUEST{ "AX" };
				static inline const std::string COLLATERALASSIGNMENT{ "AY" };
				static inline const std::string COLLATERALRESPONSE{ "AZ" };
				static inline const std::string NEWS{ "B" };
				static inline const std::string COLLATERALREPORT{ "BA" };
				static inline const std::string COLLATERALINQUIRY{ "BB" };
				static inline const std::string NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST{ "BC" };
				static inline const std::string NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE{ "BD" };
				static inline const std::string USERREQUEST{ "BE" };
				static inline const std::string USERRESPONSE{ "BF" };
				static inline const std::string COLLATERALINQUIRYACK{ "BG" };
				static inline const std::string CONFIRMATIONREQUEST{ "BH" };
				static inline const std::string TRADINGSESSIONLISTREQUEST{ "BI" };
				static inline const std::string TRADINGSESSIONLIST{ "BJ" };
				static inline const std::string SECURITYLISTUPDATEREPORT{ "BK" };
				static inline const std::string ADJUSTEDPOSITIONREPORT{ "BL" };
				static inline const std::string ALLOCATIONINSTRUCTIONALERT{ "BM" };
				static inline const std::string EXECUTIONACKNOWLEDGEMENT{ "BN" };
				static inline const std::string CONTRARYINTENTIONREPORT{ "BO" };
				static inline const std::string SECURITYDEFINITIONUPDATEREPORT{ "BP" };
				static inline const std::string SETTLEMENTOBLIGATIONREPORT{ "BQ" };
				static inline const std::string DERIVATIVESECURITYLISTUPDATEREPORT{ "BR" };
				static inline const std::string TRADINGSESSIONLISTUPDATEREPORT{ "BS" };
				static inline const std::string MARKETDEFINITIONREQUEST{ "BT" };
				static inline const std::string MARKETDEFINITION{ "BU" };
				static inline const std::string MARKETDEFINITIONUPDATEREPORT{ "BV" };
				static inline const std::string APPLICATIONMESSAGEREQUEST{ "BW" };
				static inline const std::string APPLICATIONMESSAGEREQUESTACK{ "BX" };
				static inline const std::string APPLICATIONMESSAGEREPORT{ "BY" };
				static inline const std::string ORDERMASSACTIONREPORT{ "BZ" };
				static inline const std::string EMAIL{ "C" };
				static inline const std::string ORDERMASSACTIONREQUEST{ "CA" };
				static inline const std::string USERNOTIFICATION{ "CB" };
				static inline const std::string STREAMASSIGNMENTREQUEST{ "CC" };
				static inline const std::string STREAMASSIGNMENTREPORT{ "CD" };
				static inline const std::string STREAMASSIGNMENTREPORTACK{ "CE" };
				static inline const std::string PARTYDETAILSLISTREQUEST{ "CF" };
				static inline const std::string PARTYDETAILSLISTREPORT{ "CG" };
				static inline const std::string NEWORDERSINGLE{ "D" };
				static inline const std::string NEWORDERLIST{ "E" };
				static inline const std::string ORDERCANCELREQUEST{ "F" };
				static inline const std::string ORDERCANCELREPLACEREQUEST{ "G" };
				static inline const std::string ORDERSTATUSREQUEST{ "H" };
				static inline const std::string ALLOCATIONINSTRUCTION{ "J" };
				static inline const std::string LISTCANCELREQUEST{ "K" };
				static inline const std::string LISTEXECUTE{ "L" };
				static inline const std::string LISTSTATUSREQUEST{ "M" };
				static inline const std::string LISTSTATUS{ "N" };
				static inline const std::string ALLOCATIONINSTRUCTIONACK{ "P" };
				static inline const std::string DONTKNOWTRADEDK{ "Q" };
				static inline const std::string QUOTEREQUEST{ "R" };
				static inline const std::string QUOTE{ "S" };
				static inline const std::string SETTLEMENTINSTRUCTIONS{ "T" };
				static inline const std::string MARKETDATAREQUEST{ "V" };
				static inline const std::string MARKETDATASNAPSHOTFULLREFRESH{ "W" };
				static inline const std::string MARKETDATAINCREMENTALREFRESH{ "X" };
				static inline const std::string MARKETDATAREQUESTREJECT{ "Y" };
				static inline const std::string QUOTECANCEL{ "Z" };
				static inline const std::string QUOTESTATUSREQUEST{ "a" };
				static inline const std::string MASSQUOTEACKNOWLEDGEMENT{ "b" };
				static inline const std::string SECURITYDEFINITIONREQUEST{ "c" };
				static inline const std::string SECURITYDEFINITION{ "d" };
				static inline const std::string SECURITYSTATUSREQUEST{ "e" };
				static inline const std::string SECURITYSTATUS{ "f" };
				static inline const std::string TRADINGSESSIONSTATUSREQUEST{ "g" };
				static inline const std::string TRADINGSESSIONSTATUS{ "h" };
				static inline const std::string MASSQUOTE{ "i" };
				static inline const std::string BUSINESSMESSAGEREJECT{ "j" };
				static inline const std::string BIDREQUEST{ "k" };
				static inline const std::string BIDRESPONSE{ "l" };
				static inline const std::string LISTSTRIKEPRICE{ "m" };
				static inline const std::string XML_NON_FIX{ "n" };
				static inline const std::string REGISTRATIONINSTRUCTIONS{ "o" };
				static inline const std::string REGISTRATIONINSTRUCTIONSRESPONSE{ "p" };
				static inline const std::string ORDERMASSCANCELREQUEST{ "q" };
				static inline const std::string ORDERMASSCANCELREPORT{ "r" };
				static inline const std::string NEWORDERCROSS{ "s" };
				static inline const std::string CROSSORDERCANCELREPLACEREQUEST{ "t" };
				static inline const std::string CROSSORDERCANCELREQUEST{ "u" };
				static inline const std::string SECURITYTYPEREQUEST{ "v" };
				static inline const std::string SECURITYTYPES{ "w" };
				static inline const std::string SECURITYLISTREQUEST{ "x" };
				static inline const std::string SECURITYLIST{ "y" };
				static inline const std::string DERIVATIVESECURITYLISTREQUEST{ "z" };
				static inline const std::string PRICENOTIFICATIONSTATUS{ "WA" };
			};

			// NewSeqNo(36): SEQNUM
			struct NewSeqNo
			{
				static constexpr uint16_t tag{ 36 };
			};

			// OrderID(37): STRING
			struct OrderID
			{
				static constexpr uint16_t tag{ 37 };
			};

			// OrderQty(38): QTY
			struct OrderQty
			{
				static constexpr uint16_t tag{ 38 };
			};

			// OrdStatus(39): CHAR
			struct OrdStatus
			{
				static constexpr uint16_t tag{ 39 };
				static constexpr char NEW{ '0' };
				static constexpr char PARTIALLY_FILLED{ '1' };
				static constexpr char FILLED{ '2' };
				static constexpr char DONE_FOR_DAY{ '3' };
				static constexpr char CANCELED{ '4' };
				static constexpr char PENDING_CANCEL{ '6' };
				static constexpr char STOPPED{ '7' };
				static constexpr char REJECTED{ '8' };
				static constexpr char SUSPENDED{ '9' };
				static constexpr char PENDING_NEW{ 'A' };
				static constexpr char CALCULATED{ 'B' };
				static constexpr char EXPIRED{ 'C' };
				static constexpr char ACCEPTED_FOR_BIDDING{ 'D' };
				static constexpr char PENDING_REPLACE{ 'E' };
				static constexpr char REPLACED{ '5' };
			};

			// OrdType(40): CHAR
			struct OrdType
			{
				static constexpr uint16_t tag{ 40 };
				static constexpr char MARKET{ '1' };
				static constexpr char LIMIT{ '2' };
				static constexpr char STOP{ '3' };
				static constexpr char STOP_LIMIT{ '4' };
				static constexpr char MARKET_ON_CLOSE{ '5' };
				static constexpr char WITH_OR_WITHOUT{ '6' };
				static constexpr char LIMIT_OR_BETTER{ '7' };
				static constexpr char LIMIT_WITH_OR_WITHOUT{ '8' };
				static constexpr char ON_BASIS{ '9' };
				static constexpr char ON_CLOSE{ 'A' };
				static constexpr char LIMIT_ON_CLOSE{ 'B' };
				static constexpr char FOREX_MARKET{ 'C' };
				static constexpr char PREVIOUSLY_QUOTED{ 'D' };
				static constexpr char PREVIOUSLY_INDICATED{ 'E' };
				static constexpr char FOREX_LIMIT{ 'F' };
				static constexpr char FOREX_SWAP{ 'G' };
				static constexpr char FOREX_PREVIOUSLY_QUOTED{ 'H' };
				static constexpr char FUNARI{ 'I' };
				static constexpr char MARKET_IF_TOUCHED{ 'J' };
				static constexpr char MARKET_WITH_LEFT_OVER_AS_LIMIT{ 'K' };
				static constexpr char PREVIOUS_FUND_VALUATION_POINT{ 'L' };
				static constexpr char NEXT_FUND_VALUATION_POINT{ 'M' };
				static constexpr char PEGGED{ 'P' };
				static constexpr char COUNTER_ORDER_SELECTION{ 'Q' };
			};

			// OrigClOrdID(41): STRING
			struct OrigClOrdID
			{
				static constexpr uint16_t tag{ 41 };
			};

			// OrigTime(42): UTCTIMESTAMP
			struct OrigTime
			{
				static constexpr uint16_t tag{ 42 };
			};

			// PossDupFlag(43): BOOLEAN
			struct PossDupFlag
			{
				static constexpr uint16_t tag{ 43 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// Price(44): PRICE
			struct Price
			{
				static constexpr uint16_t tag{ 44 };
			};

			// RefSeqNum(45): SEQNUM
			struct RefSeqNum
			{
				static constexpr uint16_t tag{ 45 };
			};

			// RelatdSym(46): STRING
			struct RelatdSym
			{
				static constexpr uint16_t tag{ 46 };
			};

			// Rule80A(47): CHAR
			struct Rule80A
			{
				static constexpr uint16_t tag{ 47 };
				static constexpr char AGENCY_SINGLE_ORDER{ 'A' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_B{ 'B' };
				static constexpr char PROPRIETARY_NON_ALGORITHMIC_PROGRAM_TRADE{ 'C' };
				static constexpr char PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_ORG{ 'D' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL{ 'E' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_F{ 'F' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_H{ 'H' };
				static constexpr char INDIVIDUAL_INVESTOR_SINGLE_ORDER{ 'I' };
				static constexpr char PROPRIETARY_ALGORITHMIC_PROGRAM_TRADING{ 'J' };
				static constexpr char AGENCY_ALGORITHMIC_PROGRAM_TRADING{ 'K' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_AFFLIATED_WITH_THE_FIRM_CLEARING_THE_TRADE{ 'L' };
				static constexpr char PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER{ 'M' };
				static constexpr char AGENT_FOR_OTHER_MEMBER_NON_ALGORITHMIC_PROGRAM_TRADE{ 'N' };
				static constexpr char PROPRIETARY_TRANSACTIONS_FOR_COMPETING_MARKET_MAKER_THAT_IS_AFFILIATED_WITH_THE_CLEARING_MEMBER{ 'O' };
				static constexpr char PRINCIPAL{ 'P' };
				static constexpr char TRANSACTIONS_FOR_THE_ACCOUNT_OF_A_NON_MEMBER_COMPTING_MARKET_MAKER{ 'R' };
				static constexpr char SPECIALIST_TRADES{ 'S' };
				static constexpr char TRANSACTIONS_FOR_THE_ACCOUNT_OF_AN_UNAFFILIATED_MEMBERS_COMPETING_MARKET_MAKER{ 'T' };
				static constexpr char AGENCY_INDEX_ARBITRAGE{ 'U' };
				static constexpr char ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER{ 'W' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_NOT_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE{ 'X' };
				static constexpr char AGENCY_NON_ALGORITHMIC_PROGRAM_TRADE{ 'Y' };
				static constexpr char SHORT_EXEMPT_TRANSACTION_FOR_NON_MEMBER_COMPETING_MARKET_MAKER{ 'Z' };
			};

			// SecurityID(48): STRING
			struct SecurityID
			{
				static constexpr uint16_t tag{ 48 };
			};

			// SenderCompID(49): STRING
			struct SenderCompID
			{
				static constexpr uint16_t tag{ 49 };
			};

			// SenderSubID(50): STRING
			struct SenderSubID
			{
				static constexpr uint16_t tag{ 50 };
			};

			// SendingDate(51): LOCALMKTDATE
			struct SendingDate
			{
				static constexpr uint16_t tag{ 51 };
			};

			// SendingTime(52): UTCTIMESTAMP
			struct SendingTime
			{
				static constexpr uint16_t tag{ 52 };
			};

			// Quantity(53): QTY
			struct Quantity
			{
				static constexpr uint16_t tag{ 53 };
			};

			// Side(54): CHAR
			struct Side
			{
				static constexpr uint16_t tag{ 54 };
				static constexpr char BUY{ '1' };
				static constexpr char SELL{ '2' };
				static constexpr char BUY_MINUS{ '3' };
				static constexpr char SELL_PLUS{ '4' };
				static constexpr char SELL_SHORT{ '5' };
				static constexpr char SELL_SHORT_EXEMPT{ '6' };
				static constexpr char UNDISCLOSED{ '7' };
				static constexpr char CROSS{ '8' };
				static constexpr char CROSS_SHORT{ '9' };
				static constexpr char CROSS_SHORT_EXEMPT{ 'A' };
				static constexpr char AS_DEFINED{ 'B' };
				static constexpr char OPPOSITE{ 'C' };
				static constexpr char SUBSCRIBE{ 'D' };
				static constexpr char REDEEM{ 'E' };
				static constexpr char LEND{ 'F' };
				static constexpr char BORROW{ 'G' };
			};

			// Symbol(55): STRING
			struct Symbol
			{
				static constexpr uint16_t tag{ 55 };
			};

			// TargetCompID(56): STRING
			struct TargetCompID
			{
				static constexpr uint16_t tag{ 56 };
			};

			// TargetSubID(57): STRING
			struct TargetSubID
			{
				static constexpr uint16_t tag{ 57 };
			};

			// Text(58): STRING
			struct Text
			{
				static constexpr uint16_t tag{ 58 };
			};

			// TimeInForce(59): CHAR
			struct TimeInForce
			{
				static constexpr uint16_t tag{ 59 };
				static constexpr char DAY{ '0' };
				static constexpr char GOOD_TILL_CANCEL{ '1' };
				static constexpr char AT_THE_OPENING{ '2' };
				static constexpr char IMMEDIATE_OR_CANCEL{ '3' };
				static constexpr char FILL_OR_KILL{ '4' };
				static constexpr char GOOD_TILL_CROSSING{ '5' };
				static constexpr char GOOD_TILL_DATE{ '6' };
				static constexpr char AT_THE_CLOSE{ '7' };
				static constexpr char GOOD_THROUGH_CROSSING{ '8' };
				static constexpr char AT_CROSSING{ '9' };
			};

			// TransactTime(60): UTCTIMESTAMP
			struct TransactTime
			{
				static constexpr uint16_t tag{ 60 };
			};

			// Urgency(61): CHAR
			struct Urgency
			{
				static constexpr uint16_t tag{ 61 };
				static constexpr char NORMAL{ '0' };
				static constexpr char FLASH{ '1' };
				static constexpr char BACKGROUND{ '2' };
			};

			// ValidUntilTime(62): UTCTIMESTAMP
			struct ValidUntilTime
			{
				static constexpr uint16_t tag{ 62 };
			};

			// SettlType(63): STRING
			struct SettlType
			{
				static constexpr uint16_t tag{ 63 };
				static inline const std::string REGULAR{ "0" };
				static inline const std::string CASH{ "1" };
				static inline const std::string NEXT_DAY{ "2" };
				static inline const std::string T_PLUS_2{ "3" };
				static inline const std::string T_PLUS_3{ "4" };
				static inline const std::string T_PLUS_4{ "5" };
				static inline const std::string FUTURE{ "6" };
				static inline const std::string WHEN_AND_IF_ISSUED{ "7" };
				static inline const std::string SELLERS_OPTION{ "8" };
				static inline const std::string T_PLUS_5{ "9" };
				static inline const std::string FX_SPOT_NEXT_SETTLEMENT{ "C" };
				static inline const std::string BROKEN_DATE{ "B" };
			};

			// SettlDate(64): LOCALMKTDATE
			struct SettlDate
			{
				static constexpr uint16_t tag{ 64 };
			};

			// SymbolSfx(65): STRING
			struct SymbolSfx
			{
				static constexpr uint16_t tag{ 65 };
				static inline const std::string EUCP_WITH_LUMP_SUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE{ "CD" };
				static inline const std::string WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_ISIN{ "WI" };
			};

			// ListID(66): STRING
			struct ListID
			{
				static constexpr uint16_t tag{ 66 };
			};

			// ListSeqNo(67): INT
			struct ListSeqNo
			{
				static constexpr uint16_t tag{ 67 };
			};

			// TotNoOrders(68): INT
			struct TotNoOrders
			{
				static constexpr uint16_t tag{ 68 };
			};

			// ListExecInst(69): STRING
			struct ListExecInst
			{
				static constexpr uint16_t tag{ 69 };
			};

			// AllocID(70): STRING
			struct AllocID
			{
				static constexpr uint16_t tag{ 70 };
			};

			// AllocTransType(71): CHAR
			struct AllocTransType
			{
				static constexpr uint16_t tag{ 71 };
				static constexpr char NEW{ '0' };
				static constexpr char REPLACE{ '1' };
				static constexpr char CANCEL{ '2' };
				static constexpr char PRELIMINARY{ '3' };
				static constexpr char CALCULATED{ '4' };
				static constexpr char CALCULATED_WITHOUT_PRELIMINARY{ '5' };
				static constexpr char REVERSAL{ '6' };
			};

			// RefAllocID(72): STRING
			struct RefAllocID
			{
				static constexpr uint16_t tag{ 72 };
			};

			// NoOrders(73): NUMINGROUP
			struct NoOrders
			{
				static constexpr uint16_t tag{ 73 };
			};

			// AvgPxPrecision(74): INT
			struct AvgPxPrecision
			{
				static constexpr uint16_t tag{ 74 };
			};

			// TradeDate(75): LOCALMKTDATE
			struct TradeDate
			{
				static constexpr uint16_t tag{ 75 };
			};

			// ExecBroker(76): STRING
			struct ExecBroker
			{
				static constexpr uint16_t tag{ 76 };
			};

			// PositionEffect(77): CHAR
			struct PositionEffect
			{
				static constexpr uint16_t tag{ 77 };
				static constexpr char CLOSE{ 'C' };
				static constexpr char FIFO{ 'F' };
				static constexpr char OPEN{ 'O' };
				static constexpr char ROLLED{ 'R' };
				static constexpr char CLOSE_BUT_NOTIFY_ON_OPEN{ 'N' };
				static constexpr char DEFAULT{ 'D' };
			};

			// NoAllocs(78): NUMINGROUP
			struct NoAllocs
			{
				static constexpr uint16_t tag{ 78 };
			};

			// AllocAccount(79): STRING
			struct AllocAccount
			{
				static constexpr uint16_t tag{ 79 };
			};

			// AllocQty(80): QTY
			struct AllocQty
			{
				static constexpr uint16_t tag{ 80 };
			};

			// ProcessCode(81): CHAR
			struct ProcessCode
			{
				static constexpr uint16_t tag{ 81 };
				static constexpr char REGULAR{ '0' };
				static constexpr char SOFT_DOLLAR{ '1' };
				static constexpr char STEP_IN{ '2' };
				static constexpr char STEP_OUT{ '3' };
				static constexpr char SOFT_DOLLAR_STEP_IN{ '4' };
				static constexpr char SOFT_DOLLAR_STEP_OUT{ '5' };
				static constexpr char PLAN_SPONSOR{ '6' };
			};

			// NoRpts(82): INT
			struct NoRpts
			{
				static constexpr uint16_t tag{ 82 };
			};

			// RptSeq(83): INT
			struct RptSeq
			{
				static constexpr uint16_t tag{ 83 };
			};

			// CxlQty(84): QTY
			struct CxlQty
			{
				static constexpr uint16_t tag{ 84 };
			};

			// NoDlvyInst(85): NUMINGROUP
			struct NoDlvyInst
			{
				static constexpr uint16_t tag{ 85 };
			};

			// DlvyInst(86): STRING
			struct DlvyInst
			{
				static constexpr uint16_t tag{ 86 };
			};

			// AllocStatus(87): INT
			struct AllocStatus
			{
				static constexpr uint16_t tag{ 87 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t BLOCK_LEVEL_REJECT{ 1 };
				static constexpr int32_t ACCOUNT_LEVEL_REJECT{ 2 };
				static constexpr int32_t RECEIVED{ 3 };
				static constexpr int32_t INCOMPLETE{ 4 };
				static constexpr int32_t REJECTED_BY_INTERMEDIARY{ 5 };
				static constexpr int32_t ALLOCATION_PENDING{ 6 };
				static constexpr int32_t REVERSED{ 7 };
			};

			// AllocRejCode(88): INT
			struct AllocRejCode
			{
				static constexpr uint16_t tag{ 88 };
				static constexpr int32_t UNKNOWN_ACCOUNT{ 0 };
				static constexpr int32_t INCORRECT_QUANTITY{ 1 };
				static constexpr int32_t UNKNOWN_OR_STALE_EXECID{ 10 };
				static constexpr int32_t MISMATCHED_DATA{ 11 };
				static constexpr int32_t UNKNOWN_CLORDID{ 12 };
				static constexpr int32_t WAREHOUSE_REQUEST_REJECTED{ 13 };
				static constexpr int32_t INCORRECT_AVERAGEG_PRICE{ 2 };
				static constexpr int32_t UNKNOWN_EXECUTING_BROKER_MNEMONIC{ 3 };
				static constexpr int32_t COMMISSION_DIFFERENCE{ 4 };
				static constexpr int32_t UNKNOWN_ORDERID{ 5 };
				static constexpr int32_t UNKNOWN_LISTID{ 6 };
				static constexpr int32_t OTHER_7{ 7 };
				static constexpr int32_t INCORRECT_ALLOCATED_QUANTITY{ 8 };
				static constexpr int32_t CALCULATION_DIFFERENCE{ 9 };
				static constexpr int32_t OTHER_99{ 99 };
			};

			// Signature(89): DATA
			struct Signature
			{
				static constexpr uint16_t tag{ 89 };
			};

			// SecureDataLen(90): LENGTH
			struct SecureDataLen
			{
				static constexpr uint16_t tag{ 90 };
			};

			// SecureData(91): DATA
			struct SecureData
			{
				static constexpr uint16_t tag{ 91 };
			};

			// BrokerOfCredit(92): STRING
			struct BrokerOfCredit
			{
				static constexpr uint16_t tag{ 92 };
			};

			// SignatureLength(93): LENGTH
			struct SignatureLength
			{
				static constexpr uint16_t tag{ 93 };
			};

			// EmailType(94): CHAR
			struct EmailType
			{
				static constexpr uint16_t tag{ 94 };
				static constexpr char NEW{ '0' };
				static constexpr char REPLY{ '1' };
				static constexpr char ADMIN_REPLY{ '2' };
			};

			// RawDataLength(95): LENGTH
			struct RawDataLength
			{
				static constexpr uint16_t tag{ 95 };
			};

			// RawData(96): DATA
			struct RawData
			{
				static constexpr uint16_t tag{ 96 };
			};

			// PossResend(97): BOOLEAN
			struct PossResend
			{
				static constexpr uint16_t tag{ 97 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// EncryptMethod(98): INT
			struct EncryptMethod
			{
				static constexpr uint16_t tag{ 98 };
				static constexpr int32_t NONE{ 0 };
				static constexpr int32_t PKCS_1{ 1 };
				static constexpr int32_t DES{ 2 };
				static constexpr int32_t PKCS_3{ 3 };
				static constexpr int32_t PGP_4{ 4 };
				static constexpr int32_t PGP_5{ 5 };
				static constexpr int32_t PEM{ 6 };
			};

			// StopPx(99): PRICE
			struct StopPx
			{
				static constexpr uint16_t tag{ 99 };
			};

			// ExDestination(100): EXCHANGE
			struct ExDestination
			{
				static constexpr uint16_t tag{ 100 };
			};

			// CxlRejReason(102): INT
			struct CxlRejReason
			{
				static constexpr uint16_t tag{ 102 };
				static constexpr int32_t TOO_LATE_TO_CANCEL{ 0 };
				static constexpr int32_t UNKNOWN_ORDER{ 1 };
				static constexpr int32_t BROKER{ 2 };
				static constexpr int32_t ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS{ 3 };
				static constexpr int32_t UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST{ 4 };
				static constexpr int32_t ORIGORDMODTIME{ 5 };
				static constexpr int32_t DUPLICATE_CLORDID{ 6 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t INVALID_PRICE_INCREMENT{ 18 };
				static constexpr int32_t PRICE_EXCEEDS_CURRENT_PRICE{ 7 };
				static constexpr int32_t PRICE_EXCEEDS_CURRENT_PRICE_BAND{ 8 };
			};

			// OrdRejReason(103): INT
			struct OrdRejReason
			{
				static constexpr uint16_t tag{ 103 };
				static constexpr int32_t BROKER{ 0 };
				static constexpr int32_t UNKNOWN_SYMBOL{ 1 };
				static constexpr int32_t INVALID_INVESTOR_ID{ 10 };
				static constexpr int32_t UNSUPPORTED_ORDER_CHARACTERISTIC{ 11 };
				static constexpr int32_t SURVEILLENCE_OPTION{ 12 };
				static constexpr int32_t INCORRECT_QUANTITY{ 13 };
				static constexpr int32_t INCORRECT_ALLOCATED_QUANTITY{ 14 };
				static constexpr int32_t UNKNOWN_ACCOUNT{ 15 };
				static constexpr int32_t EXCHANGE_CLOSED{ 2 };
				static constexpr int32_t ORDER_EXCEEDS_LIMIT{ 3 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t UNKNOWN_ORDER{ 5 };
				static constexpr int32_t DUPLICATE_ORDER{ 6 };
				static constexpr int32_t DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER{ 7 };
				static constexpr int32_t STALE_ORDER{ 8 };
				static constexpr int32_t TRADE_ALONG_REQUIRED{ 9 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t INVALID_PRICE_INCREMENT{ 18 };
				static constexpr int32_t PRICE_EXCEEDS_CURRENT_PRICE_BAND{ 16 };
			};

			// IOIQualifier(104): CHAR
			struct IOIQualifier
			{
				static constexpr uint16_t tag{ 104 };
				static constexpr char ALL_OR_NONE{ 'A' };
				static constexpr char MARKET_ON_CLOSE{ 'B' };
				static constexpr char AT_THE_CLOSE{ 'C' };
				static constexpr char VWAP{ 'D' };
				static constexpr char IN_TOUCH_WITH{ 'I' };
				static constexpr char LIMIT{ 'L' };
				static constexpr char MORE_BEHIND{ 'M' };
				static constexpr char AT_THE_OPEN{ 'O' };
				static constexpr char TAKING_A_POSITION{ 'P' };
				static constexpr char AT_THE_MARKET{ 'Q' };
				static constexpr char READY_TO_TRADE{ 'R' };
				static constexpr char PORTFOLIO_SHOWN{ 'S' };
				static constexpr char THROUGH_THE_DAY{ 'T' };
				static constexpr char VERSUS{ 'V' };
				static constexpr char INDICATION{ 'W' };
				static constexpr char CROSSING_OPPORTUNITY{ 'X' };
				static constexpr char AT_THE_MIDPOINT{ 'Y' };
				static constexpr char PRE_OPEN{ 'Z' };
			};

			// WaveNo(105): STRING
			struct WaveNo
			{
				static constexpr uint16_t tag{ 105 };
			};

			// Issuer(106): STRING
			struct Issuer
			{
				static constexpr uint16_t tag{ 106 };
			};

			// SecurityDesc(107): STRING
			struct SecurityDesc
			{
				static constexpr uint16_t tag{ 107 };
			};

			// HeartBtInt(108): INT
			struct HeartBtInt
			{
				static constexpr uint16_t tag{ 108 };
			};

			// ClientID(109): STRING
			struct ClientID
			{
				static constexpr uint16_t tag{ 109 };
			};

			// MinQty(110): QTY
			struct MinQty
			{
				static constexpr uint16_t tag{ 110 };
			};

			// MaxFloor(111): QTY
			struct MaxFloor
			{
				static constexpr uint16_t tag{ 111 };
			};

			// TestReqID(112): STRING
			struct TestReqID
			{
				static constexpr uint16_t tag{ 112 };
			};

			// ReportToExch(113): BOOLEAN
			struct ReportToExch
			{
				static constexpr uint16_t tag{ 113 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// LocateReqd(114): BOOLEAN
			struct LocateReqd
			{
				static constexpr uint16_t tag{ 114 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// OnBehalfOfCompID(115): STRING
			struct OnBehalfOfCompID
			{
				static constexpr uint16_t tag{ 115 };
			};

			// OnBehalfOfSubID(116): STRING
			struct OnBehalfOfSubID
			{
				static constexpr uint16_t tag{ 116 };
			};

			// QuoteID(117): STRING
			struct QuoteID
			{
				static constexpr uint16_t tag{ 117 };
			};

			// NetMoney(118): AMT
			struct NetMoney
			{
				static constexpr uint16_t tag{ 118 };
			};

			// SettlCurrAmt(119): AMT
			struct SettlCurrAmt
			{
				static constexpr uint16_t tag{ 119 };
			};

			// SettlCurrency(120): CURRENCY
			struct SettlCurrency
			{
				static constexpr uint16_t tag{ 120 };
			};

			// ForexReq(121): BOOLEAN
			struct ForexReq
			{
				static constexpr uint16_t tag{ 121 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// OrigSendingTime(122): UTCTIMESTAMP
			struct OrigSendingTime
			{
				static constexpr uint16_t tag{ 122 };
			};

			// GapFillFlag(123): BOOLEAN
			struct GapFillFlag
			{
				static constexpr uint16_t tag{ 123 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// NoExecs(124): NUMINGROUP
			struct NoExecs
			{
				static constexpr uint16_t tag{ 124 };
			};

			// CxlType(125): CHAR
			struct CxlType
			{
				static constexpr uint16_t tag{ 125 };
			};

			// ExpireTime(126): UTCTIMESTAMP
			struct ExpireTime
			{
				static constexpr uint16_t tag{ 126 };
			};

			// DKReason(127): CHAR
			struct DKReason
			{
				static constexpr uint16_t tag{ 127 };
				static constexpr char UNKNOWN_SYMBOL{ 'A' };
				static constexpr char WRONG_SIDE{ 'B' };
				static constexpr char QUANTITY_EXCEEDS_ORDER{ 'C' };
				static constexpr char NO_MATCHING_ORDER{ 'D' };
				static constexpr char PRICE_EXCEEDS_LIMIT{ 'E' };
				static constexpr char CALCULATION_DIFFERENCE{ 'F' };
				static constexpr char OTHER{ 'Z' };
			};

			// DeliverToCompID(128): STRING
			struct DeliverToCompID
			{
				static constexpr uint16_t tag{ 128 };
			};

			// DeliverToSubID(129): STRING
			struct DeliverToSubID
			{
				static constexpr uint16_t tag{ 129 };
			};

			// IOINaturalFlag(130): BOOLEAN
			struct IOINaturalFlag
			{
				static constexpr uint16_t tag{ 130 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// QuoteReqID(131): STRING
			struct QuoteReqID
			{
				static constexpr uint16_t tag{ 131 };
			};

			// BidPx(132): PRICE
			struct BidPx
			{
				static constexpr uint16_t tag{ 132 };
			};

			// OfferPx(133): PRICE
			struct OfferPx
			{
				static constexpr uint16_t tag{ 133 };
			};

			// BidSize(134): QTY
			struct BidSize
			{
				static constexpr uint16_t tag{ 134 };
			};

			// OfferSize(135): QTY
			struct OfferSize
			{
				static constexpr uint16_t tag{ 135 };
			};

			// NoMiscFees(136): NUMINGROUP
			struct NoMiscFees
			{
				static constexpr uint16_t tag{ 136 };
			};

			// MiscFeeAmt(137): AMT
			struct MiscFeeAmt
			{
				static constexpr uint16_t tag{ 137 };
			};

			// MiscFeeCurr(138): CURRENCY
			struct MiscFeeCurr
			{
				static constexpr uint16_t tag{ 138 };
			};

			// MiscFeeType(139): STRING
			struct MiscFeeType
			{
				static constexpr uint16_t tag{ 139 };
				static inline const std::string REGULATORY{ "1" };
				static inline const std::string PER_TRANSACTION{ "10" };
				static inline const std::string CONVERSION{ "11" };
				static inline const std::string AGENT{ "12" };
				static inline const std::string TAX{ "2" };
				static inline const std::string LOCAL_COMMISSION{ "3" };
				static inline const std::string EXCHANGE_FEES{ "4" };
				static inline const std::string STAMP{ "5" };
				static inline const std::string LEVY{ "6" };
				static inline const std::string OTHER{ "7" };
				static inline const std::string MARKUP{ "8" };
				static inline const std::string CONSUMPTION_TAX{ "9" };
				static inline const std::string TRANSFER_FEE{ "13" };
				static inline const std::string SECURITY_LENDING{ "14" };
			};

			// PrevClosePx(140): PRICE
			struct PrevClosePx
			{
				static constexpr uint16_t tag{ 140 };
			};

			// ResetSeqNumFlag(141): BOOLEAN
			struct ResetSeqNumFlag
			{
				static constexpr uint16_t tag{ 141 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// SenderLocationID(142): STRING
			struct SenderLocationID
			{
				static constexpr uint16_t tag{ 142 };
			};

			// TargetLocationID(143): STRING
			struct TargetLocationID
			{
				static constexpr uint16_t tag{ 143 };
			};

			// OnBehalfOfLocationID(144): STRING
			struct OnBehalfOfLocationID
			{
				static constexpr uint16_t tag{ 144 };
			};

			// DeliverToLocationID(145): STRING
			struct DeliverToLocationID
			{
				static constexpr uint16_t tag{ 145 };
			};

			// NoRelatedSym(146): NUMINGROUP
			struct NoRelatedSym
			{
				static constexpr uint16_t tag{ 146 };
			};

			// Subject(147): STRING
			struct Subject
			{
				static constexpr uint16_t tag{ 147 };
			};

			// Headline(148): STRING
			struct Headline
			{
				static constexpr uint16_t tag{ 148 };
			};

			// URLLink(149): STRING
			struct URLLink
			{
				static constexpr uint16_t tag{ 149 };
			};

			// ExecType(150): CHAR
			struct ExecType
			{
				static constexpr uint16_t tag{ 150 };
				static constexpr char NEW{ '0' };
				static constexpr char DONE_FOR_DAY{ '3' };
				static constexpr char CANCELED{ '4' };
				static constexpr char REPLACED{ '5' };
				static constexpr char PENDING_CANCEL{ '6' };
				static constexpr char STOPPED{ '7' };
				static constexpr char REJECTED{ '8' };
				static constexpr char SUSPENDED{ '9' };
				static constexpr char PENDING_NEW{ 'A' };
				static constexpr char CALCULATED{ 'B' };
				static constexpr char EXPIRED{ 'C' };
				static constexpr char RESTATED{ 'D' };
				static constexpr char PENDING_REPLACE{ 'E' };
				static constexpr char TRADE{ 'F' };
				static constexpr char TRADE_CORRECT{ 'G' };
				static constexpr char TRADE_CANCEL{ 'H' };
				static constexpr char ORDER_STATUS{ 'I' };
				static constexpr char TRADE_IN_A_CLEARING_HOLD{ 'J' };
				static constexpr char TRADE_HAS_BEEN_RELEASED_TO_CLEARING{ 'K' };
				static constexpr char TRIGGERED_OR_ACTIVATED_BY_SYSTEM{ 'L' };
			};

			// LeavesQty(151): QTY
			struct LeavesQty
			{
				static constexpr uint16_t tag{ 151 };
			};

			// CashOrderQty(152): QTY
			struct CashOrderQty
			{
				static constexpr uint16_t tag{ 152 };
			};

			// AllocAvgPx(153): PRICE
			struct AllocAvgPx
			{
				static constexpr uint16_t tag{ 153 };
			};

			// AllocNetMoney(154): AMT
			struct AllocNetMoney
			{
				static constexpr uint16_t tag{ 154 };
			};

			// SettlCurrFxRate(155): FLOAT
			struct SettlCurrFxRate
			{
				static constexpr uint16_t tag{ 155 };
			};

			// SettlCurrFxRateCalc(156): CHAR
			struct SettlCurrFxRateCalc
			{
				static constexpr uint16_t tag{ 156 };
				static constexpr char MULTIPLY{ 'M' };
				static constexpr char DIVIDE{ 'D' };
			};

			// NumDaysInterest(157): INT
			struct NumDaysInterest
			{
				static constexpr uint16_t tag{ 157 };
			};

			// AccruedInterestRate(158): PERCENTAGE
			struct AccruedInterestRate
			{
				static constexpr uint16_t tag{ 158 };
			};

			// AccruedInterestAmt(159): AMT
			struct AccruedInterestAmt
			{
				static constexpr uint16_t tag{ 159 };
			};

			// SettlInstMode(160): CHAR
			struct SettlInstMode
			{
				static constexpr uint16_t tag{ 160 };
				static constexpr char DEFAULT{ '0' };
				static constexpr char STANDING_INSTRUCTIONS_PROVIDED{ '1' };
				static constexpr char SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING{ '2' };
				static constexpr char SPECIFIC_ALLOCATION_ACCOUNT_STANDING{ '3' };
				static constexpr char SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT{ '4' };
				static constexpr char REQUEST_REJECT{ '5' };
			};

			// AllocText(161): STRING
			struct AllocText
			{
				static constexpr uint16_t tag{ 161 };
			};

			// SettlInstID(162): STRING
			struct SettlInstID
			{
				static constexpr uint16_t tag{ 162 };
			};

			// SettlInstTransType(163): CHAR
			struct SettlInstTransType
			{
				static constexpr uint16_t tag{ 163 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
				static constexpr char RESTATE{ 'T' };
			};

			// EmailThreadID(164): STRING
			struct EmailThreadID
			{
				static constexpr uint16_t tag{ 164 };
			};

			// SettlInstSource(165): CHAR
			struct SettlInstSource
			{
				static constexpr uint16_t tag{ 165 };
				static constexpr char BROKERS_INSTRUCTIONS{ '1' };
				static constexpr char INSTITUTIONS_INSTRUCTIONS{ '2' };
				static constexpr char INVESTOR{ '3' };
			};

			// SettlLocation(166): STRING
			struct SettlLocation
			{
				static constexpr uint16_t tag{ 166 };
				static inline const std::string CEDEL{ "CED" };
				static inline const std::string DEPOSITORY_TRUST_COMPANY{ "DTC" };
				static inline const std::string EURO_CLEAR{ "EUR" };
				static inline const std::string FEDERAL_BOOK_ENTRY{ "FED" };
				static inline const std::string LOCAL_MARKET_SETTLE_LOCATION{ "ISO_Country_Code" };
				static inline const std::string PHYSICAL{ "PNY" };
				static inline const std::string PARTICIPANT_TRUST_COMPANY{ "PTC" };
			};

			// SecurityType(167): STRING
			struct SecurityType
			{
				static constexpr uint16_t tag{ 167 };
				static inline const std::string ASSET_BACKED_SECURITIES{ "ABS" };
				static inline const std::string AMENDED_RESTATED{ "AMENDED" };
				static inline const std::string OTHER_ANTICIPATION_NOTES{ "AN" };
				static inline const std::string BANKERS_ACCEPTANCE{ "BA" };
				static inline const std::string BANK_NOTES{ "BN" };
				static inline const std::string BILL_OF_EXCHANGES{ "BOX" };
				static inline const std::string BRADY_BOND{ "BRADY" };
				static inline const std::string BRIDGE_LOAN{ "BRIDGE" };
				static inline const std::string BUY_SELLBACK{ "BUYSELL" };
				static inline const std::string CONVERTIBLE_BOND{ "CB" };
				static inline const std::string CERTIFICATE_OF_DEPOSIT{ "CD" };
				static inline const std::string CALL_LOANS{ "CL" };
				static inline const std::string CORP_MORTGAGE_BACKED_SECURITIES{ "CMBS" };
				static inline const std::string COLLATERALIZED_MORTGAGE_OBLIGATION{ "CMO" };
				static inline const std::string CERTIFICATE_OF_OBLIGATION{ "COFO" };
				static inline const std::string CERTIFICATE_OF_PARTICIPATION{ "COFP" };
				static inline const std::string CORPORATE_BOND{ "CORP" };
				static inline const std::string COMMERCIAL_PAPER{ "CP" };
				static inline const std::string CORPORATE_PRIVATE_PLACEMENT{ "CPP" };
				static inline const std::string COMMON_STOCK{ "CS" };
				static inline const std::string DEFAULTED{ "DEFLTED" };
				static inline const std::string DEBTOR_IN_POSSESSION{ "DINP" };
				static inline const std::string DEPOSIT_NOTES{ "DN" };
				static inline const std::string DUAL_CURRENCY{ "DUAL" };
				static inline const std::string EURO_CERTIFICATE_OF_DEPOSIT{ "EUCD" };
				static inline const std::string EURO_CORPORATE_BOND{ "EUCORP" };
				static inline const std::string EURO_COMMERCIAL_PAPER{ "EUCP" };
				static inline const std::string EURO_SOVEREIGNS{ "EUSOV" };
				static inline const std::string EURO_SUPRANATIONAL_COUPONS{ "EUSUPRA" };
				static inline const std::string FEDERAL_AGENCY_COUPON{ "FAC" };
				static inline const std::string FEDERAL_AGENCY_DISCOUNT_NOTE{ "FADN" };
				static inline const std::string FOREIGN_EXCHANGE_CONTRACT{ "FOR" };
				static inline const std::string FORWARD{ "FORWARD" };
				static inline const std::string FUTURE{ "FUT" };
				static inline const std::string GENERAL_OBLIGATION_BONDS{ "GO" };
				static inline const std::string IOETTE_MORTGAGE{ "IET" };
				static inline const std::string LETTER_OF_CREDIT{ "LOFC" };
				static inline const std::string LIQUIDITY_NOTE{ "LQN" };
				static inline const std::string MATURED{ "MATURED" };
				static inline const std::string MORTGAGE_BACKED_SECURITIES{ "MBS" };
				static inline const std::string MUTUAL_FUND{ "MF" };
				static inline const std::string MORTGAGE_INTEREST_ONLY{ "MIO" };
				static inline const std::string MULTILEG_INSTRUMENT{ "MLEG" };
				static inline const std::string MORTGAGE_PRINCIPAL_ONLY{ "MPO" };
				static inline const std::string MORTGAGE_PRIVATE_PLACEMENT{ "MPP" };
				static inline const std::string MISCELLANEOUS_PASS_THROUGH{ "MPT" };
				static inline const std::string MANDATORY_TENDER{ "MT" };
				static inline const std::string MEDIUM_TERM_NOTES{ "MTN" };
				static inline const std::string NO_SECURITY_TYPE{ "NONE" };
				static inline const std::string OVERNIGHT{ "ONITE" };
				static inline const std::string OPTION{ "OPT" };
				static inline const std::string PRIVATE_EXPORT_FUNDING{ "PEF" };
				static inline const std::string PFANDBRIEFE{ "PFAND" };
				static inline const std::string PROMISSORY_NOTE{ "PN" };
				static inline const std::string PREFERRED_STOCK{ "PS" };
				static inline const std::string PLAZOS_FIJOS{ "PZFJ" };
				static inline const std::string REVENUE_ANTICIPATION_NOTE{ "RAN" };
				static inline const std::string REPLACED{ "REPLACD" };
				static inline const std::string REPURCHASE{ "REPO" };
				static inline const std::string RETIRED{ "RETIRED" };
				static inline const std::string REVENUE_BONDS{ "REV" };
				static inline const std::string REVOLVER_LOAN{ "RVLV" };
				static inline const std::string REVOLVER_TERM_LOAN{ "RVLVTRM" };
				static inline const std::string SECURITIES_LOAN{ "SECLOAN" };
				static inline const std::string SECURITIES_PLEDGE{ "SECPLEDGE" };
				static inline const std::string SPECIAL_ASSESSMENT{ "SPCLA" };
				static inline const std::string SPECIAL_OBLIGATION{ "SPCLO" };
				static inline const std::string SPECIAL_TAX{ "SPCLT" };
				static inline const std::string SHORT_TERM_LOAN_NOTE{ "STN" };
				static inline const std::string STRUCTURED_NOTES{ "STRUCT" };
				static inline const std::string USD_SUPRANATIONAL_COUPONS{ "SUPRA" };
				static inline const std::string SWING_LINE_FACILITY{ "SWING" };
				static inline const std::string TAX_ANTICIPATION_NOTE{ "TAN" };
				static inline const std::string TAX_ALLOCATION{ "TAXA" };
				static inline const std::string TO_BE_ANNOUNCED{ "TBA" };
				static inline const std::string US_TREASURY_BILL_TBILL{ "TBILL" };
				static inline const std::string US_TREASURY_BOND{ "TBOND" };
				static inline const std::string PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE{ "TCAL" };
				static inline const std::string TIME_DEPOSIT{ "TD" };
				static inline const std::string TAX_EXEMPT_COMMERCIAL_PAPER{ "TECP" };
				static inline const std::string TERM_LOAN{ "TERM" };
				static inline const std::string INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE{ "TINT" };
				static inline const std::string TREASURY_INFLATION_PROTECTED_SECURITIES{ "TIPS" };
				static inline const std::string US_TREASURY_NOTE_TNOTE{ "TNOTE" };
				static inline const std::string PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE{ "TPRN" };
				static inline const std::string TAX_REVENUE_ANTICIPATION_NOTE{ "TRAN" };
				static inline const std::string US_TREASURY_NOTE_UST{ "UST" };
				static inline const std::string US_TREASURY_BILL_USTB{ "USTB" };
				static inline const std::string VARIABLE_RATE_DEMAND_NOTE{ "VRDN" };
				static inline const std::string WARRANT{ "WAR" };
				static inline const std::string WITHDRAWN{ "WITHDRN" };
				static inline const std::string WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST{ "?" };
				static inline const std::string EXTENDED_COMM_NOTE{ "XCN" };
				static inline const std::string INDEXED_LINKED{ "XLINKD" };
				static inline const std::string YANKEE_CORPORATE_BOND{ "YANK" };
				static inline const std::string YANKEE_CERTIFICATE_OF_DEPOSIT{ "YCD" };
				static inline const std::string OPTIONS_ON_PHYSICAL{ "OOP" };
				static inline const std::string OPTIONS_ON_FUTURES{ "OOF" };
				static inline const std::string CASH{ "CASH" };
				static inline const std::string OPTIONS_ON_COMBO{ "OOC" };
				static inline const std::string INTEREST_RATE_SWAP{ "IRS" };
				static inline const std::string BANK_DEPOSITORY_NOTE{ "BDN" };
				static inline const std::string CANADIAN_MONEY_MARKETS{ "CAMM" };
				static inline const std::string CANADIAN_TREASURY_NOTES{ "CAN" };
				static inline const std::string CANADIAN_TREASURY_BILLS{ "CTB" };
				static inline const std::string CREDIT_DEFAULT_SWAP{ "CDS" };
				static inline const std::string CANADIAN_MORTGAGE_BONDS{ "CMB" };
				static inline const std::string EURO_CORPORATE_FLOATING_RATE_NOTES{ "EUFRN" };
				static inline const std::string US_CORPORATE_FLOATING_RATE_NOTES{ "FRN" };
				static inline const std::string CANADIAN_PROVINCIAL_BONDS{ "PROV" };
				static inline const std::string SECURED_LIQUIDITY_NOTE{ "SLQN" };
				static inline const std::string TREASURY_BILL{ "TB" };
				static inline const std::string TERM_LIQUIDITY_NOTE{ "TLQN" };
				static inline const std::string TAXABLE_MUNICIPAL_CP{ "TMCP" };
				static inline const std::string NON_DELIVERABLE_FORWARD{ "FXNDF" };
				static inline const std::string FX_SPOT{ "FXSPOT" };
				static inline const std::string FX_FORWARD{ "FXFWD" };
				static inline const std::string FX_SWAP{ "FXSWAP" };
			};

			// EffectiveTime(168): UTCTIMESTAMP
			struct EffectiveTime
			{
				static constexpr uint16_t tag{ 168 };
			};

			// StandInstDbType(169): INT
			struct StandInstDbType
			{
				static constexpr uint16_t tag{ 169 };
				static constexpr int32_t OTHER{ 0 };
				static constexpr int32_t DTC_SID{ 1 };
				static constexpr int32_t THOMSON_ALERT{ 2 };
				static constexpr int32_t A_GLOBAL_CUSTODIAN{ 3 };
				static constexpr int32_t ACCOUNTNET{ 4 };
			};

			// StandInstDbName(170): STRING
			struct StandInstDbName
			{
				static constexpr uint16_t tag{ 170 };
			};

			// StandInstDbID(171): STRING
			struct StandInstDbID
			{
				static constexpr uint16_t tag{ 171 };
			};

			// SettlDeliveryType(172): INT
			struct SettlDeliveryType
			{
				static constexpr uint16_t tag{ 172 };
				static constexpr int32_t VERSUS_PAYMENT_DELIVER{ 0 };
				static constexpr int32_t FREE_DELIVER{ 1 };
				static constexpr int32_t TRI_PARTY{ 2 };
				static constexpr int32_t HOLD_IN_CUSTODY{ 3 };
			};

			// SettlDepositoryCode(173): STRING
			struct SettlDepositoryCode
			{
				static constexpr uint16_t tag{ 173 };
			};

			// SettlBrkrCode(174): STRING
			struct SettlBrkrCode
			{
				static constexpr uint16_t tag{ 174 };
			};

			// SettlInstCode(175): STRING
			struct SettlInstCode
			{
				static constexpr uint16_t tag{ 175 };
			};

			// SecuritySettlAgentName(176): STRING
			struct SecuritySettlAgentName
			{
				static constexpr uint16_t tag{ 176 };
			};

			// SecuritySettlAgentCode(177): STRING
			struct SecuritySettlAgentCode
			{
				static constexpr uint16_t tag{ 177 };
			};

			// SecuritySettlAgentAcctNum(178): STRING
			struct SecuritySettlAgentAcctNum
			{
				static constexpr uint16_t tag{ 178 };
			};

			// SecuritySettlAgentAcctName(179): STRING
			struct SecuritySettlAgentAcctName
			{
				static constexpr uint16_t tag{ 179 };
			};

			// SecuritySettlAgentContactName(180): STRING
			struct SecuritySettlAgentContactName
			{
				static constexpr uint16_t tag{ 180 };
			};

			// SecuritySettlAgentContactPhone(181): STRING
			struct SecuritySettlAgentContactPhone
			{
				static constexpr uint16_t tag{ 181 };
			};

			// CashSettlAgentName(182): STRING
			struct CashSettlAgentName
			{
				static constexpr uint16_t tag{ 182 };
			};

			// CashSettlAgentCode(183): STRING
			struct CashSettlAgentCode
			{
				static constexpr uint16_t tag{ 183 };
			};

			// CashSettlAgentAcctNum(184): STRING
			struct CashSettlAgentAcctNum
			{
				static constexpr uint16_t tag{ 184 };
			};

			// CashSettlAgentAcctName(185): STRING
			struct CashSettlAgentAcctName
			{
				static constexpr uint16_t tag{ 185 };
			};

			// CashSettlAgentContactName(186): STRING
			struct CashSettlAgentContactName
			{
				static constexpr uint16_t tag{ 186 };
			};

			// CashSettlAgentContactPhone(187): STRING
			struct CashSettlAgentContactPhone
			{
				static constexpr uint16_t tag{ 187 };
			};

			// BidSpotRate(188): PRICE
			struct BidSpotRate
			{
				static constexpr uint16_t tag{ 188 };
			};

			// BidForwardPoints(189): PRICEOFFSET
			struct BidForwardPoints
			{
				static constexpr uint16_t tag{ 189 };
			};

			// OfferSpotRate(190): PRICE
			struct OfferSpotRate
			{
				static constexpr uint16_t tag{ 190 };
			};

			// OfferForwardPoints(191): PRICEOFFSET
			struct OfferForwardPoints
			{
				static constexpr uint16_t tag{ 191 };
			};

			// OrderQty2(192): QTY
			struct OrderQty2
			{
				static constexpr uint16_t tag{ 192 };
			};

			// SettlDate2(193): LOCALMKTDATE
			struct SettlDate2
			{
				static constexpr uint16_t tag{ 193 };
			};

			// LastSpotRate(194): PRICE
			struct LastSpotRate
			{
				static constexpr uint16_t tag{ 194 };
			};

			// LastForwardPoints(195): PRICEOFFSET
			struct LastForwardPoints
			{
				static constexpr uint16_t tag{ 195 };
			};

			// AllocLinkID(196): STRING
			struct AllocLinkID
			{
				static constexpr uint16_t tag{ 196 };
			};

			// AllocLinkType(197): INT
			struct AllocLinkType
			{
				static constexpr uint16_t tag{ 197 };
				static constexpr int32_t FX_NETTING{ 0 };
				static constexpr int32_t FX_SWAP{ 1 };
			};

			// SecondaryOrderID(198): STRING
			struct SecondaryOrderID
			{
				static constexpr uint16_t tag{ 198 };
			};

			// NoIOIQualifiers(199): NUMINGROUP
			struct NoIOIQualifiers
			{
				static constexpr uint16_t tag{ 199 };
			};

			// MaturityMonthYear(200): MONTHYEAR
			struct MaturityMonthYear
			{
				static constexpr uint16_t tag{ 200 };
			};

			// PutOrCall(201): INT
			struct PutOrCall
			{
				static constexpr uint16_t tag{ 201 };
				static constexpr int32_t PUT{ 0 };
				static constexpr int32_t CALL{ 1 };
			};

			// StrikePrice(202): PRICE
			struct StrikePrice
			{
				static constexpr uint16_t tag{ 202 };
			};

			// CoveredOrUncovered(203): INT
			struct CoveredOrUncovered
			{
				static constexpr uint16_t tag{ 203 };
				static constexpr int32_t COVERED{ 0 };
				static constexpr int32_t UNCOVERED{ 1 };
			};

			// CustomerOrFirm(204): INT
			struct CustomerOrFirm
			{
				static constexpr uint16_t tag{ 204 };
				static constexpr int32_t CUSTOMER{ 0 };
				static constexpr int32_t FIRM{ 1 };
			};

			// MaturityDay(205): DAYOFMONTH
			struct MaturityDay
			{
				static constexpr uint16_t tag{ 205 };
			};

			// OptAttribute(206): CHAR
			struct OptAttribute
			{
				static constexpr uint16_t tag{ 206 };
			};

			// SecurityExchange(207): EXCHANGE
			struct SecurityExchange
			{
				static constexpr uint16_t tag{ 207 };
			};

			// NotifyBrokerOfCredit(208): BOOLEAN
			struct NotifyBrokerOfCredit
			{
				static constexpr uint16_t tag{ 208 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// AllocHandlInst(209): INT
			struct AllocHandlInst
			{
				static constexpr uint16_t tag{ 209 };
				static constexpr int32_t MATCH{ 1 };
				static constexpr int32_t FORWARD{ 2 };
				static constexpr int32_t FORWARD_AND_MATCH{ 3 };
			};

			// MaxShow(210): QTY
			struct MaxShow
			{
				static constexpr uint16_t tag{ 210 };
			};

			// PegOffsetValue(211): FLOAT
			struct PegOffsetValue
			{
				static constexpr uint16_t tag{ 211 };
			};

			// XmlDataLen(212): LENGTH
			struct XmlDataLen
			{
				static constexpr uint16_t tag{ 212 };
			};

			// XmlData(213): DATA
			struct XmlData
			{
				static constexpr uint16_t tag{ 213 };
			};

			// SettlInstRefID(214): STRING
			struct SettlInstRefID
			{
				static constexpr uint16_t tag{ 214 };
			};

			// NoRoutingIDs(215): NUMINGROUP
			struct NoRoutingIDs
			{
				static constexpr uint16_t tag{ 215 };
			};

			// RoutingType(216): INT
			struct RoutingType
			{
				static constexpr uint16_t tag{ 216 };
				static constexpr int32_t TARGET_FIRM{ 1 };
				static constexpr int32_t TARGET_LIST{ 2 };
				static constexpr int32_t BLOCK_FIRM{ 3 };
				static constexpr int32_t BLOCK_LIST{ 4 };
			};

			// RoutingID(217): STRING
			struct RoutingID
			{
				static constexpr uint16_t tag{ 217 };
			};

			// Spread(218): PRICEOFFSET
			struct Spread
			{
				static constexpr uint16_t tag{ 218 };
			};

			// Benchmark(219): CHAR
			struct Benchmark
			{
				static constexpr uint16_t tag{ 219 };
				static constexpr char CURVE{ '1' };
				static constexpr char _5YR{ '2' };
				static constexpr char OLD5{ '3' };
				static constexpr char _10YR{ '4' };
				static constexpr char OLD10{ '5' };
				static constexpr char _30YR{ '6' };
				static constexpr char OLD30{ '7' };
				static constexpr char _3MOLIBOR{ '8' };
				static constexpr char _6MOLIBOR{ '9' };
			};

			// BenchmarkCurveCurrency(220): CURRENCY
			struct BenchmarkCurveCurrency
			{
				static constexpr uint16_t tag{ 220 };
			};

			// BenchmarkCurveName(221): STRING
			struct BenchmarkCurveName
			{
				static constexpr uint16_t tag{ 221 };
				static inline const std::string EONIA{ "EONIA" };
				static inline const std::string EUREPO{ "EUREPO" };
				static inline const std::string EURIBOR{ "Euribor" };
				static inline const std::string FUTURESWAP{ "FutureSWAP" };
				static inline const std::string LIBID{ "LIBID" };
				static inline const std::string LIBOR{ "LIBOR" };
				static inline const std::string MUNIAAA{ "MuniAAA" };
				static inline const std::string OTHER{ "OTHER" };
				static inline const std::string PFANDBRIEFE{ "Pfandbriefe" };
				static inline const std::string SONIA{ "SONIA" };
				static inline const std::string SWAP{ "SWAP" };
				static inline const std::string TREASURY{ "Treasury" };
			};

			// BenchmarkCurvePoint(222): STRING
			struct BenchmarkCurvePoint
			{
				static constexpr uint16_t tag{ 222 };
			};

			// CouponRate(223): PERCENTAGE
			struct CouponRate
			{
				static constexpr uint16_t tag{ 223 };
			};

			// CouponPaymentDate(224): LOCALMKTDATE
			struct CouponPaymentDate
			{
				static constexpr uint16_t tag{ 224 };
			};

			// IssueDate(225): LOCALMKTDATE
			struct IssueDate
			{
				static constexpr uint16_t tag{ 225 };
			};

			// RepurchaseTerm(226): INT
			struct RepurchaseTerm
			{
				static constexpr uint16_t tag{ 226 };
			};

			// RepurchaseRate(227): PERCENTAGE
			struct RepurchaseRate
			{
				static constexpr uint16_t tag{ 227 };
			};

			// Factor(228): FLOAT
			struct Factor
			{
				static constexpr uint16_t tag{ 228 };
			};

			// TradeOriginationDate(229): LOCALMKTDATE
			struct TradeOriginationDate
			{
				static constexpr uint16_t tag{ 229 };
			};

			// ExDate(230): LOCALMKTDATE
			struct ExDate
			{
				static constexpr uint16_t tag{ 230 };
			};

			// ContractMultiplier(231): FLOAT
			struct ContractMultiplier
			{
				static constexpr uint16_t tag{ 231 };
			};

			// NoStipulations(232): NUMINGROUP
			struct NoStipulations
			{
				static constexpr uint16_t tag{ 232 };
			};

			// StipulationType(233): STRING
			struct StipulationType
			{
				static constexpr uint16_t tag{ 233 };
				static inline const std::string ABSOLUTE_PREPAYMENT_SPEED{ "ABS" };
				static inline const std::string ALTERNATIVE_MINIMUM_TAX{ "AMT" };
				static inline const std::string AUTO_REINVESTMENT_AT_RATE_OR_BETTER{ "AUTOREINV" };
				static inline const std::string BANK_QUALIFIED{ "BANKQUAL" };
				static inline const std::string BARGAIN_CONDITIONS{ "BGNCON" };
				static inline const std::string COUPON_RANGE{ "COUPON" };
				static inline const std::string CONSTANT_PREPAYMENT_PENALTY{ "CPP" };
				static inline const std::string CONSTANT_PREPAYMENT_RATE{ "CPR" };
				static inline const std::string CONSTANT_PREPAYMENT_YIELD{ "CPY" };
				static inline const std::string ISO_CURRENCY_CODE{ "CURRENCY" };
				static inline const std::string CUSTOM_START_END_DATE{ "CUSTOMDATE" };
				static inline const std::string GEOGRAPHICS_AND_RANGE{ "GEOG" };
				static inline const std::string VALUATION_DISCOUNT{ "HAIRCUT" };
				static inline const std::string FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE{ "HEP" };
				static inline const std::string INSURED{ "INSURED" };
				static inline const std::string YEAR_OR_YEAR_MONTH_OF_ISSUE{ "ISSUE" };
				static inline const std::string ISSUERS_TICKER{ "ISSUER" };
				static inline const std::string ISSUE_SIZE_RANGE{ "ISSUESIZE" };
				static inline const std::string LOOKBACK_DAYS{ "LOOKBACK" };
				static inline const std::string EXPLICIT_LOT_IDENTIFIER{ "LOT" };
				static inline const std::string LOT_VARIANCE{ "LOTVAR" };
				static inline const std::string MATURITY_YEAR_AND_MONTH{ "MAT" };
				static inline const std::string MATURITY_RANGE{ "MATURITY" };
				static inline const std::string MAXIMUM_SUBSTITUTIONS{ "MAXSUBS" };
				static inline const std::string PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE{ "MHP" };
				static inline const std::string MINIMUM_DENOMINATION{ "MINDNOM" };
				static inline const std::string MINIMUM_INCREMENT{ "MININCR" };
				static inline const std::string MINIMUM_QUANTITY{ "MINQTY" };
				static inline const std::string MONTHLY_PREPAYMENT_RATE{ "MPR" };
				static inline const std::string PAYMENT_FREQUENCY_CALENDAR{ "PAYFREQ" };
				static inline const std::string NUMBER_OF_PIECES{ "PIECES" };
				static inline const std::string POOLS_MAXIMUM{ "PMAX" };
				static inline const std::string PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE{ "PPC" };
				static inline const std::string POOLS_PER_LOT{ "PPL" };
				static inline const std::string POOLS_PER_MILLION{ "PPM" };
				static inline const std::string POOLS_PER_TRADE{ "PPT" };
				static inline const std::string PRICE_RANGE{ "PRICE" };
				static inline const std::string PRICING_FREQUENCY{ "PRICEFREQ" };
				static inline const std::string PRODUCTION_YEAR{ "PROD" };
				static inline const std::string CALL_PROTECTION{ "PROTECT" };
				static inline const std::string PERCENT_OF_BMA_PREPAYMENT_CURVE{ "PSA" };
				static inline const std::string PURPOSE{ "PURPOSE" };
				static inline const std::string BENCHMARK_PRICE_SOURCE{ "PXSOURCE" };
				static inline const std::string RATING_SOURCE_AND_RANGE{ "RATING" };
				static inline const std::string TYPE_OF_REDEMPTION{ "REDEMPTION" };
				static inline const std::string RESTRICTED{ "RESTRICTED" };
				static inline const std::string MARKET_SECTOR{ "SECTOR" };
				static inline const std::string SECURITY_TYPE_INCLUDED_OR_EXCLUDED{ "SECTYPE" };
				static inline const std::string SINGLE_MONTHLY_MORTALITY{ "SMM" };
				static inline const std::string STRUCTURE{ "STRUCT" };
				static inline const std::string SUBSTITUTIONS_FREQUENCY{ "SUBSFREQ" };
				static inline const std::string SUBSTITUTIONS_LEFT{ "SUBSLEFT" };
				static inline const std::string FREEFORM_TEXT{ "TEXT" };
				static inline const std::string TRADE_VARIANCE{ "TRDVAR" };
				static inline const std::string WEIGHTED_AVERAGE_COUPON{ "WAC" };
				static inline const std::string WEIGHTED_AVERAGE_LIFE_COUPON{ "WAL" };
				static inline const std::string WEIGHTED_AVERAGE_LOAN_AGE{ "WALA" };
				static inline const std::string WEIGHTED_AVERAGE_MATURITY{ "WAM" };
				static inline const std::string WHOLE_POOL{ "WHOLE" };
				static inline const std::string YIELD_RANGE{ "YIELD" };
				static inline const std::string AVERAGE_FICO_SCORE{ "AVFICO" };
				static inline const std::string AVERAGE_LOAN_SIZE{ "AVSIZE" };
				static inline const std::string MAXIMUM_LOAN_BALANCE{ "MAXBAL" };
				static inline const std::string POOL_IDENTIFIER{ "POOL" };
				static inline const std::string TYPE_OF_ROLL_TRADE{ "ROLLTYPE" };
				static inline const std::string REFERENCE_TO_ROLLING_OR_CLOSING_TRADE{ "REFTRADE" };
				static inline const std::string PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE{ "REFPRIN" };
				static inline const std::string INTEREST_OF_ROLLING_OR_CLOSING_TRADE{ "REFINT" };
				static inline const std::string AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET{ "AVAILQTY" };
				static inline const std::string BROKERS_SALES_CREDIT{ "BROKERCREDIT" };
				static inline const std::string OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS{ "INTERNALPX" };
				static inline const std::string OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS{ "INTERNALQTY" };
				static inline const std::string THE_MINIMUM_RESIDUAL_OFFER_QUANTITY{ "LEAVEQTY" };
				static inline const std::string MAXIMUM_ORDER_SIZE{ "MAXORDQTY" };
				static inline const std::string ORDER_QUANTITY_INCREMENT{ "ORDRINCR" };
				static inline const std::string PRIMARY_OR_SECONDARY_MARKET_INDICATOR{ "PRIMARY" };
				static inline const std::string BROKER_SALES_CREDIT_OVERRIDE{ "SALESCREDITOVR" };
				static inline const std::string TRADERS_CREDIT{ "TRADERCREDIT" };
				static inline const std::string DISCOUNT_RATE{ "DISCOUNT" };
				static inline const std::string YIELD_TO_MATURITY{ "YTM" };
			};

			// StipulationValue(234): STRING
			struct StipulationValue
			{
				static constexpr uint16_t tag{ 234 };
			};

			// YieldType(235): STRING
			struct YieldType
			{
				static constexpr uint16_t tag{ 235 };
				static inline const std::string AFTER_TAX_YIELD{ "AFTERTAX" };
				static inline const std::string ANNUAL_YIELD{ "ANNUAL" };
				static inline const std::string YIELD_AT_ISSUE{ "ATISSUE" };
				static inline const std::string YIELD_TO_AVG_MATURITY{ "AVGMATURITY" };
				static inline const std::string BOOK_YIELD{ "BOOK" };
				static inline const std::string YIELD_TO_NEXT_CALL{ "CALL" };
				static inline const std::string YIELD_CHANGE_SINCE_CLOSE{ "CHANGE" };
				static inline const std::string CLOSING_YIELD{ "CLOSE" };
				static inline const std::string COMPOUND_YIELD{ "COMPOUND" };
				static inline const std::string CURRENT_YIELD{ "CURRENT" };
				static inline const std::string GVNT_EQUIVALENT_YIELD{ "GOVTEQUIV" };
				static inline const std::string TRUE_GROSS_YIELD{ "GROSS" };
				static inline const std::string YIELD_WITH_INFLATION_ASSUMPTION{ "INFLATION" };
				static inline const std::string INVERSE_FLOATER_BOND_YIELD{ "INVERSEFLOATER" };
				static inline const std::string MOST_RECENT_CLOSING_YIELD{ "LASTCLOSE" };
				static inline const std::string CLOSING_YIELD_MOST_RECENT_MONTH{ "LASTMONTH" };
				static inline const std::string CLOSING_YIELD_MOST_RECENT_QUARTER{ "LASTQUARTER" };
				static inline const std::string CLOSING_YIELD_MOST_RECENT_YEAR{ "LASTYEAR" };
				static inline const std::string YIELD_TO_LONGEST_AVERAGE_LIFE{ "LONGAVGLIFE" };
				static inline const std::string MARK_TO_MARKET_YIELD{ "MARK" };
				static inline const std::string YIELD_TO_MATURITY{ "MATURITY" };
				static inline const std::string YIELD_TO_NEXT_REFUND{ "NEXTREFUND" };
				static inline const std::string OPEN_AVERAGE_YIELD{ "OPENAVG" };
				static inline const std::string PREVIOUS_CLOSE_YIELD{ "PREVCLOSE" };
				static inline const std::string PROCEEDS_YIELD{ "PROCEEDS" };
				static inline const std::string YIELD_TO_NEXT_PUT{ "PUT" };
				static inline const std::string SEMI_ANNUAL_YIELD{ "SEMIANNUAL" };
				static inline const std::string YIELD_TO_SHORTEST_AVERAGE_LIFE{ "SHORTAVGLIFE" };
				static inline const std::string SIMPLE_YIELD{ "SIMPLE" };
				static inline const std::string TAX_EQUIVALENT_YIELD{ "TAXEQUIV" };
				static inline const std::string YIELD_TO_TENDER_DATE{ "TENDER" };
				static inline const std::string TRUE_YIELD{ "TRUE" };
				static inline const std::string YIELD_VALUE_OF_1_32{ "VALUE1_32" };
				static inline const std::string YIELD_TO_WORST{ "WORST" };
			};

			// Yield(236): PERCENTAGE
			struct Yield
			{
				static constexpr uint16_t tag{ 236 };
			};

			// TotalTakedown(237): AMT
			struct TotalTakedown
			{
				static constexpr uint16_t tag{ 237 };
			};

			// Concession(238): AMT
			struct Concession
			{
				static constexpr uint16_t tag{ 238 };
			};

			// RepoCollateralSecurityType(239): INT
			struct RepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 239 };
			};

			// RedemptionDate(240): LOCALMKTDATE
			struct RedemptionDate
			{
				static constexpr uint16_t tag{ 240 };
			};

			// UnderlyingCouponPaymentDate(241): LOCALMKTDATE
			struct UnderlyingCouponPaymentDate
			{
				static constexpr uint16_t tag{ 241 };
			};

			// UnderlyingIssueDate(242): LOCALMKTDATE
			struct UnderlyingIssueDate
			{
				static constexpr uint16_t tag{ 242 };
			};

			// UnderlyingRepoCollateralSecurityType(243): INT
			struct UnderlyingRepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 243 };
			};

			// UnderlyingRepurchaseTerm(244): INT
			struct UnderlyingRepurchaseTerm
			{
				static constexpr uint16_t tag{ 244 };
			};

			// UnderlyingRepurchaseRate(245): PERCENTAGE
			struct UnderlyingRepurchaseRate
			{
				static constexpr uint16_t tag{ 245 };
			};

			// UnderlyingFactor(246): FLOAT
			struct UnderlyingFactor
			{
				static constexpr uint16_t tag{ 246 };
			};

			// UnderlyingRedemptionDate(247): LOCALMKTDATE
			struct UnderlyingRedemptionDate
			{
				static constexpr uint16_t tag{ 247 };
			};

			// LegCouponPaymentDate(248): LOCALMKTDATE
			struct LegCouponPaymentDate
			{
				static constexpr uint16_t tag{ 248 };
			};

			// LegIssueDate(249): LOCALMKTDATE
			struct LegIssueDate
			{
				static constexpr uint16_t tag{ 249 };
			};

			// LegRepoCollateralSecurityType(250): INT
			struct LegRepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 250 };
			};

			// LegRepurchaseTerm(251): INT
			struct LegRepurchaseTerm
			{
				static constexpr uint16_t tag{ 251 };
			};

			// LegRepurchaseRate(252): PERCENTAGE
			struct LegRepurchaseRate
			{
				static constexpr uint16_t tag{ 252 };
			};

			// LegFactor(253): FLOAT
			struct LegFactor
			{
				static constexpr uint16_t tag{ 253 };
			};

			// LegRedemptionDate(254): LOCALMKTDATE
			struct LegRedemptionDate
			{
				static constexpr uint16_t tag{ 254 };
			};

			// CreditRating(255): STRING
			struct CreditRating
			{
				static constexpr uint16_t tag{ 255 };
			};

			// UnderlyingCreditRating(256): STRING
			struct UnderlyingCreditRating
			{
				static constexpr uint16_t tag{ 256 };
			};

			// LegCreditRating(257): STRING
			struct LegCreditRating
			{
				static constexpr uint16_t tag{ 257 };
			};

			// TradedFlatSwitch(258): BOOLEAN
			struct TradedFlatSwitch
			{
				static constexpr uint16_t tag{ 258 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// BasisFeatureDate(259): LOCALMKTDATE
			struct BasisFeatureDate
			{
				static constexpr uint16_t tag{ 259 };
			};

			// BasisFeaturePrice(260): PRICE
			struct BasisFeaturePrice
			{
				static constexpr uint16_t tag{ 260 };
			};

			// MDReqID(262): STRING
			struct MDReqID
			{
				static constexpr uint16_t tag{ 262 };
			};

			// SubscriptionRequestType(263): CHAR
			struct SubscriptionRequestType
			{
				static constexpr uint16_t tag{ 263 };
				static constexpr char SNAPSHOT{ '0' };
				static constexpr char SNAPSHOT_PLUS_UPDATES{ '1' };
				static constexpr char DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST{ '2' };
			};

			// MarketDepth(264): INT
			struct MarketDepth
			{
				static constexpr uint16_t tag{ 264 };
			};

			// MDUpdateType(265): INT
			struct MDUpdateType
			{
				static constexpr uint16_t tag{ 265 };
				static constexpr int32_t FULL_REFRESH{ 0 };
				static constexpr int32_t INCREMENTAL_REFRESH{ 1 };
			};

			// AggregatedBook(266): BOOLEAN
			struct AggregatedBook
			{
				static constexpr uint16_t tag{ 266 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// NoMDEntryTypes(267): NUMINGROUP
			struct NoMDEntryTypes
			{
				static constexpr uint16_t tag{ 267 };
			};

			// NoMDEntries(268): NUMINGROUP
			struct NoMDEntries
			{
				static constexpr uint16_t tag{ 268 };
			};

			// MDEntryType(269): CHAR
			struct MDEntryType
			{
				static constexpr uint16_t tag{ 269 };
				static constexpr char BID{ '0' };
				static constexpr char OFFER{ '1' };
				static constexpr char TRADE{ '2' };
				static constexpr char INDEX_VALUE{ '3' };
				static constexpr char OPENING_PRICE{ '4' };
				static constexpr char CLOSING_PRICE{ '5' };
				static constexpr char SETTLEMENT_PRICE{ '6' };
				static constexpr char TRADING_SESSION_HIGH_PRICE{ '7' };
				static constexpr char TRADING_SESSION_LOW_PRICE{ '8' };
				static constexpr char TRADING_SESSION_VWAP_PRICE{ '9' };
				static constexpr char IMBALANCE{ 'A' };
				static constexpr char TRADE_VOLUME{ 'B' };
				static constexpr char OPEN_INTEREST{ 'C' };
				static constexpr char COMPOSITE_UNDERLYING_PRICE{ 'D' };
				static constexpr char SIMULATED_SELL_PRICE{ 'E' };
				static constexpr char SIMULATED_BUY_PRICE{ 'F' };
				static constexpr char MARGIN_RATE{ 'G' };
				static constexpr char MID_PRICE{ 'H' };
				static constexpr char EMPTY_BOOK{ 'J' };
				static constexpr char SETTLE_HIGH_PRICE{ 'K' };
				static constexpr char SETTLE_LOW_PRICE{ 'L' };
				static constexpr char PRIOR_SETTLE_PRICE{ 'M' };
				static constexpr char SESSION_HIGH_BID{ 'N' };
				static constexpr char SESSION_LOW_OFFER{ 'O' };
				static constexpr char EARLY_PRICES{ 'P' };
				static constexpr char AUCTION_CLEARING_PRICE{ 'Q' };
				static constexpr char SWAP_VALUE_FACTOR{ 'S' };
				static constexpr char DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS{ 'R' };
				static constexpr char CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS{ 'T' };
				static constexpr char DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS{ 'U' };
				static constexpr char CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS{ 'V' };
				static constexpr char RECOVERY_RATE{ 'Y' };
				static constexpr char RECOVERY_RATE_FOR_LONG{ 'Z' };
				static constexpr char RECOVERY_RATE_FOR_SHORT{ 'a' };
				static constexpr char FIXING_PRICE{ 'W' };
				static constexpr char CASH_RATE{ 'X' };
			};

			// MDEntryPx(270): PRICE
			struct MDEntryPx
			{
				static constexpr uint16_t tag{ 270 };
			};

			// MDEntrySize(271): QTY
			struct MDEntrySize
			{
				static constexpr uint16_t tag{ 271 };
			};

			// MDEntryDate(272): UTCDATEONLY
			struct MDEntryDate
			{
				static constexpr uint16_t tag{ 272 };
			};

			// MDEntryTime(273): UTCTIMEONLY
			struct MDEntryTime
			{
				static constexpr uint16_t tag{ 273 };
			};

			// TickDirection(274): CHAR
			struct TickDirection
			{
				static constexpr uint16_t tag{ 274 };
				static constexpr char PLUS_TICK{ '0' };
				static constexpr char ZERO_PLUS_TICK{ '1' };
				static constexpr char MINUS_TICK{ '2' };
				static constexpr char ZERO_MINUS_TICK{ '3' };
			};

			// MDMkt(275): EXCHANGE
			struct MDMkt
			{
				static constexpr uint16_t tag{ 275 };
			};

			// QuoteCondition(276): MULTIPLESTRINGVALUE
			struct QuoteCondition
			{
				static constexpr uint16_t tag{ 276 };
				static inline const std::string OPEN_ACTIVE{ "A" };
				static inline const std::string CLOSED_INACTIVE{ "B" };
				static inline const std::string EXCHANGE_BEST{ "C" };
				static inline const std::string CONSOLIDATED_BEST{ "D" };
				static inline const std::string LOCKED{ "E" };
				static inline const std::string CROSSED{ "F" };
				static inline const std::string DEPTH{ "G" };
				static inline const std::string FAST_TRADING{ "H" };
				static inline const std::string NON_FIRM{ "I" };
				static inline const std::string MANUAL_SLOW_QUOTE{ "L" };
				static inline const std::string OUTRIGHT_PRICE{ "J" };
				static inline const std::string IMPLIED_PRICE{ "K" };
				static inline const std::string DEPTH_ON_OFFER{ "M" };
				static inline const std::string DEPTH_ON_BID{ "N" };
				static inline const std::string CLOSING{ "O" };
				static inline const std::string NEWS_DISSEMINATION{ "P" };
				static inline const std::string TRADING_RANGE{ "Q" };
				static inline const std::string ORDER_INFLUX{ "R" };
				static inline const std::string DUE_TO_RELATED{ "S" };
				static inline const std::string NEWS_PENDING{ "T" };
				static inline const std::string ADDITIONAL_INFO{ "U" };
				static inline const std::string ADDITIONAL_INFO_DUE_TO_RELATED{ "V" };
				static inline const std::string RESUME{ "W" };
				static inline const std::string VIEW_OF_COMMON{ "X" };
				static inline const std::string VOLUME_ALERT{ "Y" };
				static inline const std::string ORDER_IMBALANCE{ "Z" };
				static inline const std::string EQUIPMENT_CHANGEOVER{ "a" };
				static inline const std::string NO_OPEN{ "b" };
				static inline const std::string REGULAR_ETH{ "c" };
				static inline const std::string AUTOMATIC_EXECUTION{ "d" };
				static inline const std::string AUTOMATIC_EXECUTION_ETH{ "e" };
				static inline const std::string FAST_MARKET_ETH{ "f " };
				static inline const std::string INACTIVE_ETH{ "g" };
				static inline const std::string ROTATION{ "h" };
				static inline const std::string ROTATION_ETH{ "i" };
				static inline const std::string HALT{ "j" };
				static inline const std::string HALT_ETH{ "k" };
				static inline const std::string DUE_TO_NEWS_DISSEMINATION{ "l" };
				static inline const std::string DUE_TO_NEWS_PENDING{ "m" };
				static inline const std::string TRADING_RESUME{ "n" };
				static inline const std::string OUT_OF_SEQUENCE{ "o" };
				static inline const std::string BID_SPECIALIST{ "p" };
				static inline const std::string OFFER_SPECIALIST{ "q" };
				static inline const std::string BID_OFFER_SPECIALIST{ "r" };
				static inline const std::string END_OF_DAY_SAM{ "s" };
				static inline const std::string FORBIDDEN_SAM{ "t" };
				static inline const std::string FROZEN_SAM{ "u" };
				static inline const std::string PREOPENING_SAM{ "v" };
				static inline const std::string OPENING_SAM{ "w" };
				static inline const std::string OPEN_SAM{ "x" };
				static inline const std::string SURVEILLANCE_SAM{ "y" };
				static inline const std::string SUSPENDED_SAM{ "z" };
				static inline const std::string RESERVED_SAM{ "0" };
				static inline const std::string NO_ACTIVE_SAM{ "1" };
				static inline const std::string RESTRICTED{ "2" };
				static inline const std::string REST_OF_BOOK_VWAP{ "3" };
				static inline const std::string BETTER_PRICES_IN_CONDITIONAL_ORDERS{ "4" };
				static inline const std::string MEDIAN_PRICE{ "5" };
				static inline const std::string FULL_CURVE{ "6" };
				static inline const std::string FLAT_CURVE{ "7" };
			};

			// TradeCondition(277): MULTIPLESTRINGVALUE
			struct TradeCondition
			{
				static constexpr uint16_t tag{ 277 };
				static inline const std::string CASH{ "A" };
				static inline const std::string AVERAGE_PRICE_TRADE{ "B" };
				static inline const std::string CASH_TRADE{ "C" };
				static inline const std::string NEXT_DAY{ "D" };
				static inline const std::string OPENING_REOPENING_TRADE_DETAIL{ "E" };
				static inline const std::string INTRADAY_TRADE_DETAIL{ "F" };
				static inline const std::string RULE_127_TRADE{ "G" };
				static inline const std::string RULE_155_TRADE{ "H" };
				static inline const std::string SOLD_LAST{ "I" };
				static inline const std::string NEXT_DAY_TRADE{ "J" };
				static inline const std::string OPENED{ "K" };
				static inline const std::string SELLER{ "L" };
				static inline const std::string SOLD{ "M" };
				static inline const std::string STOPPED_STOCK{ "N" };
				static inline const std::string IMBALANCE_MORE_BUYERS{ "P" };
				static inline const std::string IMBALANCE_MORE_SELLERS{ "Q" };
				static inline const std::string OPENING_PRICE{ "R" };
				static inline const std::string TRADES_RESULTING_FROM_MANUAL_SLOW_QUOTE{ "Y" };
				static inline const std::string TRADES_RESULTING_FROM_INTERMARKET_SWEEP{ "Z" };
				static inline const std::string BARGAIN_CONDITION{ "S" };
				static inline const std::string CONVERTED_PRICE_INDICATOR{ "T" };
				static inline const std::string EXCHANGE_LAST{ "U" };
				static inline const std::string FINAL_PRICE_OF_SESSION{ "V" };
				static inline const std::string EX_PIT{ "W" };
				static inline const std::string CROSSED_X{ "X" };
				static inline const std::string CANCEL{ "0" };
				static inline const std::string VOLUME_ONLY{ "a" };
				static inline const std::string DIRECT_PLUS{ "b" };
				static inline const std::string ACQUISITION{ "c" };
				static inline const std::string BUNCHED{ "d" };
				static inline const std::string DISTRIBUTION{ "e" };
				static inline const std::string BUNCHED_SALE{ "f" };
				static inline const std::string SPLIT_TRADE{ "g" };
				static inline const std::string CANCEL_STOPPED{ "h" };
				static inline const std::string CANCEL_ETH{ "i" };
				static inline const std::string CANCEL_STOPPED_ETH{ "j" };
				static inline const std::string OUT_OF_SEQUENCE_ETH{ "k" };
				static inline const std::string CANCEL_LAST_ETH{ "l" };
				static inline const std::string SOLD_LAST_SALE_ETH{ "m" };
				static inline const std::string CANCEL_LAST{ "n" };
				static inline const std::string SOLD_LAST_SALE{ "o" };
				static inline const std::string CANCEL_OPEN{ "p" };
				static inline const std::string CANCEL_OPEN_ETH{ "q" };
				static inline const std::string OPENED_SALE_ETH{ "r" };
				static inline const std::string CANCEL_ONLY{ "s" };
				static inline const std::string CANCEL_ONLY_ETH{ "t" };
				static inline const std::string LATE_OPEN_ETH{ "u" };
				static inline const std::string AUTO_EXECUTION_ETH{ "v" };
				static inline const std::string REOPEN{ "w" };
				static inline const std::string REOPEN_ETH{ "x" };
				static inline const std::string ADJUSTED{ "y" };
				static inline const std::string ADJUSTED_ETH{ "z" };
				static inline const std::string SPREAD{ "AA" };
				static inline const std::string SPREAD_ETH{ "AB" };
				static inline const std::string STRADDLE{ "AC" };
				static inline const std::string STRADDLE_ETH{ "AD" };
				static inline const std::string STOPPED{ "AE" };
				static inline const std::string STOPPED_ETH{ "AF" };
				static inline const std::string REGULAR_ETH{ "AG" };
				static inline const std::string COMBO{ "AH" };
				static inline const std::string COMBO_ETH{ "AI" };
				static inline const std::string OFFICIAL_CLOSING_PRICE{ "AJ" };
				static inline const std::string PRIOR_REFERENCE_PRICE{ "AK" };
				static inline const std::string STOPPED_SOLD_LAST{ "AL" };
				static inline const std::string STOPPED_OUT_OF_SEQUENCE{ "AM" };
				static inline const std::string OFFICAL_CLOSING_PRICE{ "AN" };
				static inline const std::string CROSSED_AO{ "AO" };
				static inline const std::string FAST_MARKET{ "AP" };
				static inline const std::string AUTOMATIC_EXECUTION{ "AQ" };
				static inline const std::string FORM_T{ "AR" };
				static inline const std::string BASKET_INDEX{ "AS" };
				static inline const std::string BURST_BASKET{ "AT" };
				static inline const std::string IMPLIED_TRADE{ "1" };
				static inline const std::string OUTSIDE_SPREAD{ "AV" };
				static inline const std::string MARKETPLACE_ENTERED_TRADE{ "2" };
				static inline const std::string MULT_ASSET_CLASS_MULTILEG_TRADE{ "3" };
				static inline const std::string MULTILEG_TO_MULTILEG_TRADE{ "4" };
			};

			// MDEntryID(278): STRING
			struct MDEntryID
			{
				static constexpr uint16_t tag{ 278 };
			};

			// MDUpdateAction(279): CHAR
			struct MDUpdateAction
			{
				static constexpr uint16_t tag{ 279 };
				static constexpr char NEW{ '0' };
				static constexpr char CHANGE{ '1' };
				static constexpr char DELETE{ '2' };
				static constexpr char DELETE_THRU{ '3' };
				static constexpr char DELETE_FROM{ '4' };
				static constexpr char OVERLAY{ '5' };
			};

			// MDEntryRefID(280): STRING
			struct MDEntryRefID
			{
				static constexpr uint16_t tag{ 280 };
			};

			// MDReqRejReason(281): CHAR
			struct MDReqRejReason
			{
				static constexpr uint16_t tag{ 281 };
				static constexpr char UNKNOWN_SYMBOL{ '0' };
				static constexpr char DUPLICATE_MDREQID{ '1' };
				static constexpr char INSUFFICIENT_BANDWIDTH{ '2' };
				static constexpr char INSUFFICIENT_PERMISSIONS{ '3' };
				static constexpr char UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE{ '4' };
				static constexpr char UNSUPPORTED_MARKETDEPTH{ '5' };
				static constexpr char UNSUPPORTED_MDUPDATETYPE{ '6' };
				static constexpr char UNSUPPORTED_AGGREGATEDBOOK{ '7' };
				static constexpr char UNSUPPORTED_MDENTRYTYPE{ '8' };
				static constexpr char UNSUPPORTED_TRADINGSESSIONID{ '9' };
				static constexpr char UNSUPPORTED_SCOPE{ 'A' };
				static constexpr char UNSUPPORTED_OPENCLOSESETTLEFLAG{ 'B' };
				static constexpr char UNSUPPORTED_MDIMPLICITDELETE{ 'C' };
				static constexpr char INSUFFICIENT_CREDIT{ 'D' };
			};

			// MDEntryOriginator(282): STRING
			struct MDEntryOriginator
			{
				static constexpr uint16_t tag{ 282 };
			};

			// LocationID(283): STRING
			struct LocationID
			{
				static constexpr uint16_t tag{ 283 };
			};

			// DeskID(284): STRING
			struct DeskID
			{
				static constexpr uint16_t tag{ 284 };
			};

			// DeleteReason(285): CHAR
			struct DeleteReason
			{
				static constexpr uint16_t tag{ 285 };
				static constexpr char CANCELLATION{ '0' };
				static constexpr char ERROR{ '1' };
			};

			// OpenCloseSettlFlag(286): MULTIPLECHARVALUE
			struct OpenCloseSettlFlag
			{
				static constexpr uint16_t tag{ 286 };
				static inline const std::string DAILY_OPEN{ "0" };
				static inline const std::string SESSION_OPEN{ "1" };
				static inline const std::string DELIVERY_SETTLEMENT_ENTRY{ "2" };
				static inline const std::string EXPECTED_ENTRY{ "3" };
				static inline const std::string ENTRY_FROM_PREVIOUS_BUSINESS_DAY{ "4" };
				static inline const std::string THEORETICAL_PRICE_VALUE{ "5" };
			};

			// SellerDays(287): INT
			struct SellerDays
			{
				static constexpr uint16_t tag{ 287 };
			};

			// MDEntryBuyer(288): STRING
			struct MDEntryBuyer
			{
				static constexpr uint16_t tag{ 288 };
			};

			// MDEntrySeller(289): STRING
			struct MDEntrySeller
			{
				static constexpr uint16_t tag{ 289 };
			};

			// MDEntryPositionNo(290): INT
			struct MDEntryPositionNo
			{
				static constexpr uint16_t tag{ 290 };
			};

			// FinancialStatus(291): MULTIPLECHARVALUE
			struct FinancialStatus
			{
				static constexpr uint16_t tag{ 291 };
				static inline const std::string BANKRUPT{ "1" };
				static inline const std::string PENDING_DELISTING{ "2" };
				static inline const std::string RESTRICTED{ "3" };
			};

			// CorporateAction(292): MULTIPLECHARVALUE
			struct CorporateAction
			{
				static constexpr uint16_t tag{ 292 };
				static inline const std::string EX_DIVIDEND{ "A" };
				static inline const std::string EX_DISTRIBUTION{ "B" };
				static inline const std::string EX_RIGHTS{ "C" };
				static inline const std::string NEW{ "D" };
				static inline const std::string EX_INTEREST{ "E" };
				static inline const std::string CASH_DIVIDEND{ "F" };
				static inline const std::string STOCK_DIVIDEND{ "G" };
				static inline const std::string NON_INTEGER_STOCK_SPLIT{ "H" };
				static inline const std::string REVERSE_STOCK_SPLIT{ "I" };
				static inline const std::string STANDARD_INTEGER_STOCK_SPLIT{ "J" };
				static inline const std::string POSITION_CONSOLIDATION{ "K" };
				static inline const std::string LIQUIDATION_REORGANIZATION{ "L" };
				static inline const std::string MERGER_REORGANIZATION{ "M" };
				static inline const std::string RIGHTS_OFFERING{ "N" };
				static inline const std::string SHAREHOLDER_MEETING{ "O" };
				static inline const std::string SPINOFF{ "P" };
				static inline const std::string TENDER_OFFER{ "Q" };
				static inline const std::string WARRANT{ "R" };
				static inline const std::string SPECIAL_ACTION{ "S" };
				static inline const std::string SYMBOL_CONVERSION{ "T" };
				static inline const std::string CUSIP{ "U" };
				static inline const std::string LEAP_ROLLOVER{ "V" };
				static inline const std::string SUCCESSION_EVENT{ "W" };
			};

			// DefBidSize(293): QTY
			struct DefBidSize
			{
				static constexpr uint16_t tag{ 293 };
			};

			// DefOfferSize(294): QTY
			struct DefOfferSize
			{
				static constexpr uint16_t tag{ 294 };
			};

			// NoQuoteEntries(295): NUMINGROUP
			struct NoQuoteEntries
			{
				static constexpr uint16_t tag{ 295 };
			};

			// NoQuoteSets(296): NUMINGROUP
			struct NoQuoteSets
			{
				static constexpr uint16_t tag{ 296 };
			};

			// QuoteStatus(297): INT
			struct QuoteStatus
			{
				static constexpr uint16_t tag{ 297 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t CANCEL_FOR_SYMBOL{ 1 };
				static constexpr int32_t PENDING{ 10 };
				static constexpr int32_t PASS{ 11 };
				static constexpr int32_t LOCKED_MARKET_WARNING{ 12 };
				static constexpr int32_t CROSS_MARKET_WARNING{ 13 };
				static constexpr int32_t CANCELED_DUE_TO_LOCK_MARKET{ 14 };
				static constexpr int32_t CANCELED_DUE_TO_CROSS_MARKET{ 15 };
				static constexpr int32_t CANCELED_FOR_SECURITY_TYPE{ 2 };
				static constexpr int32_t CANCELED_FOR_UNDERLYING{ 3 };
				static constexpr int32_t CANCELED_ALL{ 4 };
				static constexpr int32_t REJECTED{ 5 };
				static constexpr int32_t REMOVED_FROM_MARKET{ 6 };
				static constexpr int32_t EXPIRED{ 7 };
				static constexpr int32_t QUERY{ 8 };
				static constexpr int32_t QUOTE_NOT_FOUND{ 9 };
				static constexpr int32_t ACTIVE{ 16 };
				static constexpr int32_t CANCELED{ 17 };
				static constexpr int32_t UNSOLICITED_QUOTE_REPLENISHMENT{ 18 };
				static constexpr int32_t PENDING_END_TRADE{ 19 };
				static constexpr int32_t TOO_LATE_TO_END{ 20 };
			};

			// QuoteCancelType(298): INT
			struct QuoteCancelType
			{
				static constexpr uint16_t tag{ 298 };
				static constexpr int32_t CANCEL_FOR_ONE_OR_MORE_SECURITIES{ 1 };
				static constexpr int32_t CANCEL_FOR_SECURITY_TYPE{ 2 };
				static constexpr int32_t CANCEL_FOR_UNDERLYING_SECURITY{ 3 };
				static constexpr int32_t CANCEL_ALL_QUOTES{ 4 };
				static constexpr int32_t CANCEL_QUOTE_SPECIFIED_IN_QUOTEID{ 5 };
				static constexpr int32_t CANCEL_BY_QUOTETYPE{ 6 };
				static constexpr int32_t CANCEL_FOR_SECURITY_ISSUER{ 7 };
				static constexpr int32_t CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY{ 8 };
			};

			// QuoteEntryID(299): STRING
			struct QuoteEntryID
			{
				static constexpr uint16_t tag{ 299 };
			};

			// QuoteRejectReason(300): INT
			struct QuoteRejectReason
			{
				static constexpr uint16_t tag{ 300 };
				static constexpr int32_t UNKNOWN_SYMBOL{ 1 };
				static constexpr int32_t EXCHANGE{ 2 };
				static constexpr int32_t QUOTE_REQUEST_EXCEEDS_LIMIT{ 3 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t UNKNOWN_QUOTE{ 5 };
				static constexpr int32_t DUPLICATE_QUOTE{ 6 };
				static constexpr int32_t INVALID_BID_ASK_SPREAD{ 7 };
				static constexpr int32_t INVALID_PRICE{ 8 };
				static constexpr int32_t NOT_AUTHORIZED_TO_QUOTE_SECURITY{ 9 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t PRICE_EXCEEDS_CURRENT_PRICE_BAND{ 10 };
				static constexpr int32_t QUOTE_LOCKED{ 11 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITY_ISSUER{ 12 };
				static constexpr int32_t INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY{ 13 };
			};

			// QuoteResponseLevel(301): INT
			struct QuoteResponseLevel
			{
				static constexpr uint16_t tag{ 301 };
				static constexpr int32_t NO_ACKNOWLEDGEMENT{ 0 };
				static constexpr int32_t ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES{ 1 };
				static constexpr int32_t ACKNOWLEDGE_EACH_QUOTE_MESSAGE{ 2 };
				static constexpr int32_t SUMMARY_ACKNOWLEDGEMENT{ 3 };
			};

			// QuoteSetID(302): STRING
			struct QuoteSetID
			{
				static constexpr uint16_t tag{ 302 };
			};

			// QuoteRequestType(303): INT
			struct QuoteRequestType
			{
				static constexpr uint16_t tag{ 303 };
				static constexpr int32_t MANUAL{ 1 };
				static constexpr int32_t AUTOMATIC{ 2 };
			};

			// TotNoQuoteEntries(304): INT
			struct TotNoQuoteEntries
			{
				static constexpr uint16_t tag{ 304 };
			};

			// UnderlyingSecurityIDSource(305): STRING
			struct UnderlyingSecurityIDSource
			{
				static constexpr uint16_t tag{ 305 };
			};

			// UnderlyingIssuer(306): STRING
			struct UnderlyingIssuer
			{
				static constexpr uint16_t tag{ 306 };
			};

			// UnderlyingSecurityDesc(307): STRING
			struct UnderlyingSecurityDesc
			{
				static constexpr uint16_t tag{ 307 };
			};

			// UnderlyingSecurityExchange(308): EXCHANGE
			struct UnderlyingSecurityExchange
			{
				static constexpr uint16_t tag{ 308 };
			};

			// UnderlyingSecurityID(309): STRING
			struct UnderlyingSecurityID
			{
				static constexpr uint16_t tag{ 309 };
			};

			// UnderlyingSecurityType(310): STRING
			struct UnderlyingSecurityType
			{
				static constexpr uint16_t tag{ 310 };
			};

			// UnderlyingSymbol(311): STRING
			struct UnderlyingSymbol
			{
				static constexpr uint16_t tag{ 311 };
			};

			// UnderlyingSymbolSfx(312): STRING
			struct UnderlyingSymbolSfx
			{
				static constexpr uint16_t tag{ 312 };
			};

			// UnderlyingMaturityMonthYear(313): MONTHYEAR
			struct UnderlyingMaturityMonthYear
			{
				static constexpr uint16_t tag{ 313 };
			};

			// UnderlyingMaturityDay(314): DAYOFMONTH
			struct UnderlyingMaturityDay
			{
				static constexpr uint16_t tag{ 314 };
			};

			// UnderlyingPutOrCall(315): INT
			struct UnderlyingPutOrCall
			{
				static constexpr uint16_t tag{ 315 };
			};

			// UnderlyingStrikePrice(316): PRICE
			struct UnderlyingStrikePrice
			{
				static constexpr uint16_t tag{ 316 };
			};

			// UnderlyingOptAttribute(317): CHAR
			struct UnderlyingOptAttribute
			{
				static constexpr uint16_t tag{ 317 };
			};

			// UnderlyingCurrency(318): CURRENCY
			struct UnderlyingCurrency
			{
				static constexpr uint16_t tag{ 318 };
			};

			// RatioQty(319): QTY
			struct RatioQty
			{
				static constexpr uint16_t tag{ 319 };
			};

			// SecurityReqID(320): STRING
			struct SecurityReqID
			{
				static constexpr uint16_t tag{ 320 };
			};

			// SecurityRequestType(321): INT
			struct SecurityRequestType
			{
				static constexpr uint16_t tag{ 321 };
				static constexpr int32_t REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS{ 0 };
				static constexpr int32_t REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED{ 1 };
				static constexpr int32_t REQUEST_LIST_SECURITY_TYPES{ 2 };
				static constexpr int32_t REQUEST_LIST_SECURITIES{ 3 };
				static constexpr int32_t SYMBOL{ 4 };
				static constexpr int32_t SECURITYTYPE_AND_OR_CFICODE{ 5 };
				static constexpr int32_t PRODUCT{ 6 };
				static constexpr int32_t TRADINGSESSIONID{ 7 };
				static constexpr int32_t ALL_SECURITIES{ 8 };
				static constexpr int32_t MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID{ 9 };
			};

			// SecurityResponseID(322): STRING
			struct SecurityResponseID
			{
				static constexpr uint16_t tag{ 322 };
			};

			// SecurityResponseType(323): INT
			struct SecurityResponseType
			{
				static constexpr uint16_t tag{ 323 };
				static constexpr int32_t ACCEPT_SECURITY_PROPOSAL_AS_IS{ 1 };
				static constexpr int32_t ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE{ 2 };
				static constexpr int32_t LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST{ 3 };
				static constexpr int32_t LIST_OF_SECURITIES_RETURNED_PER_REQUEST{ 4 };
				static constexpr int32_t REJECT_SECURITY_PROPOSAL{ 5 };
				static constexpr int32_t CANNOT_MATCH_SELECTION_CRITERIA{ 6 };
			};

			// SecurityStatusReqID(324): STRING
			struct SecurityStatusReqID
			{
				static constexpr uint16_t tag{ 324 };
			};

			// UnsolicitedIndicator(325): BOOLEAN
			struct UnsolicitedIndicator
			{
				static constexpr uint16_t tag{ 325 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// SecurityTradingStatus(326): INT
			struct SecurityTradingStatus
			{
				static constexpr uint16_t tag{ 326 };
				static constexpr int32_t OPENING_DELAY{ 1 };
				static constexpr int32_t MARKET_ON_CLOSE_IMBALANCE_SELL{ 10 };
				static constexpr int32_t _11{ 11 };
				static constexpr int32_t NO_MARKET_IMBALANCE{ 12 };
				static constexpr int32_t NO_MARKET_ON_CLOSE_IMBALANCE{ 13 };
				static constexpr int32_t ITS_PRE_OPENING{ 14 };
				static constexpr int32_t NEW_PRICE_INDICATION{ 15 };
				static constexpr int32_t TRADE_DISSEMINATION_TIME{ 16 };
				static constexpr int32_t READY_TO_TRADE{ 17 };
				static constexpr int32_t NOT_AVAILABLE_FOR_TRADING{ 18 };
				static constexpr int32_t NOT_TRADED_ON_THIS_MARKET{ 19 };
				static constexpr int32_t TRADING_HALT{ 2 };
				static constexpr int32_t UNKNOWN_OR_INVALID{ 20 };
				static constexpr int32_t PRE_OPEN{ 21 };
				static constexpr int32_t OPENING_ROTATION{ 22 };
				static constexpr int32_t FAST_MARKET{ 23 };
				static constexpr int32_t RESUME{ 3 };
				static constexpr int32_t NO_OPEN{ 4 };
				static constexpr int32_t PRICE_INDICATION{ 5 };
				static constexpr int32_t TRADING_RANGE_INDICATION{ 6 };
				static constexpr int32_t MARKET_IMBALANCE_BUY{ 7 };
				static constexpr int32_t MARKET_IMBALANCE_SELL{ 8 };
				static constexpr int32_t MARKET_ON_CLOSE_IMBALANCE_BUY{ 9 };
				static constexpr int32_t PRE_CROSS{ 24 };
				static constexpr int32_t CROSS{ 25 };
				static constexpr int32_t POST_CLOSE{ 26 };
			};

			// HaltReasonInt(327): INT
			struct HaltReasonInt
			{
				static constexpr uint16_t tag{ 327 };
				static constexpr int32_t NEWS_DISSEMINATION{ 0 };
				static constexpr int32_t ORDER_INFLUX{ 1 };
				static constexpr int32_t ORDER_IMBALANCE{ 2 };
				static constexpr int32_t ADDITIONAL_INFORMATION{ 3 };
				static constexpr int32_t NEWS_PENDING{ 4 };
				static constexpr int32_t EQUIPMENT_CHANGEOVER{ 5 };
			};

			// InViewOfCommon(328): BOOLEAN
			struct InViewOfCommon
			{
				static constexpr uint16_t tag{ 328 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// DueToRelated(329): BOOLEAN
			struct DueToRelated
			{
				static constexpr uint16_t tag{ 329 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// BuyVolume(330): QTY
			struct BuyVolume
			{
				static constexpr uint16_t tag{ 330 };
			};

			// SellVolume(331): QTY
			struct SellVolume
			{
				static constexpr uint16_t tag{ 331 };
			};

			// HighPx(332): PRICE
			struct HighPx
			{
				static constexpr uint16_t tag{ 332 };
			};

			// LowPx(333): PRICE
			struct LowPx
			{
				static constexpr uint16_t tag{ 333 };
			};

			// Adjustment(334): INT
			struct Adjustment
			{
				static constexpr uint16_t tag{ 334 };
				static constexpr int32_t CANCEL{ 1 };
				static constexpr int32_t ERROR{ 2 };
				static constexpr int32_t CORRECTION{ 3 };
			};

			// TradSesReqID(335): STRING
			struct TradSesReqID
			{
				static constexpr uint16_t tag{ 335 };
			};

			// TradingSessionID(336): STRING
			struct TradingSessionID
			{
				static constexpr uint16_t tag{ 336 };
				static inline const std::string DAY{ "1" };
				static inline const std::string HALFDAY{ "2" };
				static inline const std::string MORNING{ "3" };
				static inline const std::string AFTERNOON{ "4" };
				static inline const std::string EVENING{ "5" };
				static inline const std::string AFTER_HOURS{ "6" };
			};

			// ContraTrader(337): STRING
			struct ContraTrader
			{
				static constexpr uint16_t tag{ 337 };
			};

			// TradSesMethod(338): INT
			struct TradSesMethod
			{
				static constexpr uint16_t tag{ 338 };
				static constexpr int32_t ELECTRONIC{ 1 };
				static constexpr int32_t OPEN_OUTCRY{ 2 };
				static constexpr int32_t TWO_PARTY{ 3 };
			};

			// TradSesMode(339): INT
			struct TradSesMode
			{
				static constexpr uint16_t tag{ 339 };
				static constexpr int32_t TESTING{ 1 };
				static constexpr int32_t SIMULATED{ 2 };
				static constexpr int32_t PRODUCTION{ 3 };
			};

			// TradSesStatus(340): INT
			struct TradSesStatus
			{
				static constexpr uint16_t tag{ 340 };
				static constexpr int32_t UNKNOWN{ 0 };
				static constexpr int32_t HALTED{ 1 };
				static constexpr int32_t OPEN{ 2 };
				static constexpr int32_t CLOSED{ 3 };
				static constexpr int32_t PRE_OPEN{ 4 };
				static constexpr int32_t PRE_CLOSE{ 5 };
				static constexpr int32_t REQUEST_REJECTED{ 6 };
			};

			// TradSesStartTime(341): UTCTIMESTAMP
			struct TradSesStartTime
			{
				static constexpr uint16_t tag{ 341 };
			};

			// TradSesOpenTime(342): UTCTIMESTAMP
			struct TradSesOpenTime
			{
				static constexpr uint16_t tag{ 342 };
			};

			// TradSesPreCloseTime(343): UTCTIMESTAMP
			struct TradSesPreCloseTime
			{
				static constexpr uint16_t tag{ 343 };
			};

			// TradSesCloseTime(344): UTCTIMESTAMP
			struct TradSesCloseTime
			{
				static constexpr uint16_t tag{ 344 };
			};

			// TradSesEndTime(345): UTCTIMESTAMP
			struct TradSesEndTime
			{
				static constexpr uint16_t tag{ 345 };
			};

			// NumberOfOrders(346): INT
			struct NumberOfOrders
			{
				static constexpr uint16_t tag{ 346 };
			};

			// MessageEncoding(347): STRING
			struct MessageEncoding
			{
				static constexpr uint16_t tag{ 347 };
			};

			// EncodedIssuerLen(348): LENGTH
			struct EncodedIssuerLen
			{
				static constexpr uint16_t tag{ 348 };
			};

			// EncodedIssuer(349): DATA
			struct EncodedIssuer
			{
				static constexpr uint16_t tag{ 349 };
			};

			// EncodedSecurityDescLen(350): LENGTH
			struct EncodedSecurityDescLen
			{
				static constexpr uint16_t tag{ 350 };
			};

			// EncodedSecurityDesc(351): DATA
			struct EncodedSecurityDesc
			{
				static constexpr uint16_t tag{ 351 };
			};

			// EncodedListExecInstLen(352): LENGTH
			struct EncodedListExecInstLen
			{
				static constexpr uint16_t tag{ 352 };
			};

			// EncodedListExecInst(353): DATA
			struct EncodedListExecInst
			{
				static constexpr uint16_t tag{ 353 };
			};

			// EncodedTextLen(354): LENGTH
			struct EncodedTextLen
			{
				static constexpr uint16_t tag{ 354 };
			};

			// EncodedText(355): DATA
			struct EncodedText
			{
				static constexpr uint16_t tag{ 355 };
			};

			// EncodedSubjectLen(356): LENGTH
			struct EncodedSubjectLen
			{
				static constexpr uint16_t tag{ 356 };
			};

			// EncodedSubject(357): DATA
			struct EncodedSubject
			{
				static constexpr uint16_t tag{ 357 };
			};

			// EncodedHeadlineLen(358): LENGTH
			struct EncodedHeadlineLen
			{
				static constexpr uint16_t tag{ 358 };
			};

			// EncodedHeadline(359): DATA
			struct EncodedHeadline
			{
				static constexpr uint16_t tag{ 359 };
			};

			// EncodedAllocTextLen(360): LENGTH
			struct EncodedAllocTextLen
			{
				static constexpr uint16_t tag{ 360 };
			};

			// EncodedAllocText(361): DATA
			struct EncodedAllocText
			{
				static constexpr uint16_t tag{ 361 };
			};

			// EncodedUnderlyingIssuerLen(362): LENGTH
			struct EncodedUnderlyingIssuerLen
			{
				static constexpr uint16_t tag{ 362 };
			};

			// EncodedUnderlyingIssuer(363): DATA
			struct EncodedUnderlyingIssuer
			{
				static constexpr uint16_t tag{ 363 };
			};

			// EncodedUnderlyingSecurityDescLen(364): LENGTH
			struct EncodedUnderlyingSecurityDescLen
			{
				static constexpr uint16_t tag{ 364 };
			};

			// EncodedUnderlyingSecurityDesc(365): DATA
			struct EncodedUnderlyingSecurityDesc
			{
				static constexpr uint16_t tag{ 365 };
			};

			// AllocPrice(366): PRICE
			struct AllocPrice
			{
				static constexpr uint16_t tag{ 366 };
			};

			// QuoteSetValidUntilTime(367): UTCTIMESTAMP
			struct QuoteSetValidUntilTime
			{
				static constexpr uint16_t tag{ 367 };
			};

			// QuoteEntryRejectReason(368): INT
			struct QuoteEntryRejectReason
			{
				static constexpr uint16_t tag{ 368 };
			};

			// LastMsgSeqNumProcessed(369): SEQNUM
			struct LastMsgSeqNumProcessed
			{
				static constexpr uint16_t tag{ 369 };
			};

			// OnBehalfOfSendingTime(370): UTCTIMESTAMP
			struct OnBehalfOfSendingTime
			{
				static constexpr uint16_t tag{ 370 };
			};

			// RefTagID(371): INT
			struct RefTagID
			{
				static constexpr uint16_t tag{ 371 };
			};

			// RefMsgType(372): STRING
			struct RefMsgType
			{
				static constexpr uint16_t tag{ 372 };
			};

			// SessionRejectReason(373): INT
			struct SessionRejectReason
			{
				static constexpr uint16_t tag{ 373 };
				static constexpr int32_t INVALID_TAG_NUMBER{ 0 };
				static constexpr int32_t REQUIRED_TAG_MISSING{ 1 };
				static constexpr int32_t SENDINGTIME_ACCURACY_PROBLEM{ 10 };
				static constexpr int32_t INVALID_MSGTYPE{ 11 };
				static constexpr int32_t XML_VALIDATION_ERROR{ 12 };
				static constexpr int32_t TAG_APPEARS_MORE_THAN_ONCE{ 13 };
				static constexpr int32_t TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER{ 14 };
				static constexpr int32_t REPEATING_GROUP_FIELDS_OUT_OF_ORDER{ 15 };
				static constexpr int32_t INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP{ 16 };
				static constexpr int32_t NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER{ 17 };
				static constexpr int32_t TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE{ 2 };
				static constexpr int32_t UNDEFINED_TAG{ 3 };
				static constexpr int32_t TAG_SPECIFIED_WITHOUT_A_VALUE{ 4 };
				static constexpr int32_t VALUE_IS_INCORRECT{ 5 };
				static constexpr int32_t INCORRECT_DATA_FORMAT_FOR_VALUE{ 6 };
				static constexpr int32_t DECRYPTION_PROBLEM{ 7 };
				static constexpr int32_t SIGNATURE_PROBLEM{ 8 };
				static constexpr int32_t COMPID_PROBLEM{ 9 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t INVALID_UNSUPPORTED_APPLICATION_VERSION{ 18 };
			};

			// BidRequestTransType(374): CHAR
			struct BidRequestTransType
			{
				static constexpr uint16_t tag{ 374 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NO{ 'N' };
			};

			// ContraBroker(375): STRING
			struct ContraBroker
			{
				static constexpr uint16_t tag{ 375 };
			};

			// ComplianceID(376): STRING
			struct ComplianceID
			{
				static constexpr uint16_t tag{ 376 };
			};

			// SolicitedFlag(377): BOOLEAN
			struct SolicitedFlag
			{
				static constexpr uint16_t tag{ 377 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// ExecRestatementReason(378): INT
			struct ExecRestatementReason
			{
				static constexpr uint16_t tag{ 378 };
				static constexpr int32_t GT_CORPORATE_ACTION{ 0 };
				static constexpr int32_t GT_RENEWAL{ 1 };
				static constexpr int32_t WAREHOUSE_RECAP{ 10 };
				static constexpr int32_t VERBAL_CHANGE{ 2 };
				static constexpr int32_t REPRICING_OF_ORDER{ 3 };
				static constexpr int32_t BROKER_OPTION{ 4 };
				static constexpr int32_t PARTIAL_DECLINE_OF_ORDERQTY{ 5 };
				static constexpr int32_t CANCEL_ON_TRADING_HALT{ 6 };
				static constexpr int32_t CANCEL_ON_SYSTEM_FAILURE{ 7 };
				static constexpr int32_t MARKET{ 8 };
				static constexpr int32_t CANCELED_NOT_BEST{ 9 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t PEG_REFRESH{ 11 };
			};

			// BusinessRejectRefID(379): STRING
			struct BusinessRejectRefID
			{
				static constexpr uint16_t tag{ 379 };
			};

			// BusinessRejectReason(380): INT
			struct BusinessRejectReason
			{
				static constexpr uint16_t tag{ 380 };
				static constexpr int32_t OTHER{ 0 };
				static constexpr int32_t UNKNOWN_ID{ 1 };
				static constexpr int32_t UNKNOWN_SECURITY{ 2 };
				static constexpr int32_t UNSUPPORTED_MESSAGE_TYPE{ 3 };
				static constexpr int32_t APPLICATION_NOT_AVAILABLE{ 4 };
				static constexpr int32_t CONDITIONALLY_REQUIRED_FIELD_MISSING{ 5 };
				static constexpr int32_t NOT_AUTHORIZED{ 6 };
				static constexpr int32_t DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME{ 7 };
				static constexpr int32_t INVALID_PRICE_INCREMENT{ 18 };
			};

			// GrossTradeAmt(381): AMT
			struct GrossTradeAmt
			{
				static constexpr uint16_t tag{ 381 };
			};

			// NoContraBrokers(382): NUMINGROUP
			struct NoContraBrokers
			{
				static constexpr uint16_t tag{ 382 };
			};

			// MaxMessageSize(383): LENGTH
			struct MaxMessageSize
			{
				static constexpr uint16_t tag{ 383 };
			};

			// NoMsgTypes(384): NUMINGROUP
			struct NoMsgTypes
			{
				static constexpr uint16_t tag{ 384 };
			};

			// MsgDirection(385): CHAR
			struct MsgDirection
			{
				static constexpr uint16_t tag{ 385 };
				static constexpr char RECEIVE{ 'R' };
				static constexpr char SEND{ 'S' };
			};

			// NoTradingSessions(386): NUMINGROUP
			struct NoTradingSessions
			{
				static constexpr uint16_t tag{ 386 };
			};

			// TotalVolumeTraded(387): QTY
			struct TotalVolumeTraded
			{
				static constexpr uint16_t tag{ 387 };
			};

			// DiscretionInst(388): CHAR
			struct DiscretionInst
			{
				static constexpr uint16_t tag{ 388 };
				static constexpr char RELATED_TO_DISPLAYED_PRICE{ '0' };
				static constexpr char RELATED_TO_MARKET_PRICE{ '1' };
				static constexpr char RELATED_TO_PRIMARY_PRICE{ '2' };
				static constexpr char RELATED_TO_LOCAL_PRIMARY_PRICE{ '3' };
				static constexpr char RELATED_TO_MIDPOINT_PRICE{ '4' };
				static constexpr char RELATED_TO_LAST_TRADE_PRICE{ '5' };
				static constexpr char RELATED_TO_VWAP{ '6' };
				static constexpr char AVERAGE_PRICE_GUARANTEE{ '7' };
			};

			// DiscretionOffsetValue(389): FLOAT
			struct DiscretionOffsetValue
			{
				static constexpr uint16_t tag{ 389 };
			};

			// BidID(390): STRING
			struct BidID
			{
				static constexpr uint16_t tag{ 390 };
			};

			// ClientBidID(391): STRING
			struct ClientBidID
			{
				static constexpr uint16_t tag{ 391 };
			};

			// ListName(392): STRING
			struct ListName
			{
				static constexpr uint16_t tag{ 392 };
			};

			// TotNoRelatedSym(393): INT
			struct TotNoRelatedSym
			{
				static constexpr uint16_t tag{ 393 };
			};

			// BidType(394): INT
			struct BidType
			{
				static constexpr uint16_t tag{ 394 };
				static constexpr int32_t NON_DISCLOSED_STYLE{ 1 };
				static constexpr int32_t DISCLOSED_SYTLE{ 2 };
				static constexpr int32_t NO_BIDDING_PROCESS{ 3 };
			};

			// NumTickets(395): INT
			struct NumTickets
			{
				static constexpr uint16_t tag{ 395 };
			};

			// SideValue1(396): AMT
			struct SideValue1
			{
				static constexpr uint16_t tag{ 396 };
			};

			// SideValue2(397): AMT
			struct SideValue2
			{
				static constexpr uint16_t tag{ 397 };
			};

			// NoBidDescriptors(398): NUMINGROUP
			struct NoBidDescriptors
			{
				static constexpr uint16_t tag{ 398 };
			};

			// BidDescriptorType(399): INT
			struct BidDescriptorType
			{
				static constexpr uint16_t tag{ 399 };
				static constexpr int32_t SECTOR{ 1 };
				static constexpr int32_t COUNTRY{ 2 };
				static constexpr int32_t INDEX{ 3 };
			};

			// BidDescriptor(400): STRING
			struct BidDescriptor
			{
				static constexpr uint16_t tag{ 400 };
			};

			// SideValueInd(401): INT
			struct SideValueInd
			{
				static constexpr uint16_t tag{ 401 };
				static constexpr int32_t SIDE_VALUE_1{ 1 };
				static constexpr int32_t SIDE_VALUE_2{ 2 };
			};

			// LiquidityPctLow(402): PERCENTAGE
			struct LiquidityPctLow
			{
				static constexpr uint16_t tag{ 402 };
			};

			// LiquidityPctHigh(403): PERCENTAGE
			struct LiquidityPctHigh
			{
				static constexpr uint16_t tag{ 403 };
			};

			// LiquidityValue(404): AMT
			struct LiquidityValue
			{
				static constexpr uint16_t tag{ 404 };
			};

			// EFPTrackingError(405): PERCENTAGE
			struct EFPTrackingError
			{
				static constexpr uint16_t tag{ 405 };
			};

			// FairValue(406): AMT
			struct FairValue
			{
				static constexpr uint16_t tag{ 406 };
			};

			// OutsideIndexPct(407): PERCENTAGE
			struct OutsideIndexPct
			{
				static constexpr uint16_t tag{ 407 };
			};

			// ValueOfFutures(408): AMT
			struct ValueOfFutures
			{
				static constexpr uint16_t tag{ 408 };
			};

			// LiquidityIndType(409): INT
			struct LiquidityIndType
			{
				static constexpr uint16_t tag{ 409 };
				static constexpr int32_t _5_DAY_MOVING_AVERAGE{ 1 };
				static constexpr int32_t _20_DAY_MOVING_AVERAGE{ 2 };
				static constexpr int32_t NORMAL_MARKET_SIZE{ 3 };
				static constexpr int32_t OTHER{ 4 };
			};

			// WtAverageLiquidity(410): PERCENTAGE
			struct WtAverageLiquidity
			{
				static constexpr uint16_t tag{ 410 };
			};

			// ExchangeForPhysical(411): BOOLEAN
			struct ExchangeForPhysical
			{
				static constexpr uint16_t tag{ 411 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// OutMainCntryUIndex(412): AMT
			struct OutMainCntryUIndex
			{
				static constexpr uint16_t tag{ 412 };
			};

			// CrossPercent(413): PERCENTAGE
			struct CrossPercent
			{
				static constexpr uint16_t tag{ 413 };
			};

			// ProgRptReqs(414): INT
			struct ProgRptReqs
			{
				static constexpr uint16_t tag{ 414 };
				static constexpr int32_t BUY_SIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST{ 1 };
				static constexpr int32_t SELL_SIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD{ 2 };
				static constexpr int32_t REAL_TIME_EXECUTION_REPORTS{ 3 };
			};

			// ProgPeriodInterval(415): INT
			struct ProgPeriodInterval
			{
				static constexpr uint16_t tag{ 415 };
			};

			// IncTaxInd(416): INT
			struct IncTaxInd
			{
				static constexpr uint16_t tag{ 416 };
				static constexpr int32_t NET{ 1 };
				static constexpr int32_t GROSS{ 2 };
			};

			// NumBidders(417): INT
			struct NumBidders
			{
				static constexpr uint16_t tag{ 417 };
			};

			// BidTradeType(418): CHAR
			struct BidTradeType
			{
				static constexpr uint16_t tag{ 418 };
				static constexpr char AGENCY{ 'A' };
				static constexpr char VWAP_GUARANTEE{ 'G' };
				static constexpr char GUARANTEED_CLOSE{ 'J' };
				static constexpr char RISK_TRADE{ 'R' };
			};

			// BasisPxType(419): CHAR
			struct BasisPxType
			{
				static constexpr uint16_t tag{ 419 };
				static constexpr char CLOSING_PRICE_AT_MORNINGN_SESSION{ '2' };
				static constexpr char CLOSING_PRICE{ '3' };
				static constexpr char CURRENT_PRICE{ '4' };
				static constexpr char SQ{ '5' };
				static constexpr char VWAP_THROUGH_A_DAY{ '6' };
				static constexpr char VWAP_THROUGH_A_MORNING_SESSION{ '7' };
				static constexpr char VWAP_THROUGH_AN_AFTERNOON_SESSION{ '8' };
				static constexpr char VWAP_THROUGH_A_DAY_EXCEPT_YORI{ '9' };
				static constexpr char VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI{ 'A' };
				static constexpr char VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI{ 'B' };
				static constexpr char STRIKE{ 'C' };
				static constexpr char OPEN{ 'D' };
				static constexpr char OTHERS{ 'Z' };
			};

			// NoBidComponents(420): NUMINGROUP
			struct NoBidComponents
			{
				static constexpr uint16_t tag{ 420 };
			};

			// Country(421): COUNTRY
			struct Country
			{
				static constexpr uint16_t tag{ 421 };
			};

			// TotNoStrikes(422): INT
			struct TotNoStrikes
			{
				static constexpr uint16_t tag{ 422 };
			};

			// PriceType(423): INT
			struct PriceType
			{
				static constexpr uint16_t tag{ 423 };
				static constexpr int32_t PERCENTAGE{ 1 };
				static constexpr int32_t FIXED_CABINET_TRADE_PRICE{ 10 };
				static constexpr int32_t VARIABLE_CABINET_TRADE_PRICE{ 11 };
				static constexpr int32_t PER_UNIT{ 2 };
				static constexpr int32_t FIXED_AMOUNT{ 3 };
				static constexpr int32_t DISCOUNT{ 4 };
				static constexpr int32_t PREMIUM{ 5 };
				static constexpr int32_t SPREAD{ 6 };
				static constexpr int32_t TED_PRICE{ 7 };
				static constexpr int32_t TED_YIELD{ 8 };
				static constexpr int32_t YIELD{ 9 };
				static constexpr int32_t PRODUCT_TICKS_IN_HALFS{ 13 };
				static constexpr int32_t PRODUCT_TICKS_IN_FOURTHS{ 14 };
				static constexpr int32_t PRODUCT_TICKS_IN_EIGHTS{ 15 };
				static constexpr int32_t PRODUCT_TICKS_IN_SIXTEENTHS{ 16 };
				static constexpr int32_t PRODUCT_TICKS_IN_THIRTY_SECONDS{ 17 };
				static constexpr int32_t PRODUCT_TICKS_IN_SIXTY_FORTHS{ 18 };
				static constexpr int32_t PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS{ 19 };
			};

			// DayOrderQty(424): QTY
			struct DayOrderQty
			{
				static constexpr uint16_t tag{ 424 };
			};

			// DayCumQty(425): QTY
			struct DayCumQty
			{
				static constexpr uint16_t tag{ 425 };
			};

			// DayAvgPx(426): PRICE
			struct DayAvgPx
			{
				static constexpr uint16_t tag{ 426 };
			};

			// GTBookingInst(427): INT
			struct GTBookingInst
			{
				static constexpr uint16_t tag{ 427 };
				static constexpr int32_t BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION{ 0 };
				static constexpr int32_t ACCUMULATE_EXECTUIONS_UNTIL_FORDER_IS_FILLED_OR_EXPIRES{ 1 };
				static constexpr int32_t ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE{ 2 };
			};

			// NoStrikes(428): NUMINGROUP
			struct NoStrikes
			{
				static constexpr uint16_t tag{ 428 };
			};

			// ListStatusType(429): INT
			struct ListStatusType
			{
				static constexpr uint16_t tag{ 429 };
				static constexpr int32_t ACK{ 1 };
				static constexpr int32_t RESPONSE{ 2 };
				static constexpr int32_t TIMED{ 3 };
				static constexpr int32_t EXEC_STARTED{ 4 };
				static constexpr int32_t ALL_DONE{ 5 };
				static constexpr int32_t ALERT{ 6 };
			};

			// NetGrossInd(430): INT
			struct NetGrossInd
			{
				static constexpr uint16_t tag{ 430 };
				static constexpr int32_t NET{ 1 };
				static constexpr int32_t GROSS{ 2 };
			};

			// ListOrderStatus(431): INT
			struct ListOrderStatus
			{
				static constexpr uint16_t tag{ 431 };
				static constexpr int32_t IN_BIDDING_PROCESS{ 1 };
				static constexpr int32_t RECEIVED_FOR_EXECUTION{ 2 };
				static constexpr int32_t EXECUTING{ 3 };
				static constexpr int32_t CANCELLING{ 4 };
				static constexpr int32_t ALERT{ 5 };
				static constexpr int32_t ALL_DONE{ 6 };
				static constexpr int32_t REJECT{ 7 };
			};

			// ExpireDate(432): LOCALMKTDATE
			struct ExpireDate
			{
				static constexpr uint16_t tag{ 432 };
			};

			// ListExecInstType(433): CHAR
			struct ListExecInstType
			{
				static constexpr uint16_t tag{ 433 };
				static constexpr char IMMEDIATE{ '1' };
				static constexpr char WAIT_FOR_EXECUT_INSTRUCTION{ '2' };
				static constexpr char EXCHANGE_SWITCH_CIV_ORDER_3{ '3' };
				static constexpr char EXCHANGE_SWITCH_CIV_ORDER_4{ '4' };
				static constexpr char EXCHANGE_SWITCH_CIV_ORDER_5{ '5' };
			};

			// CxlRejResponseTo(434): CHAR
			struct CxlRejResponseTo
			{
				static constexpr uint16_t tag{ 434 };
				static constexpr char ORDER_CANCEL_REQUEST{ '1' };
				static constexpr char ORDER_CANCEL_REPLACE_REQUEST{ '2' };
			};

			// UnderlyingCouponRate(435): PERCENTAGE
			struct UnderlyingCouponRate
			{
				static constexpr uint16_t tag{ 435 };
			};

			// UnderlyingContractMultiplier(436): FLOAT
			struct UnderlyingContractMultiplier
			{
				static constexpr uint16_t tag{ 436 };
			};

			// ContraTradeQty(437): QTY
			struct ContraTradeQty
			{
				static constexpr uint16_t tag{ 437 };
			};

			// ContraTradeTime(438): UTCTIMESTAMP
			struct ContraTradeTime
			{
				static constexpr uint16_t tag{ 438 };
			};

			// ClearingFirm(439): STRING
			struct ClearingFirm
			{
				static constexpr uint16_t tag{ 439 };
			};

			// ClearingAccount(440): STRING
			struct ClearingAccount
			{
				static constexpr uint16_t tag{ 440 };
			};

			// LiquidityNumSecurities(441): INT
			struct LiquidityNumSecurities
			{
				static constexpr uint16_t tag{ 441 };
			};

			// MultiLegReportingType(442): CHAR
			struct MultiLegReportingType
			{
				static constexpr uint16_t tag{ 442 };
				static constexpr char SINGLE_SECURITY{ '1' };
				static constexpr char INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY{ '2' };
				static constexpr char MULTI_LEG_SECURITY{ '3' };
			};

			// StrikeTime(443): UTCTIMESTAMP
			struct StrikeTime
			{
				static constexpr uint16_t tag{ 443 };
			};

			// ListStatusText(444): STRING
			struct ListStatusText
			{
				static constexpr uint16_t tag{ 444 };
			};

			// EncodedListStatusTextLen(445): LENGTH
			struct EncodedListStatusTextLen
			{
				static constexpr uint16_t tag{ 445 };
			};

			// EncodedListStatusText(446): DATA
			struct EncodedListStatusText
			{
				static constexpr uint16_t tag{ 446 };
			};

			// PartyIDSource(447): CHAR
			struct PartyIDSource
			{
				static constexpr uint16_t tag{ 447 };
				static constexpr char KOREAN_INVESTOR_ID{ '1' };
				static constexpr char TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID{ '2' };
				static constexpr char TAIWANESE_TRADING_ACCT{ '3' };
				static constexpr char MALAYSIAN_CENTRAL_DEPOSITORY{ '4' };
				static constexpr char CHINESE_INVESTOR_ID{ '5' };
				static constexpr char UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER{ '6' };
				static constexpr char US_SOCIAL_SECURITY_NUMBER{ '7' };
				static constexpr char US_EMPLOYER_OR_TAX_ID_NUMBER{ '8' };
				static constexpr char AUSTRALIAN_BUSINESS_NUMBER{ '9' };
				static constexpr char AUSTRALIAN_TAX_FILE_NUMBER{ 'A' };
				static constexpr char BIC{ 'B' };
				static constexpr char GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER{ 'C' };
				static constexpr char PROPRIETARY{ 'D' };
				static constexpr char ISO_COUNTRY_CODE{ 'E' };
				static constexpr char SETTLEMENT_ENTITY_LOCATION{ 'F' };
				static constexpr char MIC{ 'G' };
				static constexpr char CSD_PARTICIPANT_MEMBER_CODE{ 'H' };
				static constexpr char DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT{ 'I' };
			};

			// PartyID(448): STRING
			struct PartyID
			{
				static constexpr uint16_t tag{ 448 };
			};

			// TotalVolumeTradedDate(449): UTCDATEONLY
			struct TotalVolumeTradedDate
			{
				static constexpr uint16_t tag{ 449 };
			};

			// TotalVolumeTradedTime(450): UTCTIMEONLY
			struct TotalVolumeTradedTime
			{
				static constexpr uint16_t tag{ 450 };
			};

			// NetChgPrevDay(451): PRICEOFFSET
			struct NetChgPrevDay
			{
				static constexpr uint16_t tag{ 451 };
			};

			// PartyRole(452): INT
			struct PartyRole
			{
				static constexpr uint16_t tag{ 452 };
				static constexpr int32_t EXECUTING_FIRM{ 1 };
				static constexpr int32_t SETTLEMENT_LOCATION{ 10 };
				static constexpr int32_t ORDER_ORIGINATION_TRADER{ 11 };
				static constexpr int32_t EXECUTING_TRADER{ 12 };
				static constexpr int32_t ORDER_ORIGINATION_FIRM{ 13 };
				static constexpr int32_t GIVEUP_CLEARING_FIRM{ 14 };
				static constexpr int32_t CORRESPONDANT_CLEARING_FIRM{ 15 };
				static constexpr int32_t EXECUTING_SYSTEM{ 16 };
				static constexpr int32_t CONTRA_FIRM{ 17 };
				static constexpr int32_t CONTRA_CLEARING_FIRM{ 18 };
				static constexpr int32_t SPONSORING_FIRM{ 19 };
				static constexpr int32_t BROKER_OF_CREDIT{ 2 };
				static constexpr int32_t UNDERLYING_CONTRA_FIRM{ 20 };
				static constexpr int32_t CLEARING_ORGANIZATION{ 21 };
				static constexpr int32_t EXCHANGE{ 22 };
				static constexpr int32_t CUSTOMER_ACCOUNT{ 24 };
				static constexpr int32_t CORRESPONDENT_CLEARING_ORGANIZATION{ 25 };
				static constexpr int32_t CORRESPONDENT_BROKER{ 26 };
				static constexpr int32_t BUYER_SELLER{ 27 };
				static constexpr int32_t CUSTODIAN{ 28 };
				static constexpr int32_t INTERMEDIARY{ 29 };
				static constexpr int32_t CLIENT_ID{ 3 };
				static constexpr int32_t AGENT{ 30 };
				static constexpr int32_t SUB_CUSTODIAN{ 31 };
				static constexpr int32_t BENEFICIARY{ 32 };
				static constexpr int32_t INTERESTED_PARTY{ 33 };
				static constexpr int32_t REGULATORY_BODY{ 34 };
				static constexpr int32_t LIQUIDITY_PROVIDER{ 35 };
				static constexpr int32_t ENTERING_TRADER{ 36 };
				static constexpr int32_t CONTRA_TRADER{ 37 };
				static constexpr int32_t POSITION_ACCOUNT{ 38 };
				static constexpr int32_t CLEARING_FIRM{ 4 };
				static constexpr int32_t INVESTOR_ID{ 5 };
				static constexpr int32_t INTRODUCING_FIRM{ 6 };
				static constexpr int32_t ENTERING_FIRM{ 7 };
				static constexpr int32_t LOCATE{ 8 };
				static constexpr int32_t FUND_MANAGER_CLIENT_ID{ 9 };
				static constexpr int32_t INTRODUCING_BROKER{ 60 };
				static constexpr int32_t CONTRA_POSITION_ACCOUNT{ 41 };
				static constexpr int32_t CONTRA_EXCHANGE{ 42 };
				static constexpr int32_t INTERNAL_CARRY_ACCOUNT{ 43 };
				static constexpr int32_t ORDER_ENTRY_OPERATOR_ID{ 44 };
				static constexpr int32_t SECONDARY_ACCOUNT_NUMBER{ 45 };
				static constexpr int32_t FOREIGN_FIRM{ 46 };
				static constexpr int32_t THIRD_PARTY_ALLOCATION_FIRM{ 47 };
				static constexpr int32_t CLAIMING_ACCOUNT{ 48 };
				static constexpr int32_t ASSET_MANAGER{ 49 };
				static constexpr int32_t PLEDGOR_ACCOUNT{ 50 };
				static constexpr int32_t PLEDGEE_ACCOUNT{ 51 };
				static constexpr int32_t LARGE_TRADER_REPORTABLE_ACCOUNT{ 52 };
				static constexpr int32_t TRADER_MNEMONIC{ 53 };
				static constexpr int32_t SENDER_LOCATION{ 54 };
				static constexpr int32_t SESSION_ID{ 55 };
				static constexpr int32_t ACCEPTABLE_COUNTERPARTY{ 56 };
				static constexpr int32_t UNACCEPTABLE_COUNTERPARTY{ 57 };
				static constexpr int32_t ENTERING_UNIT{ 58 };
				static constexpr int32_t EXECUTING_UNIT{ 59 };
				static constexpr int32_t CONTRA_INVESTOR_ID{ 39 };
				static constexpr int32_t TRANSFER_TO_FIRM{ 40 };
				static constexpr int32_t QUOTE_ORIGINATOR{ 61 };
				static constexpr int32_t REPORT_ORIGINATOR{ 62 };
				static constexpr int32_t SYSTEMATIC_INTERNALISER{ 63 };
				static constexpr int32_t MULTILATERAL_TRADING_FACILITY{ 64 };
				static constexpr int32_t REGULATED_MARKET{ 65 };
				static constexpr int32_t MARKET_MAKER{ 66 };
				static constexpr int32_t INVESTMENT_FIRM{ 67 };
				static constexpr int32_t HOST_COMPETENT_AUTHORITY{ 68 };
				static constexpr int32_t HOME_COMPETENT_AUTHORITY{ 69 };
				static constexpr int32_t COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQUIDITY{ 70 };
				static constexpr int32_t COMPETENT_AUTHORITY_OF_THE_TRANSACTION{ 71 };
				static constexpr int32_t REPORTING_INTERMEDIARY{ 72 };
				static constexpr int32_t EXECUTION_VENUE{ 73 };
				static constexpr int32_t MARKET_DATA_ENTRY_ORIGINATOR{ 74 };
				static constexpr int32_t LOCATION_ID{ 75 };
				static constexpr int32_t DESK_ID{ 76 };
				static constexpr int32_t MARKET_DATA_MARKET{ 77 };
				static constexpr int32_t ALLOCATION_ENTITY{ 78 };
				static constexpr int32_t PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES{ 79 };
				static constexpr int32_t STEP_OUT_FIRM{ 80 };
				static constexpr int32_t BROKERCLEARINGID{ 81 };
				static constexpr int32_t CENTRAL_REGISTRATION_DEPOSITORY{ 82 };
				static constexpr int32_t CLEARING_ACCOUNT{ 83 };
				static constexpr int32_t ACCEPTABLE_SETTLING_COUNTERPARTY{ 84 };
				static constexpr int32_t UNACCEPTABLE_SETTLING_COUNTERPARTY{ 85 };
			};

			// NoPartyIDs(453): NUMINGROUP
			struct NoPartyIDs
			{
				static constexpr uint16_t tag{ 453 };
			};

			// NoSecurityAltID(454): NUMINGROUP
			struct NoSecurityAltID
			{
				static constexpr uint16_t tag{ 454 };
			};

			// SecurityAltID(455): STRING
			struct SecurityAltID
			{
				static constexpr uint16_t tag{ 455 };
			};

			// SecurityAltIDSource(456): STRING
			struct SecurityAltIDSource
			{
				static constexpr uint16_t tag{ 456 };
			};

			// NoUnderlyingSecurityAltID(457): NUMINGROUP
			struct NoUnderlyingSecurityAltID
			{
				static constexpr uint16_t tag{ 457 };
			};

			// UnderlyingSecurityAltID(458): STRING
			struct UnderlyingSecurityAltID
			{
				static constexpr uint16_t tag{ 458 };
			};

			// UnderlyingSecurityAltIDSource(459): STRING
			struct UnderlyingSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 459 };
			};

			// Product(460): INT
			struct Product
			{
				static constexpr uint16_t tag{ 460 };
				static constexpr int32_t AGENCY{ 1 };
				static constexpr int32_t MORTGAGE{ 10 };
				static constexpr int32_t MUNICIPAL{ 11 };
				static constexpr int32_t OTHER{ 12 };
				static constexpr int32_t FINANCING{ 13 };
				static constexpr int32_t COMMODITY{ 2 };
				static constexpr int32_t CORPORATE{ 3 };
				static constexpr int32_t CURRENCY{ 4 };
				static constexpr int32_t EQUITY{ 5 };
				static constexpr int32_t GOVERNMENT{ 6 };
				static constexpr int32_t INDEX{ 7 };
				static constexpr int32_t LOAN{ 8 };
				static constexpr int32_t MONEYMARKET{ 9 };
			};

			// CFICode(461): STRING
			struct CFICode
			{
				static constexpr uint16_t tag{ 461 };
			};

			// UnderlyingProduct(462): INT
			struct UnderlyingProduct
			{
				static constexpr uint16_t tag{ 462 };
			};

			// UnderlyingCFICode(463): STRING
			struct UnderlyingCFICode
			{
				static constexpr uint16_t tag{ 463 };
			};

			// TestMessageIndicator(464): BOOLEAN
			struct TestMessageIndicator
			{
				static constexpr uint16_t tag{ 464 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// QuantityType(465): INT
			struct QuantityType
			{
				static constexpr uint16_t tag{ 465 };
				static constexpr int32_t SHARES{ 1 };
				static constexpr int32_t BONDS{ 2 };
				static constexpr int32_t CURRENTFACE{ 3 };
				static constexpr int32_t ORIGINALFACE{ 4 };
				static constexpr int32_t CURRENCY{ 5 };
				static constexpr int32_t CONTRACTS{ 6 };
				static constexpr int32_t OTHER{ 7 };
				static constexpr int32_t PAR{ 8 };
			};

			// BookingRefID(466): STRING
			struct BookingRefID
			{
				static constexpr uint16_t tag{ 466 };
			};

			// IndividualAllocID(467): STRING
			struct IndividualAllocID
			{
				static constexpr uint16_t tag{ 467 };
			};

			// RoundingDirection(468): CHAR
			struct RoundingDirection
			{
				static constexpr uint16_t tag{ 468 };
				static constexpr char ROUND_TO_NEAREST{ '0' };
				static constexpr char ROUND_DOWN{ '1' };
				static constexpr char ROUND_UP{ '2' };
			};

			// RoundingModulus(469): FLOAT
			struct RoundingModulus
			{
				static constexpr uint16_t tag{ 469 };
			};

			// CountryOfIssue(470): COUNTRY
			struct CountryOfIssue
			{
				static constexpr uint16_t tag{ 470 };
			};

			// StateOrProvinceOfIssue(471): STRING
			struct StateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 471 };
			};

			// LocaleOfIssue(472): STRING
			struct LocaleOfIssue
			{
				static constexpr uint16_t tag{ 472 };
			};

			// NoRegistDtls(473): NUMINGROUP
			struct NoRegistDtls
			{
				static constexpr uint16_t tag{ 473 };
			};

			// MailingDtls(474): STRING
			struct MailingDtls
			{
				static constexpr uint16_t tag{ 474 };
			};

			// InvestorCountryOfResidence(475): COUNTRY
			struct InvestorCountryOfResidence
			{
				static constexpr uint16_t tag{ 475 };
			};

			// PaymentRef(476): STRING
			struct PaymentRef
			{
				static constexpr uint16_t tag{ 476 };
			};

			// DistribPaymentMethod(477): INT
			struct DistribPaymentMethod
			{
				static constexpr uint16_t tag{ 477 };
				static constexpr int32_t CREST{ 1 };
				static constexpr int32_t BPAY{ 10 };
				static constexpr int32_t HIGH_VALUE_CLEARING_SYSTEM_HVACS{ 11 };
				static constexpr int32_t REINVEST_IN_FUND{ 12 };
				static constexpr int32_t NSCC{ 2 };
				static constexpr int32_t EUROCLEAR{ 3 };
				static constexpr int32_t CLEARSTREAM{ 4 };
				static constexpr int32_t CHEQUE{ 5 };
				static constexpr int32_t TELEGRAPHIC_TRANSFER{ 6 };
				static constexpr int32_t FED_WIRE{ 7 };
				static constexpr int32_t DIRECT_CREDIT{ 8 };
				static constexpr int32_t ACH_CREDIT{ 9 };
			};

			// CashDistribCurr(478): CURRENCY
			struct CashDistribCurr
			{
				static constexpr uint16_t tag{ 478 };
			};

			// CommCurrency(479): CURRENCY
			struct CommCurrency
			{
				static constexpr uint16_t tag{ 479 };
			};

			// CancellationRights(480): CHAR
			struct CancellationRights
			{
				static constexpr uint16_t tag{ 480 };
				static constexpr char NO_M{ 'M' };
				static constexpr char NO_N{ 'N' };
				static constexpr char NO_O{ 'O' };
				static constexpr char YES{ 'Y' };
			};

			// MoneyLaunderingStatus(481): CHAR
			struct MoneyLaunderingStatus
			{
				static constexpr uint16_t tag{ 481 };
				static constexpr char EXEMPT_1{ '1' };
				static constexpr char EXEMPT_2{ '2' };
				static constexpr char EXEMPT_3{ '3' };
				static constexpr char NOT_CHECKED{ 'N' };
				static constexpr char PASSED{ 'Y' };
			};

			// MailingInst(482): STRING
			struct MailingInst
			{
				static constexpr uint16_t tag{ 482 };
			};

			// TransBkdTime(483): UTCTIMESTAMP
			struct TransBkdTime
			{
				static constexpr uint16_t tag{ 483 };
			};

			// ExecPriceType(484): CHAR
			struct ExecPriceType
			{
				static constexpr uint16_t tag{ 484 };
				static constexpr char BID_PRICE{ 'B' };
				static constexpr char CREATION_PRICE{ 'C' };
				static constexpr char CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT{ 'D' };
				static constexpr char CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT{ 'E' };
				static constexpr char OFFER_PRICE{ 'O' };
				static constexpr char OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT{ 'P' };
				static constexpr char OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT{ 'Q' };
				static constexpr char SINGLE_PRICE{ 'S' };
			};

			// ExecPriceAdjustment(485): FLOAT
			struct ExecPriceAdjustment
			{
				static constexpr uint16_t tag{ 485 };
			};

			// DateOfBirth(486): LOCALMKTDATE
			struct DateOfBirth
			{
				static constexpr uint16_t tag{ 486 };
			};

			// TradeReportTransType(487): INT
			struct TradeReportTransType
			{
				static constexpr uint16_t tag{ 487 };
				static constexpr int32_t NEW{ 0 };
				static constexpr int32_t CANCEL{ 1 };
				static constexpr int32_t REPLACE{ 2 };
				static constexpr int32_t RELEASE{ 3 };
				static constexpr int32_t REVERSE{ 4 };
				static constexpr int32_t CANCEL_DUE_TO_BACK_OUT_OF_TRADE{ 5 };
			};

			// CardHolderName(488): STRING
			struct CardHolderName
			{
				static constexpr uint16_t tag{ 488 };
			};

			// CardNumber(489): STRING
			struct CardNumber
			{
				static constexpr uint16_t tag{ 489 };
			};

			// CardExpDate(490): LOCALMKTDATE
			struct CardExpDate
			{
				static constexpr uint16_t tag{ 490 };
			};

			// CardIssNum(491): STRING
			struct CardIssNum
			{
				static constexpr uint16_t tag{ 491 };
			};

			// PaymentMethod(492): INT
			struct PaymentMethod
			{
				static constexpr uint16_t tag{ 492 };
				static constexpr int32_t CREST{ 1 };
				static constexpr int32_t DIRECT_CREDIT{ 10 };
				static constexpr int32_t CREDIT_CARD{ 11 };
				static constexpr int32_t ACH_DEBIT{ 12 };
				static constexpr int32_t ACH_CREDIT{ 13 };
				static constexpr int32_t BPAY{ 14 };
				static constexpr int32_t HIGH_VALUE_CLEARING_SYSTEM{ 15 };
				static constexpr int32_t NSCC{ 2 };
				static constexpr int32_t EUROCLEAR{ 3 };
				static constexpr int32_t CLEARSTREAM{ 4 };
				static constexpr int32_t CHEQUE{ 5 };
				static constexpr int32_t TELEGRAPHIC_TRANSFER{ 6 };
				static constexpr int32_t FED_WIRE{ 7 };
				static constexpr int32_t DEBIT_CARD{ 8 };
				static constexpr int32_t DIRECT_DEBIT{ 9 };
			};

			// RegistAcctType(493): STRING
			struct RegistAcctType
			{
				static constexpr uint16_t tag{ 493 };
			};

			// Designation(494): STRING
			struct Designation
			{
				static constexpr uint16_t tag{ 494 };
			};

			// TaxAdvantageType(495): INT
			struct TaxAdvantageType
			{
				static constexpr uint16_t tag{ 495 };
				static constexpr int32_t NONE_NOT_APPLICABLE{ 0 };
				static constexpr int32_t MAXI_ISA{ 1 };
				static constexpr int32_t EMPLOYEE_10{ 10 };
				static constexpr int32_t EMPLOYER_11{ 11 };
				static constexpr int32_t EMPLOYER_12{ 12 };
				static constexpr int32_t NON_FUND_PROTOTYPE_IRA{ 13 };
				static constexpr int32_t NON_FUND_QUALIFIED_PLAN{ 14 };
				static constexpr int32_t DEFINED_CONTRIBUTION_PLAN{ 15 };
				static constexpr int32_t INDIVIDUAL_RETIREMENT_ACCOUNT_16{ 16 };
				static constexpr int32_t INDIVIDUAL_RETIREMENT_ACCOUNT_17{ 17 };
				static constexpr int32_t KEOGH{ 18 };
				static constexpr int32_t PROFIT_SHARING_PLAN{ 19 };
				static constexpr int32_t TESSA{ 2 };
				static constexpr int32_t _401{ 20 };
				static constexpr int32_t SELF_DIRECTED_IRA{ 21 };
				static constexpr int32_t _403{ 22 };
				static constexpr int32_t _457{ 23 };
				static constexpr int32_t ROTH_IRA_24{ 24 };
				static constexpr int32_t ROTH_IRA_25{ 25 };
				static constexpr int32_t ROTH_CONVERSION_IRA_26{ 26 };
				static constexpr int32_t ROTH_CONVERSION_IRA_27{ 27 };
				static constexpr int32_t EDUCATION_IRA_28{ 28 };
				static constexpr int32_t EDUCATION_IRA_29{ 29 };
				static constexpr int32_t MINI_CASH_ISA{ 3 };
				static constexpr int32_t MINI_STOCKS_AND_SHARES_ISA{ 4 };
				static constexpr int32_t MINI_INSURANCE_ISA{ 5 };
				static constexpr int32_t CURRENT_YEAR_PAYMENT{ 6 };
				static constexpr int32_t PRIOR_YEAR_PAYMENT{ 7 };
				static constexpr int32_t ASSET_TRANSFER{ 8 };
				static constexpr int32_t EMPLOYEE_9{ 9 };
				static constexpr int32_t OTHER{ 999 };
			};

			// RegistRejReasonText(496): STRING
			struct RegistRejReasonText
			{
				static constexpr uint16_t tag{ 496 };
			};

			// FundRenewWaiv(497): CHAR
			struct FundRenewWaiv
			{
				static constexpr uint16_t tag{ 497 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// CashDistribAgentName(498): STRING
			struct CashDistribAgentName
			{
				static constexpr uint16_t tag{ 498 };
			};

			// CashDistribAgentCode(499): STRING
			struct CashDistribAgentCode
			{
				static constexpr uint16_t tag{ 499 };
			};

			// CashDistribAgentAcctNumber(500): STRING
			struct CashDistribAgentAcctNumber
			{
				static constexpr uint16_t tag{ 500 };
			};

			// CashDistribPayRef(501): STRING
			struct CashDistribPayRef
			{
				static constexpr uint16_t tag{ 501 };
			};

			// CashDistribAgentAcctName(502): STRING
			struct CashDistribAgentAcctName
			{
				static constexpr uint16_t tag{ 502 };
			};

			// CardStartDate(503): LOCALMKTDATE
			struct CardStartDate
			{
				static constexpr uint16_t tag{ 503 };
			};

			// PaymentDate(504): LOCALMKTDATE
			struct PaymentDate
			{
				static constexpr uint16_t tag{ 504 };
			};

			// PaymentRemitterID(505): STRING
			struct PaymentRemitterID
			{
				static constexpr uint16_t tag{ 505 };
			};

			// RegistStatus(506): CHAR
			struct RegistStatus
			{
				static constexpr uint16_t tag{ 506 };
				static constexpr char ACCEPTED{ 'A' };
				static constexpr char HELD{ 'H' };
				static constexpr char REMINDER{ 'N' };
				static constexpr char REJECTED{ 'R' };
			};

			// RegistRejReasonCode(507): INT
			struct RegistRejReasonCode
			{
				static constexpr uint16_t tag{ 507 };
				static constexpr int32_t INVALID_UNACCEPTABLE_ACCOUNT_TYPE{ 1 };
				static constexpr int32_t INVALID_UNACEEPTABLE_INVESTOR_ID_SOURCE{ 10 };
				static constexpr int32_t INVALID_UNACCEPTABLE_DATE_OF_BIRTH{ 11 };
				static constexpr int32_t INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE{ 12 };
				static constexpr int32_t INVALID_UNACCEPTABLE_NO_DISTRIB_INSTNS{ 13 };
				static constexpr int32_t INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE{ 14 };
				static constexpr int32_t INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD{ 15 };
				static constexpr int32_t INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME{ 16 };
				static constexpr int32_t INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE{ 17 };
				static constexpr int32_t INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM{ 18 };
				static constexpr int32_t INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE{ 2 };
				static constexpr int32_t INVALID_UNACCEPTABLE_OWNERSHIP_TYPE{ 3 };
				static constexpr int32_t INVALID_UNACCEPTABLE_NO_REG_DETAILS{ 4 };
				static constexpr int32_t INVALID_UNACCEPTABLE_REG_SEQ_NO{ 5 };
				static constexpr int32_t INVALID_UNACCEPTABLE_REG_DETAILS{ 6 };
				static constexpr int32_t INVALID_UNACCEPTABLE_MAILING_DETAILS{ 7 };
				static constexpr int32_t INVALID_UNACCEPTABLE_MAILING_INSTRUCTIONS{ 8 };
				static constexpr int32_t INVALID_UNACCEPTABLE_INVESTOR_ID{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// RegistRefID(508): STRING
			struct RegistRefID
			{
				static constexpr uint16_t tag{ 508 };
			};

			// RegistDtls(509): STRING
			struct RegistDtls
			{
				static constexpr uint16_t tag{ 509 };
			};

			// NoDistribInsts(510): NUMINGROUP
			struct NoDistribInsts
			{
				static constexpr uint16_t tag{ 510 };
			};

			// RegistEmail(511): STRING
			struct RegistEmail
			{
				static constexpr uint16_t tag{ 511 };
			};

			// DistribPercentage(512): PERCENTAGE
			struct DistribPercentage
			{
				static constexpr uint16_t tag{ 512 };
			};

			// RegistID(513): STRING
			struct RegistID
			{
				static constexpr uint16_t tag{ 513 };
			};

			// RegistTransType(514): CHAR
			struct RegistTransType
			{
				static constexpr uint16_t tag{ 514 };
				static constexpr char NEW{ '0' };
				static constexpr char REPLACE{ '1' };
				static constexpr char CANCEL{ '2' };
			};

			// ExecValuationPoint(515): UTCTIMESTAMP
			struct ExecValuationPoint
			{
				static constexpr uint16_t tag{ 515 };
			};

			// OrderPercent(516): PERCENTAGE
			struct OrderPercent
			{
				static constexpr uint16_t tag{ 516 };
			};

			// OwnershipType(517): CHAR
			struct OwnershipType
			{
				static constexpr uint16_t tag{ 517 };
				static constexpr char JOINT_TRUSTEES{ '2' };
				static constexpr char JOINT_INVESTORS{ 'J' };
				static constexpr char TENANTS_IN_COMMON{ 'T' };
			};

			// NoContAmts(518): NUMINGROUP
			struct NoContAmts
			{
				static constexpr uint16_t tag{ 518 };
			};

			// ContAmtType(519): INT
			struct ContAmtType
			{
				static constexpr uint16_t tag{ 519 };
				static constexpr int32_t COMMISSION_AMOUNT{ 1 };
				static constexpr int32_t EXIT_CHARGE_PERCENT{ 10 };
				static constexpr int32_t FUND_BASED_RENEWAL_COMMISSION_PERCENT{ 11 };
				static constexpr int32_t PROJECTED_FUND_VALUE{ 12 };
				static constexpr int32_t FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13{ 13 };
				static constexpr int32_t FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14{ 14 };
				static constexpr int32_t NET_SETTLEMENT_AMOUNT{ 15 };
				static constexpr int32_t COMMISSION_PERCENT{ 2 };
				static constexpr int32_t INITIAL_CHARGE_AMOUNT{ 3 };
				static constexpr int32_t INITIAL_CHARGE_PERCENT{ 4 };
				static constexpr int32_t DISCOUNT_AMOUNT{ 5 };
				static constexpr int32_t DISCOUNT_PERCENT{ 6 };
				static constexpr int32_t DILUTION_LEVY_AMOUNT{ 7 };
				static constexpr int32_t DILUTION_LEVY_PERCENT{ 8 };
				static constexpr int32_t EXIT_CHARGE_AMOUNT{ 9 };
			};

			// ContAmtValue(520): FLOAT
			struct ContAmtValue
			{
				static constexpr uint16_t tag{ 520 };
			};

			// ContAmtCurr(521): CURRENCY
			struct ContAmtCurr
			{
				static constexpr uint16_t tag{ 521 };
			};

			// OwnerType(522): INT
			struct OwnerType
			{
				static constexpr uint16_t tag{ 522 };
				static constexpr int32_t INDIVIDUAL_INVESTOR{ 1 };
				static constexpr int32_t NETWORKING_SUB_ACCOUNT{ 10 };
				static constexpr int32_t NON_PROFIT_ORGANIZATION{ 11 };
				static constexpr int32_t CORPORATE_BODY{ 12 };
				static constexpr int32_t NOMINEE{ 13 };
				static constexpr int32_t PUBLIC_COMPANY{ 2 };
				static constexpr int32_t PRIVATE_COMPANY{ 3 };
				static constexpr int32_t INDIVIDUAL_TRUSTEE{ 4 };
				static constexpr int32_t COMPANY_TRUSTEE{ 5 };
				static constexpr int32_t PENSION_PLAN{ 6 };
				static constexpr int32_t CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT{ 7 };
				static constexpr int32_t TRUSTS{ 8 };
				static constexpr int32_t FIDUCIARIES{ 9 };
			};

			// PartySubID(523): STRING
			struct PartySubID
			{
				static constexpr uint16_t tag{ 523 };
			};

			// NestedPartyID(524): STRING
			struct NestedPartyID
			{
				static constexpr uint16_t tag{ 524 };
			};

			// NestedPartyIDSource(525): CHAR
			struct NestedPartyIDSource
			{
				static constexpr uint16_t tag{ 525 };
			};

			// SecondaryClOrdID(526): STRING
			struct SecondaryClOrdID
			{
				static constexpr uint16_t tag{ 526 };
			};

			// SecondaryExecID(527): STRING
			struct SecondaryExecID
			{
				static constexpr uint16_t tag{ 527 };
			};

			// OrderCapacity(528): CHAR
			struct OrderCapacity
			{
				static constexpr uint16_t tag{ 528 };
				static constexpr char AGENCY{ 'A' };
				static constexpr char PROPRIETARY{ 'G' };
				static constexpr char INDIVIDUAL{ 'I' };
				static constexpr char PRINCIPAL{ 'P' };
				static constexpr char RISKLESS_PRINCIPAL{ 'R' };
				static constexpr char AGENT_FOR_OTHER_MEMBER{ 'W' };
			};

			// OrderRestrictions(529): MULTIPLECHARVALUE
			struct OrderRestrictions
			{
				static constexpr uint16_t tag{ 529 };
				static inline const std::string PROGRAM_TRADE{ "1" };
				static inline const std::string INDEX_ARBITRAGE{ "2" };
				static inline const std::string NON_INDEX_ARBITRAGE{ "3" };
				static inline const std::string COMPETING_MARKET_MAKER{ "4" };
				static inline const std::string ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY{ "5" };
				static inline const std::string ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY{ "6" };
				static inline const std::string FOREIGN_ENTITY{ "7" };
				static inline const std::string EXTERNAL_MARKET_PARTICIPANT{ "8" };
				static inline const std::string EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE{ "9" };
				static inline const std::string RISKLESS_ARBITRAGE{ "A" };
				static inline const std::string ISSUER_HOLDING{ "B" };
				static inline const std::string ISSUE_PRICE_STABILIZATION{ "C" };
				static inline const std::string NON_ALGORITHMIC{ "D" };
				static inline const std::string ALGORITHMIC{ "E" };
				static inline const std::string CROSS{ "F" };
			};

			// MassCancelRequestType(530): CHAR
			struct MassCancelRequestType
			{
				static constexpr uint16_t tag{ 530 };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITY{ '1' };
				static constexpr char CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY{ '2' };
				static constexpr char CANCEL_ORDERS_FOR_A_PRODUCT{ '3' };
				static constexpr char CANCEL_ORDERS_FOR_A_CFICODE{ '4' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITYTYPE{ '5' };
				static constexpr char CANCEL_ORDERS_FOR_A_TRADING_SESSION{ '6' };
				static constexpr char CANCEL_ALL_ORDERS{ '7' };
				static constexpr char CANCEL_ORDERS_FOR_A_MARKET{ '8' };
				static constexpr char CANCEL_ORDERS_FOR_A_MARKET_SEGMENT{ '9' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITY_GROUP{ 'A' };
				static constexpr char CANCEL_FOR_SECURITY_ISSUER{ 'B' };
				static constexpr char CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY{ 'C' };
			};

			// MassCancelResponse(531): CHAR
			struct MassCancelResponse
			{
				static constexpr uint16_t tag{ 531 };
				static constexpr char CANCEL_REQUEST_REJECTED{ '0' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITY{ '1' };
				static constexpr char CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY{ '2' };
				static constexpr char CANCEL_ORDERS_FOR_A_PRODUCT{ '3' };
				static constexpr char CANCEL_ORDERS_FOR_A_CFICODE{ '4' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITYTYPE{ '5' };
				static constexpr char CANCEL_ORDERS_FOR_A_TRADING_SESSION{ '6' };
				static constexpr char CANCEL_ALL_ORDERS{ '7' };
				static constexpr char CANCEL_ORDERS_FOR_A_MARKET{ '8' };
				static constexpr char CANCEL_ORDERS_FOR_A_MARKET_SEGMENT{ '9' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITY_GROUP{ 'A' };
				static constexpr char CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER{ 'B' };
				static constexpr char CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY{ 'C' };
			};

			// MassCancelRejectReason(532): INT
			struct MassCancelRejectReason
			{
				static constexpr uint16_t tag{ 532 };
				static constexpr int32_t MASS_CANCEL_NOT_SUPPORTED{ 0 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITY{ 1 };
				static constexpr int32_t INVALID_OR_UNKOWN_UNDERLYING_SECURITY{ 2 };
				static constexpr int32_t INVALID_OR_UNKNOWN_PRODUCT{ 3 };
				static constexpr int32_t INVALID_OR_UNKNOWN_CFICODE{ 4 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITYTYPE{ 5 };
				static constexpr int32_t INVALID_OR_UNKNOWN_TRADING_SESSION{ 6 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t INVALID_OR_UNKNOWN_MARKET{ 7 };
				static constexpr int32_t INVALID_OR_UNKOWN_MARKET_SEGMENT{ 8 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITY_GROUP{ 9 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITY_ISSUER{ 10 };
				static constexpr int32_t INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY{ 11 };
			};

			// TotalAffectedOrders(533): INT
			struct TotalAffectedOrders
			{
				static constexpr uint16_t tag{ 533 };
			};

			// NoAffectedOrders(534): NUMINGROUP
			struct NoAffectedOrders
			{
				static constexpr uint16_t tag{ 534 };
			};

			// AffectedOrderID(535): STRING
			struct AffectedOrderID
			{
				static constexpr uint16_t tag{ 535 };
			};

			// AffectedSecondaryOrderID(536): STRING
			struct AffectedSecondaryOrderID
			{
				static constexpr uint16_t tag{ 536 };
			};

			// QuoteType(537): INT
			struct QuoteType
			{
				static constexpr uint16_t tag{ 537 };
				static constexpr int32_t INDICATIVE{ 0 };
				static constexpr int32_t TRADEABLE{ 1 };
				static constexpr int32_t RESTRICTED_TRADEABLE{ 2 };
				static constexpr int32_t COUNTER{ 3 };
			};

			// NestedPartyRole(538): INT
			struct NestedPartyRole
			{
				static constexpr uint16_t tag{ 538 };
			};

			// NoNestedPartyIDs(539): NUMINGROUP
			struct NoNestedPartyIDs
			{
				static constexpr uint16_t tag{ 539 };
			};

			// TotalAccruedInterestAmt(540): AMT
			struct TotalAccruedInterestAmt
			{
				static constexpr uint16_t tag{ 540 };
			};

			// MaturityDate(541): LOCALMKTDATE
			struct MaturityDate
			{
				static constexpr uint16_t tag{ 541 };
			};

			// UnderlyingMaturityDate(542): LOCALMKTDATE
			struct UnderlyingMaturityDate
			{
				static constexpr uint16_t tag{ 542 };
			};

			// InstrRegistry(543): STRING
			struct InstrRegistry
			{
				static constexpr uint16_t tag{ 543 };
			};

			// CashMargin(544): CHAR
			struct CashMargin
			{
				static constexpr uint16_t tag{ 544 };
				static constexpr char CASH{ '1' };
				static constexpr char MARGIN_OPEN{ '2' };
				static constexpr char MARGIN_CLOSE{ '3' };
			};

			// NestedPartySubID(545): STRING
			struct NestedPartySubID
			{
				static constexpr uint16_t tag{ 545 };
			};

			// Scope(546): MULTIPLECHARVALUE
			struct Scope
			{
				static constexpr uint16_t tag{ 546 };
				static inline const std::string LOCAL_MARKET{ "1" };
				static inline const std::string NATIONAL{ "2" };
				static inline const std::string GLOBAL{ "3" };
			};

			// MDImplicitDelete(547): BOOLEAN
			struct MDImplicitDelete
			{
				static constexpr uint16_t tag{ 547 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// CrossID(548): STRING
			struct CrossID
			{
				static constexpr uint16_t tag{ 548 };
			};

			// CrossType(549): INT
			struct CrossType
			{
				static constexpr uint16_t tag{ 549 };
				static constexpr int32_t CROSS_AON{ 1 };
				static constexpr int32_t CROSS_IOC{ 2 };
				static constexpr int32_t CROSS_ONE_SIDE{ 3 };
				static constexpr int32_t CROSS_SAME_PRICE{ 4 };
			};

			// CrossPrioritization(550): INT
			struct CrossPrioritization
			{
				static constexpr uint16_t tag{ 550 };
				static constexpr int32_t NONE{ 0 };
				static constexpr int32_t BUY_SIDE_IS_PRIORITIZED{ 1 };
				static constexpr int32_t SELL_SIDE_IS_PRIORITIZED{ 2 };
			};

			// OrigCrossID(551): STRING
			struct OrigCrossID
			{
				static constexpr uint16_t tag{ 551 };
			};

			// NoSides(552): NUMINGROUP
			struct NoSides
			{
				static constexpr uint16_t tag{ 552 };
				static inline const std::string ONE_SIDE{ "1" };
				static inline const std::string BOTH_SIDES{ "2" };
			};

			// Username(553): STRING
			struct Username
			{
				static constexpr uint16_t tag{ 553 };
			};

			// Password(554): STRING
			struct Password
			{
				static constexpr uint16_t tag{ 554 };
			};

			// NoLegs(555): NUMINGROUP
			struct NoLegs
			{
				static constexpr uint16_t tag{ 555 };
			};

			// LegCurrency(556): CURRENCY
			struct LegCurrency
			{
				static constexpr uint16_t tag{ 556 };
			};

			// TotNoSecurityTypes(557): INT
			struct TotNoSecurityTypes
			{
				static constexpr uint16_t tag{ 557 };
			};

			// NoSecurityTypes(558): NUMINGROUP
			struct NoSecurityTypes
			{
				static constexpr uint16_t tag{ 558 };
			};

			// SecurityListRequestType(559): INT
			struct SecurityListRequestType
			{
				static constexpr uint16_t tag{ 559 };
				static constexpr int32_t SYMBOL{ 0 };
				static constexpr int32_t SECURITYTYPE_AND_OR_CFICODE{ 1 };
				static constexpr int32_t PRODUCT{ 2 };
				static constexpr int32_t TRADINGSESSIONID{ 3 };
				static constexpr int32_t ALL_SECURITIES{ 4 };
				static constexpr int32_t MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID{ 5 };
			};

			// SecurityRequestResult(560): INT
			struct SecurityRequestResult
			{
				static constexpr uint16_t tag{ 560 };
				static constexpr int32_t VALID_REQUEST{ 0 };
				static constexpr int32_t INVALID_OR_UNSUPPORTED_REQUEST{ 1 };
				static constexpr int32_t NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA{ 2 };
				static constexpr int32_t NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA{ 3 };
				static constexpr int32_t INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE{ 4 };
				static constexpr int32_t REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED{ 5 };
			};

			// RoundLot(561): QTY
			struct RoundLot
			{
				static constexpr uint16_t tag{ 561 };
			};

			// MinTradeVol(562): QTY
			struct MinTradeVol
			{
				static constexpr uint16_t tag{ 562 };
			};

			// MultiLegRptTypeReq(563): INT
			struct MultiLegRptTypeReq
			{
				static constexpr uint16_t tag{ 563 };
				static constexpr int32_t REPORT_BY_MULITLEG_SECURITY_ONLY{ 0 };
				static constexpr int32_t REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY{ 1 };
				static constexpr int32_t REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY{ 2 };
			};

			// LegPositionEffect(564): CHAR
			struct LegPositionEffect
			{
				static constexpr uint16_t tag{ 564 };
			};

			// LegCoveredOrUncovered(565): INT
			struct LegCoveredOrUncovered
			{
				static constexpr uint16_t tag{ 565 };
			};

			// LegPrice(566): PRICE
			struct LegPrice
			{
				static constexpr uint16_t tag{ 566 };
			};

			// TradSesStatusRejReason(567): INT
			struct TradSesStatusRejReason
			{
				static constexpr uint16_t tag{ 567 };
				static constexpr int32_t UNKNOWN_OR_INVALID_TRADINGSESSIONID{ 1 };
				static constexpr int32_t OTHER{ 99 };
			};

			// TradeRequestID(568): STRING
			struct TradeRequestID
			{
				static constexpr uint16_t tag{ 568 };
			};

			// TradeRequestType(569): INT
			struct TradeRequestType
			{
				static constexpr uint16_t tag{ 569 };
				static constexpr int32_t ALL_TRADES{ 0 };
				static constexpr int32_t MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST{ 1 };
				static constexpr int32_t UNMATCHED_TRADES_THAT_MATCH_CRITERIA{ 2 };
				static constexpr int32_t UNREPORTED_TRADES_THAT_MATCH_CRITERIA{ 3 };
				static constexpr int32_t ADVISORIES_THAT_MATCH_CRITERIA{ 4 };
			};

			// PreviouslyReported(570): BOOLEAN
			struct PreviouslyReported
			{
				static constexpr uint16_t tag{ 570 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// TradeReportID(571): STRING
			struct TradeReportID
			{
				static constexpr uint16_t tag{ 571 };
			};

			// TradeReportRefID(572): STRING
			struct TradeReportRefID
			{
				static constexpr uint16_t tag{ 572 };
			};

			// MatchStatus(573): CHAR
			struct MatchStatus
			{
				static constexpr uint16_t tag{ 573 };
				static constexpr char COMPARED_MATCHED_OR_AFFIRMED{ '0' };
				static constexpr char UNCOMPARED_UNMATCHED_OR_UNAFFIRMED{ '1' };
				static constexpr char ADVISORY_OR_ALERT{ '2' };
			};

			// MatchType(574): STRING
			struct MatchType
			{
				static constexpr uint16_t tag{ 574 };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME{ "A1" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES{ "A2" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME{ "A3" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES{ "A4" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME{ "A5" };
				static inline const std::string ACT_ACCEPTED_TRADE{ "M3" };
				static inline const std::string ACT_DEFAULT_TRADE{ "M4" };
				static inline const std::string ACT_DEFAULT_AFTER_M2{ "M5" };
				static inline const std::string ACT_M6_MATCH{ "M6" };
				static inline const std::string COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS{ "AQ" };
				static inline const std::string EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH{ "M1" };
				static inline const std::string SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH{ "M2" };
				static inline const std::string OCS_LOCKED_IN_NON_ACT{ "MT" };
				static inline const std::string SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIED{ "S1" };
				static inline const std::string SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED{ "S2" };
				static inline const std::string SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED{ "S3" };
				static inline const std::string SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED{ "S4" };
				static inline const std::string SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED{ "S5" };
				static inline const std::string ONE_PARTY_TRADE_REPORT{ "1" };
				static inline const std::string TWO_PARTY_TRADE_REPORT{ "2" };
				static inline const std::string CONFIRMED_TRADE_REPORT{ "3" };
				static inline const std::string AUTO_MATCH{ "4" };
				static inline const std::string CROSS_AUCTION{ "5" };
				static inline const std::string COUNTER_ORDER_SELECTION{ "6" };
				static inline const std::string CALL_AUCTION{ "7" };
				static inline const std::string ISSUING_BUY_BACK_AUCTION{ "8" };
			};

			// OddLot(575): BOOLEAN
			struct OddLot
			{
				static constexpr uint16_t tag{ 575 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// NoClearingInstructions(576): NUMINGROUP
			struct NoClearingInstructions
			{
				static constexpr uint16_t tag{ 576 };
			};

			// ClearingInstruction(577): INT
			struct ClearingInstruction
			{
				static constexpr uint16_t tag{ 577 };
				static constexpr int32_t PROCESS_NORMALLY{ 0 };
				static constexpr int32_t EXCLUDE_FROM_ALL_NETTING{ 1 };
				static constexpr int32_t AUTOMATIC_GIVE_UP_MODE{ 10 };
				static constexpr int32_t QUALIFIED_SERVICE_REPRESENTATIVE_QSR{ 11 };
				static constexpr int32_t CUSTOMER_TRADE{ 12 };
				static constexpr int32_t SELF_CLEARING{ 13 };
				static constexpr int32_t BILATERAL_NETTING_ONLY{ 2 };
				static constexpr int32_t EX_CLEARING{ 3 };
				static constexpr int32_t SPECIAL_TRADE{ 4 };
				static constexpr int32_t MULTILATERAL_NETTING{ 5 };
				static constexpr int32_t CLEAR_AGAINST_CENTRAL_COUNTERPARTY{ 6 };
				static constexpr int32_t EXCLUDE_FROM_CENTRAL_COUNTERPARTY{ 7 };
				static constexpr int32_t MANUAL_MODE{ 8 };
				static constexpr int32_t AUTOMATIC_POSTING_MODE{ 9 };
			};

			// TradeInputSource(578): STRING
			struct TradeInputSource
			{
				static constexpr uint16_t tag{ 578 };
			};

			// TradeInputDevice(579): STRING
			struct TradeInputDevice
			{
				static constexpr uint16_t tag{ 579 };
			};

			// NoDates(580): INT
			struct NoDates
			{
				static constexpr uint16_t tag{ 580 };
			};

			// AccountType(581): INT
			struct AccountType
			{
				static constexpr uint16_t tag{ 581 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS{ 1 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS{ 2 };
				static constexpr int32_t HOUSE_TRADER{ 3 };
				static constexpr int32_t FLOOR_TRADER{ 4 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED{ 6 };
				static constexpr int32_t ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED{ 7 };
				static constexpr int32_t JOINT_BACK_OFFICE_ACCOUNT{ 8 };
			};

			// CustOrderCapacity(582): INT
			struct CustOrderCapacity
			{
				static constexpr uint16_t tag{ 582 };
				static constexpr int32_t MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT{ 1 };
				static constexpr int32_t CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT{ 2 };
				static constexpr int32_t MEMBER_TRADING_FOR_ANOTHER_MEMBER{ 3 };
				static constexpr int32_t ALL_OTHER{ 4 };
			};

			// ClOrdLinkID(583): STRING
			struct ClOrdLinkID
			{
				static constexpr uint16_t tag{ 583 };
			};

			// MassStatusReqID(584): STRING
			struct MassStatusReqID
			{
				static constexpr uint16_t tag{ 584 };
			};

			// MassStatusReqType(585): INT
			struct MassStatusReqType
			{
				static constexpr uint16_t tag{ 585 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_SECURITY{ 1 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY{ 2 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_PRODUCT{ 3 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_CFICODE{ 4 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE{ 5 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION{ 6 };
				static constexpr int32_t STATUS_FOR_ALL_ORDERS{ 7 };
				static constexpr int32_t STATUS_FOR_ORDERS_FOR_A_PARTYID{ 8 };
				static constexpr int32_t STATUS_FOR_SECURITY_ISSUER{ 9 };
				static constexpr int32_t STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY{ 10 };
			};

			// OrigOrdModTime(586): UTCTIMESTAMP
			struct OrigOrdModTime
			{
				static constexpr uint16_t tag{ 586 };
			};

			// LegSettlType(587): CHAR
			struct LegSettlType
			{
				static constexpr uint16_t tag{ 587 };
			};

			// LegSettlDate(588): LOCALMKTDATE
			struct LegSettlDate
			{
				static constexpr uint16_t tag{ 588 };
			};

			// DayBookingInst(589): CHAR
			struct DayBookingInst
			{
				static constexpr uint16_t tag{ 589 };
				static constexpr char CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR{ '0' };
				static constexpr char SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING{ '1' };
				static constexpr char ACCUMULATE{ '2' };
			};

			// BookingUnit(590): CHAR
			struct BookingUnit
			{
				static constexpr uint16_t tag{ 590 };
				static constexpr char EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT{ '0' };
				static constexpr char AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER{ '1' };
				static constexpr char AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE{ '2' };
			};

			// PreallocMethod(591): CHAR
			struct PreallocMethod
			{
				static constexpr uint16_t tag{ 591 };
				static constexpr char PRO_RATA{ '0' };
				static constexpr char DO_NOT_PRO_RATA{ '1' };
			};

			// UnderlyingCountryOfIssue(592): COUNTRY
			struct UnderlyingCountryOfIssue
			{
				static constexpr uint16_t tag{ 592 };
			};

			// UnderlyingStateOrProvinceOfIssue(593): STRING
			struct UnderlyingStateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 593 };
			};

			// UnderlyingLocaleOfIssue(594): STRING
			struct UnderlyingLocaleOfIssue
			{
				static constexpr uint16_t tag{ 594 };
			};

			// UnderlyingInstrRegistry(595): STRING
			struct UnderlyingInstrRegistry
			{
				static constexpr uint16_t tag{ 595 };
			};

			// LegCountryOfIssue(596): COUNTRY
			struct LegCountryOfIssue
			{
				static constexpr uint16_t tag{ 596 };
			};

			// LegStateOrProvinceOfIssue(597): STRING
			struct LegStateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 597 };
			};

			// LegLocaleOfIssue(598): STRING
			struct LegLocaleOfIssue
			{
				static constexpr uint16_t tag{ 598 };
			};

			// LegInstrRegistry(599): STRING
			struct LegInstrRegistry
			{
				static constexpr uint16_t tag{ 599 };
			};

			// LegSymbol(600): STRING
			struct LegSymbol
			{
				static constexpr uint16_t tag{ 600 };
			};

			// LegSymbolSfx(601): STRING
			struct LegSymbolSfx
			{
				static constexpr uint16_t tag{ 601 };
			};

			// LegSecurityID(602): STRING
			struct LegSecurityID
			{
				static constexpr uint16_t tag{ 602 };
			};

			// LegSecurityIDSource(603): STRING
			struct LegSecurityIDSource
			{
				static constexpr uint16_t tag{ 603 };
			};

			// NoLegSecurityAltID(604): STRING
			struct NoLegSecurityAltID
			{
				static constexpr uint16_t tag{ 604 };
			};

			// LegSecurityAltID(605): STRING
			struct LegSecurityAltID
			{
				static constexpr uint16_t tag{ 605 };
			};

			// LegSecurityAltIDSource(606): STRING
			struct LegSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 606 };
			};

			// LegProduct(607): INT
			struct LegProduct
			{
				static constexpr uint16_t tag{ 607 };
			};

			// LegCFICode(608): STRING
			struct LegCFICode
			{
				static constexpr uint16_t tag{ 608 };
			};

			// LegSecurityType(609): STRING
			struct LegSecurityType
			{
				static constexpr uint16_t tag{ 609 };
			};

			// LegMaturityMonthYear(610): MONTHYEAR
			struct LegMaturityMonthYear
			{
				static constexpr uint16_t tag{ 610 };
			};

			// LegMaturityDate(611): LOCALMKTDATE
			struct LegMaturityDate
			{
				static constexpr uint16_t tag{ 611 };
			};

			// LegStrikePrice(612): PRICE
			struct LegStrikePrice
			{
				static constexpr uint16_t tag{ 612 };
			};

			// LegOptAttribute(613): CHAR
			struct LegOptAttribute
			{
				static constexpr uint16_t tag{ 613 };
			};

			// LegContractMultiplier(614): FLOAT
			struct LegContractMultiplier
			{
				static constexpr uint16_t tag{ 614 };
			};

			// LegCouponRate(615): PERCENTAGE
			struct LegCouponRate
			{
				static constexpr uint16_t tag{ 615 };
			};

			// LegSecurityExchange(616): EXCHANGE
			struct LegSecurityExchange
			{
				static constexpr uint16_t tag{ 616 };
			};

			// LegIssuer(617): STRING
			struct LegIssuer
			{
				static constexpr uint16_t tag{ 617 };
			};

			// EncodedLegIssuerLen(618): LENGTH
			struct EncodedLegIssuerLen
			{
				static constexpr uint16_t tag{ 618 };
			};

			// EncodedLegIssuer(619): DATA
			struct EncodedLegIssuer
			{
				static constexpr uint16_t tag{ 619 };
			};

			// LegSecurityDesc(620): STRING
			struct LegSecurityDesc
			{
				static constexpr uint16_t tag{ 620 };
			};

			// EncodedLegSecurityDescLen(621): LENGTH
			struct EncodedLegSecurityDescLen
			{
				static constexpr uint16_t tag{ 621 };
			};

			// EncodedLegSecurityDesc(622): DATA
			struct EncodedLegSecurityDesc
			{
				static constexpr uint16_t tag{ 622 };
			};

			// LegRatioQty(623): FLOAT
			struct LegRatioQty
			{
				static constexpr uint16_t tag{ 623 };
			};

			// LegSide(624): CHAR
			struct LegSide
			{
				static constexpr uint16_t tag{ 624 };
			};

			// TradingSessionSubID(625): STRING
			struct TradingSessionSubID
			{
				static constexpr uint16_t tag{ 625 };
				static inline const std::string PRE_TRADING{ "1" };
				static inline const std::string OPENING_OR_OPENING_AUCTION{ "2" };
				static inline const std::string _3{ "3" };
				static inline const std::string CLOSING_OR_CLOSING_AUCTION{ "4" };
				static inline const std::string POST_TRADING{ "5" };
				static inline const std::string INTRADAY_AUCTION{ "6" };
				static inline const std::string QUIESCENT{ "7" };
			};

			// AllocType(626): INT
			struct AllocType
			{
				static constexpr uint16_t tag{ 626 };
				static constexpr int32_t CALCULATED{ 1 };
				static constexpr int32_t PRELIMINARY{ 2 };
				static constexpr int32_t SELLSIDE_CALCULATED_USING_PRELIMINARY{ 3 };
				static constexpr int32_t SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY{ 4 };
				static constexpr int32_t READY_TO_BOOK{ 5 };
				static constexpr int32_t BUYSIDE_READY_TO_BOOK{ 6 };
				static constexpr int32_t WAREHOUSE_INSTRUCTION{ 7 };
				static constexpr int32_t REQUEST_TO_INTERMEDIARY{ 8 };
				static constexpr int32_t ACCEPT{ 9 };
				static constexpr int32_t REJECT{ 10 };
				static constexpr int32_t ACCEPT_PENDING{ 11 };
				static constexpr int32_t INCOMPLETE_GROUP{ 12 };
				static constexpr int32_t COMPLETE_GROUP{ 13 };
				static constexpr int32_t REVERSAL_PENDING{ 14 };
			};

			// NoHops(627): NUMINGROUP
			struct NoHops
			{
				static constexpr uint16_t tag{ 627 };
			};

			// HopCompID(628): STRING
			struct HopCompID
			{
				static constexpr uint16_t tag{ 628 };
			};

			// HopSendingTime(629): UTCTIMESTAMP
			struct HopSendingTime
			{
				static constexpr uint16_t tag{ 629 };
			};

			// HopRefID(630): SEQNUM
			struct HopRefID
			{
				static constexpr uint16_t tag{ 630 };
			};

			// MidPx(631): PRICE
			struct MidPx
			{
				static constexpr uint16_t tag{ 631 };
			};

			// BidYield(632): PERCENTAGE
			struct BidYield
			{
				static constexpr uint16_t tag{ 632 };
			};

			// MidYield(633): PERCENTAGE
			struct MidYield
			{
				static constexpr uint16_t tag{ 633 };
			};

			// OfferYield(634): PERCENTAGE
			struct OfferYield
			{
				static constexpr uint16_t tag{ 634 };
			};

			// ClearingFeeIndicator(635): STRING
			struct ClearingFeeIndicator
			{
				static constexpr uint16_t tag{ 635 };
				static inline const std::string _1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT{ "1" };
				static inline const std::string _2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT{ "2" };
				static inline const std::string _3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT{ "3" };
				static inline const std::string _4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT{ "4" };
				static inline const std::string _5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT{ "5" };
				static inline const std::string _6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT{ "9" };
				static inline const std::string CBOE_MEMBER{ "B" };
				static inline const std::string NON_MEMBER_AND_CUSTOMER{ "C" };
				static inline const std::string EQUITY_MEMBER_AND_CLEARING_MEMBER{ "E" };
				static inline const std::string FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS{ "F" };
				static inline const std::string _106H_AND_106J_FIRMS{ "H" };
				static inline const std::string GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS{ "I" };
				static inline const std::string LESSEE_106F_EMPLOYEES{ "L" };
				static inline const std::string ALL_OTHER_OWNERSHIP_TYPES{ "M" };
			};

			// WorkingIndicator(636): BOOLEAN
			struct WorkingIndicator
			{
				static constexpr uint16_t tag{ 636 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// LegLastPx(637): PRICE
			struct LegLastPx
			{
				static constexpr uint16_t tag{ 637 };
			};

			// PriorityIndicator(638): INT
			struct PriorityIndicator
			{
				static constexpr uint16_t tag{ 638 };
				static constexpr int32_t PRIORITY_UNCHANGED{ 0 };
				static constexpr int32_t LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE{ 1 };
			};

			// PriceImprovement(639): PRICEOFFSET
			struct PriceImprovement
			{
				static constexpr uint16_t tag{ 639 };
			};

			// Price2(640): PRICE
			struct Price2
			{
				static constexpr uint16_t tag{ 640 };
			};

			// LastForwardPoints2(641): PRICEOFFSET
			struct LastForwardPoints2
			{
				static constexpr uint16_t tag{ 641 };
			};

			// BidForwardPoints2(642): PRICEOFFSET
			struct BidForwardPoints2
			{
				static constexpr uint16_t tag{ 642 };
			};

			// OfferForwardPoints2(643): PRICEOFFSET
			struct OfferForwardPoints2
			{
				static constexpr uint16_t tag{ 643 };
			};

			// RFQReqID(644): STRING
			struct RFQReqID
			{
				static constexpr uint16_t tag{ 644 };
			};

			// MktBidPx(645): PRICE
			struct MktBidPx
			{
				static constexpr uint16_t tag{ 645 };
			};

			// MktOfferPx(646): PRICE
			struct MktOfferPx
			{
				static constexpr uint16_t tag{ 646 };
			};

			// MinBidSize(647): QTY
			struct MinBidSize
			{
				static constexpr uint16_t tag{ 647 };
			};

			// MinOfferSize(648): QTY
			struct MinOfferSize
			{
				static constexpr uint16_t tag{ 648 };
			};

			// QuoteStatusReqID(649): STRING
			struct QuoteStatusReqID
			{
				static constexpr uint16_t tag{ 649 };
			};

			// LegalConfirm(650): BOOLEAN
			struct LegalConfirm
			{
				static constexpr uint16_t tag{ 650 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// UnderlyingLastPx(651): PRICE
			struct UnderlyingLastPx
			{
				static constexpr uint16_t tag{ 651 };
			};

			// UnderlyingLastQty(652): QTY
			struct UnderlyingLastQty
			{
				static constexpr uint16_t tag{ 652 };
			};

			// SecDefStatus(653): INT
			struct SecDefStatus
			{
				static constexpr uint16_t tag{ 653 };
				static constexpr int32_t PENDING_APPROVAL{ 0 };
				static constexpr int32_t APPROVED{ 1 };
				static constexpr int32_t REJECTED{ 2 };
				static constexpr int32_t UNAUTHORIZED_REQUEST{ 3 };
				static constexpr int32_t INVALID_DEFINITION_REQUEST{ 4 };
			};

			// LegRefID(654): STRING
			struct LegRefID
			{
				static constexpr uint16_t tag{ 654 };
			};

			// ContraLegRefID(655): STRING
			struct ContraLegRefID
			{
				static constexpr uint16_t tag{ 655 };
			};

			// SettlCurrBidFxRate(656): FLOAT
			struct SettlCurrBidFxRate
			{
				static constexpr uint16_t tag{ 656 };
			};

			// SettlCurrOfferFxRate(657): FLOAT
			struct SettlCurrOfferFxRate
			{
				static constexpr uint16_t tag{ 657 };
			};

			// QuoteRequestRejectReason(658): INT
			struct QuoteRequestRejectReason
			{
				static constexpr uint16_t tag{ 658 };
				static constexpr int32_t UNKNOWN_SYMBOL{ 1 };
				static constexpr int32_t PASS{ 10 };
				static constexpr int32_t EXCHANGE{ 2 };
				static constexpr int32_t QUOTE_REQUEST_EXCEEDS_LIMIT{ 3 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t INVALID_PRICE{ 5 };
				static constexpr int32_t NOT_AUTHORIZED_TO_REQUEST_QUOTE{ 6 };
				static constexpr int32_t NO_MATCH_FOR_INQUIRY{ 7 };
				static constexpr int32_t NO_MARKET_FOR_INSTRUMENT{ 8 };
				static constexpr int32_t NO_INVENTORY{ 9 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t INSUFFICIENT_CREDIT{ 11 };
			};

			// SideComplianceID(659): STRING
			struct SideComplianceID
			{
				static constexpr uint16_t tag{ 659 };
			};

			// AcctIDSource(660): INT
			struct AcctIDSource
			{
				static constexpr uint16_t tag{ 660 };
				static constexpr int32_t BIC{ 1 };
				static constexpr int32_t SID_CODE{ 2 };
				static constexpr int32_t TFM{ 3 };
				static constexpr int32_t OMGEO{ 4 };
				static constexpr int32_t DTCC_CODE{ 5 };
				static constexpr int32_t OTHER{ 99 };
			};

			// AllocAcctIDSource(661): INT
			struct AllocAcctIDSource
			{
				static constexpr uint16_t tag{ 661 };
			};

			// BenchmarkPrice(662): PRICE
			struct BenchmarkPrice
			{
				static constexpr uint16_t tag{ 662 };
			};

			// BenchmarkPriceType(663): INT
			struct BenchmarkPriceType
			{
				static constexpr uint16_t tag{ 663 };
			};

			// ConfirmID(664): STRING
			struct ConfirmID
			{
				static constexpr uint16_t tag{ 664 };
			};

			// ConfirmStatus(665): INT
			struct ConfirmStatus
			{
				static constexpr uint16_t tag{ 665 };
				static constexpr int32_t RECEIVED{ 1 };
				static constexpr int32_t MISMATCHED_ACCOUNT{ 2 };
				static constexpr int32_t MISSING_SETTLEMENT_INSTRUCTIONS{ 3 };
				static constexpr int32_t CONFIRMED{ 4 };
				static constexpr int32_t REQUEST_REJECTED{ 5 };
			};

			// ConfirmTransType(666): INT
			struct ConfirmTransType
			{
				static constexpr uint16_t tag{ 666 };
				static constexpr int32_t NEW{ 0 };
				static constexpr int32_t REPLACE{ 1 };
				static constexpr int32_t CANCEL{ 2 };
			};

			// ContractSettlMonth(667): MONTHYEAR
			struct ContractSettlMonth
			{
				static constexpr uint16_t tag{ 667 };
			};

			// DeliveryForm(668): INT
			struct DeliveryForm
			{
				static constexpr uint16_t tag{ 668 };
				static constexpr int32_t BOOK_ENTRY{ 1 };
				static constexpr int32_t BEARER{ 2 };
			};

			// LastParPx(669): PRICE
			struct LastParPx
			{
				static constexpr uint16_t tag{ 669 };
			};

			// NoLegAllocs(670): NUMINGROUP
			struct NoLegAllocs
			{
				static constexpr uint16_t tag{ 670 };
			};

			// LegAllocAccount(671): STRING
			struct LegAllocAccount
			{
				static constexpr uint16_t tag{ 671 };
			};

			// LegIndividualAllocID(672): STRING
			struct LegIndividualAllocID
			{
				static constexpr uint16_t tag{ 672 };
			};

			// LegAllocQty(673): QTY
			struct LegAllocQty
			{
				static constexpr uint16_t tag{ 673 };
			};

			// LegAllocAcctIDSource(674): STRING
			struct LegAllocAcctIDSource
			{
				static constexpr uint16_t tag{ 674 };
			};

			// LegSettlCurrency(675): CURRENCY
			struct LegSettlCurrency
			{
				static constexpr uint16_t tag{ 675 };
			};

			// LegBenchmarkCurveCurrency(676): CURRENCY
			struct LegBenchmarkCurveCurrency
			{
				static constexpr uint16_t tag{ 676 };
			};

			// LegBenchmarkCurveName(677): STRING
			struct LegBenchmarkCurveName
			{
				static constexpr uint16_t tag{ 677 };
			};

			// LegBenchmarkCurvePoint(678): STRING
			struct LegBenchmarkCurvePoint
			{
				static constexpr uint16_t tag{ 678 };
			};

			// LegBenchmarkPrice(679): PRICE
			struct LegBenchmarkPrice
			{
				static constexpr uint16_t tag{ 679 };
			};

			// LegBenchmarkPriceType(680): INT
			struct LegBenchmarkPriceType
			{
				static constexpr uint16_t tag{ 680 };
			};

			// LegBidPx(681): PRICE
			struct LegBidPx
			{
				static constexpr uint16_t tag{ 681 };
			};

			// LegIOIQty(682): STRING
			struct LegIOIQty
			{
				static constexpr uint16_t tag{ 682 };
			};

			// NoLegStipulations(683): NUMINGROUP
			struct NoLegStipulations
			{
				static constexpr uint16_t tag{ 683 };
			};

			// LegOfferPx(684): PRICE
			struct LegOfferPx
			{
				static constexpr uint16_t tag{ 684 };
			};

			// LegOrderQty(685): QTY
			struct LegOrderQty
			{
				static constexpr uint16_t tag{ 685 };
			};

			// LegPriceType(686): INT
			struct LegPriceType
			{
				static constexpr uint16_t tag{ 686 };
			};

			// LegQty(687): QTY
			struct LegQty
			{
				static constexpr uint16_t tag{ 687 };
			};

			// LegStipulationType(688): STRING
			struct LegStipulationType
			{
				static constexpr uint16_t tag{ 688 };
			};

			// LegStipulationValue(689): STRING
			struct LegStipulationValue
			{
				static constexpr uint16_t tag{ 689 };
			};

			// LegSwapType(690): INT
			struct LegSwapType
			{
				static constexpr uint16_t tag{ 690 };
				static constexpr int32_t PAR_FOR_PAR{ 1 };
				static constexpr int32_t MODIFIED_DURATION{ 2 };
				static constexpr int32_t RISK{ 4 };
				static constexpr int32_t PROCEEDS{ 5 };
			};

			// Pool(691): STRING
			struct Pool
			{
				static constexpr uint16_t tag{ 691 };
			};

			// QuotePriceType(692): INT
			struct QuotePriceType
			{
				static constexpr uint16_t tag{ 692 };
				static constexpr int32_t PERCENT{ 1 };
				static constexpr int32_t YIELD{ 10 };
				static constexpr int32_t PER_SHARE{ 2 };
				static constexpr int32_t FIXED_AMOUNT{ 3 };
				static constexpr int32_t DISCOUNT{ 4 };
				static constexpr int32_t PREMIUM{ 5 };
				static constexpr int32_t SPREAD{ 6 };
				static constexpr int32_t TED_PRICE{ 7 };
				static constexpr int32_t TED_YIELD{ 8 };
				static constexpr int32_t YIELD_SPREAD{ 9 };
			};

			// QuoteRespID(693): STRING
			struct QuoteRespID
			{
				static constexpr uint16_t tag{ 693 };
			};

			// QuoteRespType(694): INT
			struct QuoteRespType
			{
				static constexpr uint16_t tag{ 694 };
				static constexpr int32_t HIT_LIFT{ 1 };
				static constexpr int32_t COUNTER{ 2 };
				static constexpr int32_t EXPIRED{ 3 };
				static constexpr int32_t COVER{ 4 };
				static constexpr int32_t DONE_AWAY{ 5 };
				static constexpr int32_t PASS{ 6 };
				static constexpr int32_t END_TRADE{ 7 };
				static constexpr int32_t TIMED_OUT{ 8 };
			};

			// QuoteQualifier(695): CHAR
			struct QuoteQualifier
			{
				static constexpr uint16_t tag{ 695 };
			};

			// YieldRedemptionDate(696): LOCALMKTDATE
			struct YieldRedemptionDate
			{
				static constexpr uint16_t tag{ 696 };
			};

			// YieldRedemptionPrice(697): PRICE
			struct YieldRedemptionPrice
			{
				static constexpr uint16_t tag{ 697 };
			};

			// YieldRedemptionPriceType(698): INT
			struct YieldRedemptionPriceType
			{
				static constexpr uint16_t tag{ 698 };
			};

			// BenchmarkSecurityID(699): STRING
			struct BenchmarkSecurityID
			{
				static constexpr uint16_t tag{ 699 };
			};

			// ReversalIndicator(700): BOOLEAN
			struct ReversalIndicator
			{
				static constexpr uint16_t tag{ 700 };
			};

			// YieldCalcDate(701): LOCALMKTDATE
			struct YieldCalcDate
			{
				static constexpr uint16_t tag{ 701 };
			};

			// NoPositions(702): NUMINGROUP
			struct NoPositions
			{
				static constexpr uint16_t tag{ 702 };
			};

			// PosType(703): STRING
			struct PosType
			{
				static constexpr uint16_t tag{ 703 };
				static inline const std::string ALLOCATION_TRADE_QTY{ "ALC" };
				static inline const std::string OPTION_ASSIGNMENT{ "AS" };
				static inline const std::string AS_OF_TRADE_QTY{ "ASF" };
				static inline const std::string DELIVERY_QTY{ "DLV" };
				static inline const std::string ELECTRONIC_TRADE_QTY{ "ETR" };
				static inline const std::string OPTION_EXERCISE_QTY{ "EX" };
				static inline const std::string END_OF_DAY_QTY{ "FIN" };
				static inline const std::string INTRA_SPREAD_QTY{ "IAS" };
				static inline const std::string INTER_SPREAD_QTY{ "IES" };
				static inline const std::string ADJUSTMENT_QTY{ "PA" };
				static inline const std::string PIT_TRADE_QTY{ "PIT" };
				static inline const std::string START_OF_DAY_QTY{ "SOD" };
				static inline const std::string INTEGRAL_SPLIT{ "SPL" };
				static inline const std::string TRANSACTION_FROM_ASSIGNMENT{ "TA" };
				static inline const std::string TOTAL_TRANSACTION_QTY{ "TOT" };
				static inline const std::string TRANSACTION_QUANTITY{ "TQ" };
				static inline const std::string TRANSFER_TRADE_QTY{ "TRF" };
				static inline const std::string TRANSACTION_FROM_EXERCISE{ "TX" };
				static inline const std::string CROSS_MARGIN_QTY{ "XM" };
				static inline const std::string RECEIVE_QUANTITY{ "RCV" };
				static inline const std::string CORPORATE_ACTION_ADJUSTMENT{ "CAA" };
				static inline const std::string DELIVERY_NOTICE_QTY{ "DN" };
				static inline const std::string EXCHANGE_FOR_PHYSICAL_QTY{ "EP" };
				static inline const std::string PRIVATELY_NEGOTIATED_TRADE_QTY{ "PNTN" };
				static inline const std::string NET_DELTA_QTY{ "DLT" };
				static inline const std::string CREDIT_EVENT_ADJUSTMENT{ "CEA" };
				static inline const std::string SUCCESSION_EVENT_ADJUSTMENT{ "SEA" };
			};

			// LongQty(704): QTY
			struct LongQty
			{
				static constexpr uint16_t tag{ 704 };
			};

			// ShortQty(705): QTY
			struct ShortQty
			{
				static constexpr uint16_t tag{ 705 };
			};

			// PosQtyStatus(706): INT
			struct PosQtyStatus
			{
				static constexpr uint16_t tag{ 706 };
				static constexpr int32_t SUBMITTED{ 0 };
				static constexpr int32_t ACCEPTED{ 1 };
				static constexpr int32_t REJECTED{ 2 };
			};

			// PosAmtType(707): STRING
			struct PosAmtType
			{
				static constexpr uint16_t tag{ 707 };
				static inline const std::string CASH_AMOUNT{ "CASH" };
				static inline const std::string CASH_RESIDUAL_AMOUNT{ "CRES" };
				static inline const std::string FINAL_MARK_TO_MARKET_AMOUNT{ "FMTM" };
				static inline const std::string INCREMENTAL_MARK_TO_MARKET_AMOUNT{ "IMTM" };
				static inline const std::string PREMIUM_AMOUNT{ "PREM" };
				static inline const std::string START_OF_DAY_MARK_TO_MARKET_AMOUNT{ "SMTM" };
				static inline const std::string TRADE_VARIATION_AMOUNT{ "TVAR" };
				static inline const std::string VALUE_ADJUSTED_AMOUNT{ "VADJ" };
				static inline const std::string SETTLEMENT_VALUE{ "SETL" };
				static inline const std::string INITIAL_TRADE_COUPON_AMOUNT{ "ICPN" };
				static inline const std::string ACCRUED_COUPON_AMOUNT{ "ACPN" };
				static inline const std::string COUPON_AMOUNT{ "CPN" };
				static inline const std::string INCREMENTAL_ACCRUED_COUPON{ "IACPN" };
				static inline const std::string COLLATERALIZED_MARK_TO_MARKET{ "CMTM" };
				static inline const std::string INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET{ "ICMTM" };
				static inline const std::string COMPENSATION_AMOUNT{ "DLV" };
				static inline const std::string TOTAL_BANKED_AMOUNT{ "BANK" };
				static inline const std::string TOTAL_COLLATERALIZED_AMOUNT{ "COLAT" };
			};

			// PosAmt(708): AMT
			struct PosAmt
			{
				static constexpr uint16_t tag{ 708 };
			};

			// PosTransType(709): INT
			struct PosTransType
			{
				static constexpr uint16_t tag{ 709 };
				static constexpr int32_t EXERCISE{ 1 };
				static constexpr int32_t DO_NOT_EXERCISE{ 2 };
				static constexpr int32_t POSITION_ADJUSTMENT{ 3 };
				static constexpr int32_t POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION{ 4 };
				static constexpr int32_t PLEDGE{ 5 };
				static constexpr int32_t LARGE_TRADER_SUBMISSION{ 6 };
			};

			// PosReqID(710): STRING
			struct PosReqID
			{
				static constexpr uint16_t tag{ 710 };
			};

			// NoUnderlyings(711): NUMINGROUP
			struct NoUnderlyings
			{
				static constexpr uint16_t tag{ 711 };
			};

			// PosMaintAction(712): INT
			struct PosMaintAction
			{
				static constexpr uint16_t tag{ 712 };
				static constexpr int32_t NEW{ 1 };
				static constexpr int32_t REPLACE{ 2 };
				static constexpr int32_t CANCEL{ 3 };
				static constexpr int32_t REVERSE{ 4 };
			};

			// OrigPosReqRefID(713): STRING
			struct OrigPosReqRefID
			{
				static constexpr uint16_t tag{ 713 };
			};

			// PosMaintRptRefID(714): STRING
			struct PosMaintRptRefID
			{
				static constexpr uint16_t tag{ 714 };
			};

			// ClearingBusinessDate(715): LOCALMKTDATE
			struct ClearingBusinessDate
			{
				static constexpr uint16_t tag{ 715 };
			};

			// SettlSessID(716): STRING
			struct SettlSessID
			{
				static constexpr uint16_t tag{ 716 };
				static inline const std::string INTRADAY{ "ITD" };
				static inline const std::string REGULAR_TRADING_HOURS{ "RTH" };
				static inline const std::string ELECTRONIC_TRADING_HOURS{ "ETH" };
				static inline const std::string END_OF_DAY{ "EOD" };
			};

			// SettlSessSubID(717): STRING
			struct SettlSessSubID
			{
				static constexpr uint16_t tag{ 717 };
			};

			// AdjustmentType(718): INT
			struct AdjustmentType
			{
				static constexpr uint16_t tag{ 718 };
				static constexpr int32_t PROCESS_REQUEST_AS_MARGIN_DISPOSITION{ 0 };
				static constexpr int32_t DELTA_PLUS{ 1 };
				static constexpr int32_t DELTA_MINUS{ 2 };
				static constexpr int32_t FINAL{ 3 };
			};

			// ContraryInstructionIndicator(719): BOOLEAN
			struct ContraryInstructionIndicator
			{
				static constexpr uint16_t tag{ 719 };
			};

			// PriorSpreadIndicator(720): BOOLEAN
			struct PriorSpreadIndicator
			{
				static constexpr uint16_t tag{ 720 };
			};

			// PosMaintRptID(721): STRING
			struct PosMaintRptID
			{
				static constexpr uint16_t tag{ 721 };
			};

			// PosMaintStatus(722): INT
			struct PosMaintStatus
			{
				static constexpr uint16_t tag{ 722 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t ACCEPTED_WITH_WARNINGS{ 1 };
				static constexpr int32_t REJECTED{ 2 };
				static constexpr int32_t COMPLETED{ 3 };
				static constexpr int32_t COMPLETED_WITH_WARNINGS{ 4 };
			};

			// PosMaintResult(723): INT
			struct PosMaintResult
			{
				static constexpr uint16_t tag{ 723 };
				static constexpr int32_t SUCCESSFUL_COMPLETION{ 0 };
				static constexpr int32_t REJECTED{ 1 };
				static constexpr int32_t OTHER{ 99 };
			};

			// PosReqType(724): INT
			struct PosReqType
			{
				static constexpr uint16_t tag{ 724 };
				static constexpr int32_t POSITIONS{ 0 };
				static constexpr int32_t TRADES{ 1 };
				static constexpr int32_t EXERCISES{ 2 };
				static constexpr int32_t ASSIGNMENTS{ 3 };
				static constexpr int32_t SETTLEMENT_ACTIVITY{ 4 };
				static constexpr int32_t BACKOUT_MESSAGE{ 5 };
				static constexpr int32_t DELTA_POSITIONS{ 6 };
			};

			// ResponseTransportType(725): INT
			struct ResponseTransportType
			{
				static constexpr uint16_t tag{ 725 };
				static constexpr int32_t INBAND{ 0 };
				static constexpr int32_t OUT_OF_BAND{ 1 };
			};

			// ResponseDestination(726): STRING
			struct ResponseDestination
			{
				static constexpr uint16_t tag{ 726 };
			};

			// TotalNumPosReports(727): INT
			struct TotalNumPosReports
			{
				static constexpr uint16_t tag{ 727 };
			};

			// PosReqResult(728): INT
			struct PosReqResult
			{
				static constexpr uint16_t tag{ 728 };
				static constexpr int32_t VALID_REQUEST{ 0 };
				static constexpr int32_t INVALID_OR_UNSUPPORTED_REQUEST{ 1 };
				static constexpr int32_t NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA{ 2 };
				static constexpr int32_t NOT_AUTHORIZED_TO_REQUEST_POSITIONS{ 3 };
				static constexpr int32_t REQUEST_FOR_POSITION_NOT_SUPPORTED{ 4 };
				static constexpr int32_t OTHER{ 99 };
			};

			// PosReqStatus(729): INT
			struct PosReqStatus
			{
				static constexpr uint16_t tag{ 729 };
				static constexpr int32_t COMPLETED{ 0 };
				static constexpr int32_t COMPLETED_WITH_WARNINGS{ 1 };
				static constexpr int32_t REJECTED{ 2 };
			};

			// SettlPrice(730): PRICE
			struct SettlPrice
			{
				static constexpr uint16_t tag{ 730 };
			};

			// SettlPriceType(731): INT
			struct SettlPriceType
			{
				static constexpr uint16_t tag{ 731 };
				static constexpr int32_t FINAL{ 1 };
				static constexpr int32_t THEORETICAL{ 2 };
			};

			// UnderlyingSettlPrice(732): PRICE
			struct UnderlyingSettlPrice
			{
				static constexpr uint16_t tag{ 732 };
			};

			// UnderlyingSettlPriceType(733): INT
			struct UnderlyingSettlPriceType
			{
				static constexpr uint16_t tag{ 733 };
			};

			// PriorSettlPrice(734): PRICE
			struct PriorSettlPrice
			{
				static constexpr uint16_t tag{ 734 };
			};

			// NoQuoteQualifiers(735): NUMINGROUP
			struct NoQuoteQualifiers
			{
				static constexpr uint16_t tag{ 735 };
			};

			// AllocSettlCurrency(736): CURRENCY
			struct AllocSettlCurrency
			{
				static constexpr uint16_t tag{ 736 };
			};

			// AllocSettlCurrAmt(737): AMT
			struct AllocSettlCurrAmt
			{
				static constexpr uint16_t tag{ 737 };
			};

			// InterestAtMaturity(738): AMT
			struct InterestAtMaturity
			{
				static constexpr uint16_t tag{ 738 };
			};

			// LegDatedDate(739): LOCALMKTDATE
			struct LegDatedDate
			{
				static constexpr uint16_t tag{ 739 };
			};

			// LegPool(740): STRING
			struct LegPool
			{
				static constexpr uint16_t tag{ 740 };
			};

			// AllocInterestAtMaturity(741): AMT
			struct AllocInterestAtMaturity
			{
				static constexpr uint16_t tag{ 741 };
			};

			// AllocAccruedInterestAmt(742): AMT
			struct AllocAccruedInterestAmt
			{
				static constexpr uint16_t tag{ 742 };
			};

			// DeliveryDate(743): LOCALMKTDATE
			struct DeliveryDate
			{
				static constexpr uint16_t tag{ 743 };
			};

			// AssignmentMethod(744): CHAR
			struct AssignmentMethod
			{
				static constexpr uint16_t tag{ 744 };
				static constexpr char PRO_RATA{ 'P' };
				static constexpr char RANDOM{ 'R' };
			};

			// AssignmentUnit(745): QTY
			struct AssignmentUnit
			{
				static constexpr uint16_t tag{ 745 };
			};

			// OpenInterest(746): AMT
			struct OpenInterest
			{
				static constexpr uint16_t tag{ 746 };
			};

			// ExerciseMethod(747): CHAR
			struct ExerciseMethod
			{
				static constexpr uint16_t tag{ 747 };
				static constexpr char AUTOMATIC{ 'A' };
				static constexpr char MANUAL{ 'M' };
			};

			// TotNumTradeReports(748): INT
			struct TotNumTradeReports
			{
				static constexpr uint16_t tag{ 748 };
			};

			// TradeRequestResult(749): INT
			struct TradeRequestResult
			{
				static constexpr uint16_t tag{ 749 };
				static constexpr int32_t SUCCESSFUL{ 0 };
				static constexpr int32_t INVALID_OR_UNKNOWN_INSTRUMENT{ 1 };
				static constexpr int32_t INVALID_TYPE_OF_TRADE_REQUESTED{ 2 };
				static constexpr int32_t INVALID_PARTIES{ 3 };
				static constexpr int32_t INVALID_TRANSPORT_TYPE_REQUESTED{ 4 };
				static constexpr int32_t INVALID_DESTINATION_REQUESTED{ 5 };
				static constexpr int32_t TRADEREQUESTTYPE_NOT_SUPPORTED{ 8 };
				static constexpr int32_t NOT_AUTHORIZED{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// TradeRequestStatus(750): INT
			struct TradeRequestStatus
			{
				static constexpr uint16_t tag{ 750 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t COMPLETED{ 1 };
				static constexpr int32_t REJECTED{ 2 };
			};

			// TradeReportRejectReason(751): INT
			struct TradeReportRejectReason
			{
				static constexpr uint16_t tag{ 751 };
				static constexpr int32_t SUCCESSFUL{ 0 };
				static constexpr int32_t INVALID_PARTY_ONFORMATION{ 1 };
				static constexpr int32_t UNKNOWN_INSTRUMENT{ 2 };
				static constexpr int32_t UNAUTHORIZED_TO_REPORT_TRADES{ 3 };
				static constexpr int32_t INVALID_TRADE_TYPE{ 4 };
				static constexpr int32_t OTHER{ 99 };
			};

			// SideMultiLegReportingType(752): INT
			struct SideMultiLegReportingType
			{
				static constexpr uint16_t tag{ 752 };
				static constexpr int32_t SINGLE_SECURITY{ 1 };
				static constexpr int32_t INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY{ 2 };
				static constexpr int32_t MULTILEG_SECURITY{ 3 };
			};

			// NoPosAmt(753): NUMINGROUP
			struct NoPosAmt
			{
				static constexpr uint16_t tag{ 753 };
			};

			// AutoAcceptIndicator(754): BOOLEAN
			struct AutoAcceptIndicator
			{
				static constexpr uint16_t tag{ 754 };
			};

			// AllocReportID(755): STRING
			struct AllocReportID
			{
				static constexpr uint16_t tag{ 755 };
			};

			// NoNested2PartyIDs(756): NUMINGROUP
			struct NoNested2PartyIDs
			{
				static constexpr uint16_t tag{ 756 };
			};

			// Nested2PartyID(757): STRING
			struct Nested2PartyID
			{
				static constexpr uint16_t tag{ 757 };
			};

			// Nested2PartyIDSource(758): CHAR
			struct Nested2PartyIDSource
			{
				static constexpr uint16_t tag{ 758 };
			};

			// Nested2PartyRole(759): INT
			struct Nested2PartyRole
			{
				static constexpr uint16_t tag{ 759 };
			};

			// Nested2PartySubID(760): STRING
			struct Nested2PartySubID
			{
				static constexpr uint16_t tag{ 760 };
			};

			// BenchmarkSecurityIDSource(761): STRING
			struct BenchmarkSecurityIDSource
			{
				static constexpr uint16_t tag{ 761 };
			};

			// SecuritySubType(762): STRING
			struct SecuritySubType
			{
				static constexpr uint16_t tag{ 762 };
			};

			// UnderlyingSecuritySubType(763): STRING
			struct UnderlyingSecuritySubType
			{
				static constexpr uint16_t tag{ 763 };
			};

			// LegSecuritySubType(764): STRING
			struct LegSecuritySubType
			{
				static constexpr uint16_t tag{ 764 };
			};

			// AllowableOneSidednessPct(765): PERCENTAGE
			struct AllowableOneSidednessPct
			{
				static constexpr uint16_t tag{ 765 };
			};

			// AllowableOneSidednessValue(766): AMT
			struct AllowableOneSidednessValue
			{
				static constexpr uint16_t tag{ 766 };
			};

			// AllowableOneSidednessCurr(767): CURRENCY
			struct AllowableOneSidednessCurr
			{
				static constexpr uint16_t tag{ 767 };
			};

			// NoTrdRegTimestamps(768): NUMINGROUP
			struct NoTrdRegTimestamps
			{
				static constexpr uint16_t tag{ 768 };
			};

			// TrdRegTimestamp(769): UTCTIMESTAMP
			struct TrdRegTimestamp
			{
				static constexpr uint16_t tag{ 769 };
			};

			// TrdRegTimestampType(770): INT
			struct TrdRegTimestampType
			{
				static constexpr uint16_t tag{ 770 };
				static constexpr int32_t EXECUTION_TIME{ 1 };
				static constexpr int32_t TIME_IN{ 2 };
				static constexpr int32_t TIME_OUT{ 3 };
				static constexpr int32_t BROKER_RECEIPT{ 4 };
				static constexpr int32_t BROKER_EXECUTION{ 5 };
				static constexpr int32_t DESK_RECEIPT{ 6 };
				static constexpr int32_t SUBMISSION_TO_CLEARING{ 7 };
			};

			// TrdRegTimestampOrigin(771): STRING
			struct TrdRegTimestampOrigin
			{
				static constexpr uint16_t tag{ 771 };
			};

			// ConfirmRefID(772): STRING
			struct ConfirmRefID
			{
				static constexpr uint16_t tag{ 772 };
			};

			// ConfirmType(773): INT
			struct ConfirmType
			{
				static constexpr uint16_t tag{ 773 };
				static constexpr int32_t STATUS{ 1 };
				static constexpr int32_t CONFIRMATION{ 2 };
				static constexpr int32_t CONFIRMATION_REQUEST_REJECTED{ 3 };
			};

			// ConfirmRejReason(774): INT
			struct ConfirmRejReason
			{
				static constexpr uint16_t tag{ 774 };
				static constexpr int32_t MISMATCHED_ACCOUNT{ 1 };
				static constexpr int32_t MISSING_SETTLEMENT_INSTRUCTIONS{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// BookingType(775): INT
			struct BookingType
			{
				static constexpr uint16_t tag{ 775 };
				static constexpr int32_t REGULAR_BOOKING{ 0 };
				static constexpr int32_t CFD{ 1 };
				static constexpr int32_t TOTAL_RETURN_SWAP{ 2 };
			};

			// IndividualAllocRejCode(776): INT
			struct IndividualAllocRejCode
			{
				static constexpr uint16_t tag{ 776 };
			};

			// SettlInstMsgID(777): STRING
			struct SettlInstMsgID
			{
				static constexpr uint16_t tag{ 777 };
			};

			// NoSettlInst(778): NUMINGROUP
			struct NoSettlInst
			{
				static constexpr uint16_t tag{ 778 };
			};

			// LastUpdateTime(779): UTCTIMESTAMP
			struct LastUpdateTime
			{
				static constexpr uint16_t tag{ 779 };
			};

			// AllocSettlInstType(780): INT
			struct AllocSettlInstType
			{
				static constexpr uint16_t tag{ 780 };
				static constexpr int32_t USE_DEFAULT_INSTRUCTIONS{ 0 };
				static constexpr int32_t DERIVE_FROM_PARAMETERS_PROVIDED{ 1 };
				static constexpr int32_t FULL_DETAILS_PROVIDED{ 2 };
				static constexpr int32_t SSI_DB_IDS_PROVIDED{ 3 };
				static constexpr int32_t PHONE_FOR_INSTRUCTIONS{ 4 };
			};

			// NoSettlPartyIDs(781): NUMINGROUP
			struct NoSettlPartyIDs
			{
				static constexpr uint16_t tag{ 781 };
			};

			// SettlPartyID(782): STRING
			struct SettlPartyID
			{
				static constexpr uint16_t tag{ 782 };
			};

			// SettlPartyIDSource(783): CHAR
			struct SettlPartyIDSource
			{
				static constexpr uint16_t tag{ 783 };
			};

			// SettlPartyRole(784): INT
			struct SettlPartyRole
			{
				static constexpr uint16_t tag{ 784 };
			};

			// SettlPartySubID(785): STRING
			struct SettlPartySubID
			{
				static constexpr uint16_t tag{ 785 };
			};

			// SettlPartySubIDType(786): INT
			struct SettlPartySubIDType
			{
				static constexpr uint16_t tag{ 786 };
			};

			// DlvyInstType(787): CHAR
			struct DlvyInstType
			{
				static constexpr uint16_t tag{ 787 };
				static constexpr char CASH{ 'C' };
				static constexpr char SECURITIES{ 'S' };
			};

			// TerminationType(788): INT
			struct TerminationType
			{
				static constexpr uint16_t tag{ 788 };
				static constexpr int32_t OVERNIGHT{ 1 };
				static constexpr int32_t TERM{ 2 };
				static constexpr int32_t FLEXIBLE{ 3 };
				static constexpr int32_t OPEN{ 4 };
			};

			// NextExpectedMsgSeqNum(789): SEQNUM
			struct NextExpectedMsgSeqNum
			{
				static constexpr uint16_t tag{ 789 };
			};

			// OrdStatusReqID(790): STRING
			struct OrdStatusReqID
			{
				static constexpr uint16_t tag{ 790 };
			};

			// SettlInstReqID(791): STRING
			struct SettlInstReqID
			{
				static constexpr uint16_t tag{ 791 };
			};

			// SettlInstReqRejCode(792): INT
			struct SettlInstReqRejCode
			{
				static constexpr uint16_t tag{ 792 };
				static constexpr int32_t UNABLE_TO_PROCESS_REQUEST{ 0 };
				static constexpr int32_t UNKNOWN_ACCOUNT{ 1 };
				static constexpr int32_t NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// SecondaryAllocID(793): STRING
			struct SecondaryAllocID
			{
				static constexpr uint16_t tag{ 793 };
			};

			// AllocReportType(794): INT
			struct AllocReportType
			{
				static constexpr uint16_t tag{ 794 };
				static constexpr int32_t SELLSIDE_CALCULATED_USING_PRELIMINARY{ 3 };
				static constexpr int32_t SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY{ 4 };
				static constexpr int32_t WAREHOUSE_RECAP{ 5 };
				static constexpr int32_t REQUEST_TO_INTERMEDIARY{ 8 };
				static constexpr int32_t PRELIMINARY_REQUEST_TO_INTERMEDIARY{ 2 };
				static constexpr int32_t ACCEPT{ 9 };
				static constexpr int32_t REJECT{ 10 };
				static constexpr int32_t ACCEPT_PENDING{ 11 };
				static constexpr int32_t COMPLETE{ 12 };
				static constexpr int32_t REVERSE_PENDING{ 14 };
			};

			// AllocReportRefID(795): STRING
			struct AllocReportRefID
			{
				static constexpr uint16_t tag{ 795 };
			};

			// AllocCancReplaceReason(796): INT
			struct AllocCancReplaceReason
			{
				static constexpr uint16_t tag{ 796 };
				static constexpr int32_t ORIGINAL_DETAILS_INCOMPLETE_INCORRECT{ 1 };
				static constexpr int32_t CHANGE_IN_UNDERLYING_ORDER_DETAILS{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// CopyMsgIndicator(797): BOOLEAN
			struct CopyMsgIndicator
			{
				static constexpr uint16_t tag{ 797 };
			};

			// AllocAccountType(798): INT
			struct AllocAccountType
			{
				static constexpr uint16_t tag{ 798 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS{ 1 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS{ 2 };
				static constexpr int32_t HOUSE_TRADER{ 3 };
				static constexpr int32_t FLOOR_TRADER{ 4 };
				static constexpr int32_t ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED{ 6 };
				static constexpr int32_t ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED{ 7 };
				static constexpr int32_t JOINT_BACK_OFFICE_ACCOUNT{ 8 };
			};

			// OrderAvgPx(799): PRICE
			struct OrderAvgPx
			{
				static constexpr uint16_t tag{ 799 };
			};

			// OrderBookingQty(800): QTY
			struct OrderBookingQty
			{
				static constexpr uint16_t tag{ 800 };
			};

			// NoSettlPartySubIDs(801): NUMINGROUP
			struct NoSettlPartySubIDs
			{
				static constexpr uint16_t tag{ 801 };
			};

			// NoPartySubIDs(802): NUMINGROUP
			struct NoPartySubIDs
			{
				static constexpr uint16_t tag{ 802 };
			};

			// PartySubIDType(803): INT
			struct PartySubIDType
			{
				static constexpr uint16_t tag{ 803 };
				static constexpr int32_t FIRM{ 1 };
				static constexpr int32_t SECURITIES_ACCOUNT_NUMBER{ 10 };
				static constexpr int32_t REGISTRATION_NUMBER{ 11 };
				static constexpr int32_t REGISTERED_ADDRESS_12{ 12 };
				static constexpr int32_t REGULATORY_STATUS{ 13 };
				static constexpr int32_t REGISTRATION_NAME{ 14 };
				static constexpr int32_t CASH_ACCOUNT_NUMBER{ 15 };
				static constexpr int32_t BIC{ 16 };
				static constexpr int32_t CSD_PARTICIPANT_MEMBER_CODE{ 17 };
				static constexpr int32_t REGISTERED_ADDRESS_18{ 18 };
				static constexpr int32_t FUND_ACCOUNT_NAME{ 19 };
				static constexpr int32_t PERSON{ 2 };
				static constexpr int32_t TELEX_NUMBER{ 20 };
				static constexpr int32_t FAX_NUMBER{ 21 };
				static constexpr int32_t SECURITIES_ACCOUNT_NAME{ 22 };
				static constexpr int32_t CASH_ACCOUNT_NAME{ 23 };
				static constexpr int32_t DEPARTMENT{ 24 };
				static constexpr int32_t LOCATION_DESK{ 25 };
				static constexpr int32_t POSITION_ACCOUNT_TYPE{ 26 };
				static constexpr int32_t SYSTEM{ 3 };
				static constexpr int32_t APPLICATION{ 4 };
				static constexpr int32_t FULL_LEGAL_NAME_OF_FIRM{ 5 };
				static constexpr int32_t POSTAL_ADDRESS{ 6 };
				static constexpr int32_t PHONE_NUMBER{ 7 };
				static constexpr int32_t EMAIL_ADDRESS{ 8 };
				static constexpr int32_t CONTACT_NAME{ 9 };
				static constexpr int32_t SECURITY_LOCATE_ID{ 27 };
				static constexpr int32_t MARKET_MAKER{ 28 };
				static constexpr int32_t ELIGIBLE_COUNTERPARTY{ 29 };
				static constexpr int32_t PROFESSIONAL_CLIENT{ 30 };
				static constexpr int32_t LOCATION{ 31 };
				static constexpr int32_t EXECUTION_VENUE{ 32 };
				static constexpr int32_t CURRENCY_DELIVERY_IDENTIFIER{ 33 };
			};

			// NoNestedPartySubIDs(804): NUMINGROUP
			struct NoNestedPartySubIDs
			{
				static constexpr uint16_t tag{ 804 };
			};

			// NestedPartySubIDType(805): INT
			struct NestedPartySubIDType
			{
				static constexpr uint16_t tag{ 805 };
			};

			// NoNested2PartySubIDs(806): NUMINGROUP
			struct NoNested2PartySubIDs
			{
				static constexpr uint16_t tag{ 806 };
			};

			// Nested2PartySubIDType(807): INT
			struct Nested2PartySubIDType
			{
				static constexpr uint16_t tag{ 807 };
			};

			// AllocIntermedReqType(808): INT
			struct AllocIntermedReqType
			{
				static constexpr uint16_t tag{ 808 };
				static constexpr int32_t PENDING_ACCEPT{ 1 };
				static constexpr int32_t PENDING_RELEASE{ 2 };
				static constexpr int32_t PENDING_REVERSAL{ 3 };
				static constexpr int32_t ACCEPT{ 4 };
				static constexpr int32_t BLOCK_LEVEL_REJECT{ 5 };
				static constexpr int32_t ACCOUNT_LEVEL_REJECT{ 6 };
			};

			// UnderlyingPx(810): PRICE
			struct UnderlyingPx
			{
				static constexpr uint16_t tag{ 810 };
			};

			// PriceDelta(811): FLOAT
			struct PriceDelta
			{
				static constexpr uint16_t tag{ 811 };
			};

			// ApplQueueMax(812): INT
			struct ApplQueueMax
			{
				static constexpr uint16_t tag{ 812 };
			};

			// ApplQueueDepth(813): INT
			struct ApplQueueDepth
			{
				static constexpr uint16_t tag{ 813 };
			};

			// ApplQueueResolution(814): INT
			struct ApplQueueResolution
			{
				static constexpr uint16_t tag{ 814 };
				static constexpr int32_t NO_ACTION_TAKEN{ 0 };
				static constexpr int32_t QUEUE_FLUSHED{ 1 };
				static constexpr int32_t OVERLAY_LAST{ 2 };
				static constexpr int32_t END_SESSION{ 3 };
			};

			// ApplQueueAction(815): INT
			struct ApplQueueAction
			{
				static constexpr uint16_t tag{ 815 };
				static constexpr int32_t NO_ACTION_TAKEN{ 0 };
				static constexpr int32_t QUEUE_FLUSHED{ 1 };
				static constexpr int32_t OVERLAY_LAST{ 2 };
				static constexpr int32_t END_SESSION{ 3 };
			};

			// NoAltMDSource(816): NUMINGROUP
			struct NoAltMDSource
			{
				static constexpr uint16_t tag{ 816 };
			};

			// AltMDSourceID(817): STRING
			struct AltMDSourceID
			{
				static constexpr uint16_t tag{ 817 };
			};

			// SecondaryTradeReportID(818): STRING
			struct SecondaryTradeReportID
			{
				static constexpr uint16_t tag{ 818 };
			};

			// AvgPxIndicator(819): INT
			struct AvgPxIndicator
			{
				static constexpr uint16_t tag{ 819 };
				static constexpr int32_t NO_AVERAGE_PRICING{ 0 };
				static constexpr int32_t TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID{ 1 };
				static constexpr int32_t LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID{ 2 };
			};

			// TradeLinkID(820): STRING
			struct TradeLinkID
			{
				static constexpr uint16_t tag{ 820 };
			};

			// OrderInputDevice(821): STRING
			struct OrderInputDevice
			{
				static constexpr uint16_t tag{ 821 };
			};

			// UnderlyingTradingSessionID(822): STRING
			struct UnderlyingTradingSessionID
			{
				static constexpr uint16_t tag{ 822 };
			};

			// UnderlyingTradingSessionSubID(823): STRING
			struct UnderlyingTradingSessionSubID
			{
				static constexpr uint16_t tag{ 823 };
			};

			// TradeLegRefID(824): STRING
			struct TradeLegRefID
			{
				static constexpr uint16_t tag{ 824 };
			};

			// ExchangeRule(825): STRING
			struct ExchangeRule
			{
				static constexpr uint16_t tag{ 825 };
			};

			// TradeAllocIndicator(826): INT
			struct TradeAllocIndicator
			{
				static constexpr uint16_t tag{ 826 };
				static constexpr int32_t ALLOCATION_NOT_REQUIRED{ 0 };
				static constexpr int32_t ALLOCATION_REQUIRED{ 1 };
				static constexpr int32_t USE_ALLOCATION_PROVIDED_WITH_THE_TRADE{ 2 };
				static constexpr int32_t ALLOCATION_GIVE_UP_EXECUTOR{ 3 };
				static constexpr int32_t ALLOCATION_FROM_EXECUTOR{ 4 };
				static constexpr int32_t ALLOCATION_TO_CLAIM_ACCOUNT{ 5 };
			};

			// ExpirationCycle(827): INT
			struct ExpirationCycle
			{
				static constexpr uint16_t tag{ 827 };
				static constexpr int32_t EXPIRE_ON_TRADING_SESSION_CLOSE{ 0 };
				static constexpr int32_t EXPIRE_ON_TRADING_SESSION_OPEN{ 1 };
				static constexpr int32_t TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FIELDS_EVENTDATE{ 2 };
			};

			// TrdType(828): INT
			struct TrdType
			{
				static constexpr uint16_t tag{ 828 };
				static constexpr int32_t REGULAR_TRADE{ 0 };
				static constexpr int32_t BLOCK_TRADE_1{ 1 };
				static constexpr int32_t AFTER_HOURS_TRADE{ 10 };
				static constexpr int32_t EFP{ 2 };
				static constexpr int32_t TRANSFER{ 3 };
				static constexpr int32_t LATE_TRADE{ 4 };
				static constexpr int32_t T_TRADE{ 5 };
				static constexpr int32_t WEIGHTED_AVERAGE_PRICE_TRADE{ 6 };
				static constexpr int32_t BUNCHED_TRADE{ 7 };
				static constexpr int32_t LATE_BUNCHED_TRADE{ 8 };
				static constexpr int32_t PRIOR_REFERENCE_PRICE_TRADE{ 9 };
				static constexpr int32_t EXCHANGE_FOR_RISK{ 11 };
				static constexpr int32_t EXCHANGE_FOR_SWAP{ 12 };
				static constexpr int32_t EXCHANGE_OF_FUTURES_FOR{ 13 };
				static constexpr int32_t EXCHANGE_OF_OPTIONS_FOR_OPTIONS{ 14 };
				static constexpr int32_t TRADING_AT_SETTLEMENT{ 15 };
				static constexpr int32_t ALL_OR_NONE{ 16 };
				static constexpr int32_t FUTURES_LARGE_ORDER_EXECUTION{ 17 };
				static constexpr int32_t EXCHANGE_OF_FUTURES_FOR_FUTURES{ 18 };
				static constexpr int32_t OPTION_INTERIM_TRADE{ 19 };
				static constexpr int32_t OPTION_CABINET_TRADE{ 20 };
				static constexpr int32_t PRIVATELY_NEGOTIATED_TRADES{ 22 };
				static constexpr int32_t SUBSTITUTION_OF_FUTURES_FOR_FORWARDS{ 23 };
				static constexpr int32_t ERROR_TRADE{ 24 };
				static constexpr int32_t SPECIAL_CUM_DIVIDEND{ 25 };
				static constexpr int32_t SPECIAL_EX_DIVIDEND{ 26 };
				static constexpr int32_t SPECIAL_CUM_COUPON{ 27 };
				static constexpr int32_t SPECIAL_EX_COUPON{ 28 };
				static constexpr int32_t CASH_SETTLEMENT{ 29 };
				static constexpr int32_t SPECIAL_PRICE{ 30 };
				static constexpr int32_t GUARANTEED_DELIVERY{ 31 };
				static constexpr int32_t SPECIAL_CUM_RIGHTS{ 32 };
				static constexpr int32_t SPECIAL_EX_RIGHTS{ 33 };
				static constexpr int32_t SPECIAL_CUM_CAPITAL_REPAYMENTS{ 34 };
				static constexpr int32_t SPECIAL_EX_CAPITAL_REPAYMENTS{ 35 };
				static constexpr int32_t SPECIAL_CUM_BONUS{ 36 };
				static constexpr int32_t SPECIAL_EX_BONUS{ 37 };
				static constexpr int32_t BLOCK_TRADE_38{ 38 };
				static constexpr int32_t WORKED_PRINCIPAL_TRADE{ 39 };
				static constexpr int32_t BLOCK_TRADES{ 40 };
				static constexpr int32_t NAME_CHANGE{ 41 };
				static constexpr int32_t PORTFOLIO_TRANSFER{ 42 };
				static constexpr int32_t PROROGATION_BUY{ 43 };
				static constexpr int32_t PROROGATION_SELL{ 44 };
				static constexpr int32_t OPTION_EXERCISE{ 45 };
				static constexpr int32_t DELTA_NEUTRAL_TRANSACTION{ 46 };
				static constexpr int32_t FINANCING_TRANSACTION{ 47 };
				static constexpr int32_t NON_STANDARD_SETTLEMENT{ 48 };
				static constexpr int32_t DERIVATIVE_RELATED_TRANSACTION{ 49 };
				static constexpr int32_t PORTFOLIO_TRADE{ 50 };
				static constexpr int32_t VOLUME_WEIGHTED_AVERAGE_TRADE{ 51 };
				static constexpr int32_t EXCHANGE_GRANTED_TRADE{ 52 };
				static constexpr int32_t REPURCHASE_AGREEMENT{ 53 };
				static constexpr int32_t OTC{ 54 };
				static constexpr int32_t EXCHANGE_BASIS_FACILITY{ 55 };
			};

			// TrdSubType(829): INT
			struct TrdSubType
			{
				static constexpr uint16_t tag{ 829 };
				static constexpr int32_t CMTA{ 0 };
				static constexpr int32_t INTERNAL_TRANSFER_OR_ADJUSTMENT{ 1 };
				static constexpr int32_t EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT{ 2 };
				static constexpr int32_t REJECT_FOR_SUBMITTING_SIDE{ 3 };
				static constexpr int32_t ADVISORY_FOR_CONTRA_SIDE{ 4 };
				static constexpr int32_t OFFSET_DUE_TO_AN_ALLOCATION{ 5 };
				static constexpr int32_t ONSET_DUE_TO_AN_ALLOCATION{ 6 };
				static constexpr int32_t DIFFERENTIAL_SPREAD{ 7 };
				static constexpr int32_t IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT{ 8 };
				static constexpr int32_t TRANSACTION_FROM_EXERCISE{ 9 };
				static constexpr int32_t TRANSACTION_FROM_ASSIGNMENT{ 10 };
				static constexpr int32_t ACATS{ 11 };
				static constexpr int32_t AI{ 14 };
				static constexpr int32_t B{ 15 };
				static constexpr int32_t K{ 16 };
				static constexpr int32_t LC{ 17 };
				static constexpr int32_t M{ 18 };
				static constexpr int32_t N{ 19 };
				static constexpr int32_t NM{ 20 };
				static constexpr int32_t NR{ 21 };
				static constexpr int32_t P{ 22 };
				static constexpr int32_t PA{ 23 };
				static constexpr int32_t PC{ 24 };
				static constexpr int32_t PN{ 25 };
				static constexpr int32_t R{ 26 };
				static constexpr int32_t RO{ 27 };
				static constexpr int32_t RT{ 28 };
				static constexpr int32_t SW{ 29 };
				static constexpr int32_t T{ 30 };
				static constexpr int32_t WN{ 31 };
				static constexpr int32_t WT{ 32 };
				static constexpr int32_t OFF_HOURS_TRADE{ 33 };
				static constexpr int32_t ON_HOURS_TRADE{ 34 };
				static constexpr int32_t OTC_QUOTE{ 35 };
				static constexpr int32_t CONVERTED_SWAP{ 36 };
				static constexpr int32_t CROSSED_TRADE{ 37 };
				static constexpr int32_t INTERIM_PROTECTED_TRADE{ 38 };
				static constexpr int32_t LARGE_IN_SCALE{ 39 };
			};

			// TransferReason(830): STRING
			struct TransferReason
			{
				static constexpr uint16_t tag{ 830 };
			};

			// AsgnReqID(831): STRING
			struct AsgnReqID
			{
				static constexpr uint16_t tag{ 831 };
			};

			// TotNumAssignmentReports(832): INT
			struct TotNumAssignmentReports
			{
				static constexpr uint16_t tag{ 832 };
			};

			// AsgnRptID(833): STRING
			struct AsgnRptID
			{
				static constexpr uint16_t tag{ 833 };
			};

			// ThresholdAmount(834): PRICEOFFSET
			struct ThresholdAmount
			{
				static constexpr uint16_t tag{ 834 };
			};

			// PegMoveType(835): INT
			struct PegMoveType
			{
				static constexpr uint16_t tag{ 835 };
				static constexpr int32_t FLOATING{ 0 };
				static constexpr int32_t FIXED{ 1 };
			};

			// PegOffsetType(836): INT
			struct PegOffsetType
			{
				static constexpr uint16_t tag{ 836 };
				static constexpr int32_t PRICE{ 0 };
				static constexpr int32_t BASIS_POINTS{ 1 };
				static constexpr int32_t TICKS{ 2 };
				static constexpr int32_t PRICE_TIER{ 3 };
			};

			// PegLimitType(837): INT
			struct PegLimitType
			{
				static constexpr uint16_t tag{ 837 };
				static constexpr int32_t OR_BETTER{ 0 };
				static constexpr int32_t STRICT{ 1 };
				static constexpr int32_t OR_WORSE{ 2 };
			};

			// PegRoundDirection(838): INT
			struct PegRoundDirection
			{
				static constexpr uint16_t tag{ 838 };
				static constexpr int32_t MORE_AGGRESSIVE{ 1 };
				static constexpr int32_t MORE_PASSIVE{ 2 };
			};

			// PeggedPrice(839): PRICE
			struct PeggedPrice
			{
				static constexpr uint16_t tag{ 839 };
			};

			// PegScope(840): INT
			struct PegScope
			{
				static constexpr uint16_t tag{ 840 };
				static constexpr int32_t LOCAL{ 1 };
				static constexpr int32_t NATIONAL{ 2 };
				static constexpr int32_t GLOBAL{ 3 };
				static constexpr int32_t NATIONAL_EXCLUDING_LOCAL{ 4 };
			};

			// DiscretionMoveType(841): INT
			struct DiscretionMoveType
			{
				static constexpr uint16_t tag{ 841 };
				static constexpr int32_t FLOATING{ 0 };
				static constexpr int32_t FIXED{ 1 };
			};

			// DiscretionOffsetType(842): INT
			struct DiscretionOffsetType
			{
				static constexpr uint16_t tag{ 842 };
				static constexpr int32_t PRICE{ 0 };
				static constexpr int32_t BASIS_POINTS{ 1 };
				static constexpr int32_t TICKS{ 2 };
				static constexpr int32_t PRICE_TIER{ 3 };
			};

			// DiscretionLimitType(843): INT
			struct DiscretionLimitType
			{
				static constexpr uint16_t tag{ 843 };
				static constexpr int32_t OR_BETTER{ 0 };
				static constexpr int32_t STRICT{ 1 };
				static constexpr int32_t OR_WORSE{ 2 };
			};

			// DiscretionRoundDirection(844): INT
			struct DiscretionRoundDirection
			{
				static constexpr uint16_t tag{ 844 };
				static constexpr int32_t MORE_AGGRESSIVE{ 1 };
				static constexpr int32_t MORE_PASSIVE{ 2 };
			};

			// DiscretionPrice(845): PRICE
			struct DiscretionPrice
			{
				static constexpr uint16_t tag{ 845 };
			};

			// DiscretionScope(846): INT
			struct DiscretionScope
			{
				static constexpr uint16_t tag{ 846 };
				static constexpr int32_t LOCAL{ 1 };
				static constexpr int32_t NATIONAL{ 2 };
				static constexpr int32_t GLOBAL{ 3 };
				static constexpr int32_t NATIONAL_EXCLUDING_LOCAL{ 4 };
			};

			// TargetStrategy(847): INT
			struct TargetStrategy
			{
				static constexpr uint16_t tag{ 847 };
				static constexpr int32_t VWAP{ 1 };
				static constexpr int32_t PARTICIPATE{ 2 };
				static constexpr int32_t MININIZE_MARKET_IMPACT{ 3 };
			};

			// TargetStrategyParameters(848): STRING
			struct TargetStrategyParameters
			{
				static constexpr uint16_t tag{ 848 };
			};

			// ParticipationRate(849): PERCENTAGE
			struct ParticipationRate
			{
				static constexpr uint16_t tag{ 849 };
			};

			// TargetStrategyPerformance(850): FLOAT
			struct TargetStrategyPerformance
			{
				static constexpr uint16_t tag{ 850 };
			};

			// LastLiquidityInd(851): INT
			struct LastLiquidityInd
			{
				static constexpr uint16_t tag{ 851 };
				static constexpr int32_t ADDED_LIQUIDITY{ 1 };
				static constexpr int32_t REMOVED_LIQUIDITY{ 2 };
				static constexpr int32_t LIQUIDITY_ROUTED_OUT{ 3 };
				static constexpr int32_t AUCTION{ 4 };
			};

			// PublishTrdIndicator(852): BOOLEAN
			struct PublishTrdIndicator
			{
				static constexpr uint16_t tag{ 852 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// ShortSaleReason(853): INT
			struct ShortSaleReason
			{
				static constexpr uint16_t tag{ 853 };
				static constexpr int32_t DEALER_SOLD_SHORT{ 0 };
				static constexpr int32_t DEALER_SOLD_SHORT_EXEMPT{ 1 };
				static constexpr int32_t SELLING_CUSTOMER_SOLD_SHORT{ 2 };
				static constexpr int32_t SELLING_CUSTOMER_SOLD_SHORT_EXEMPT{ 3 };
				static constexpr int32_t QUALIFIED_SERVICE_REPRESENTATIVE{ 4 };
				static constexpr int32_t QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT{ 5 };
			};

			// QtyType(854): INT
			struct QtyType
			{
				static constexpr uint16_t tag{ 854 };
				static constexpr int32_t UNITS{ 0 };
				static constexpr int32_t CONTRACTS{ 1 };
				static constexpr int32_t UNITS_OF_MEASURE_PER_TIME_UNIT{ 2 };
			};

			// SecondaryTrdType(855): INT
			struct SecondaryTrdType
			{
				static constexpr uint16_t tag{ 855 };
			};

			// TradeReportType(856): INT
			struct TradeReportType
			{
				static constexpr uint16_t tag{ 856 };
				static constexpr int32_t SUBMIT{ 0 };
				static constexpr int32_t ALLEGED_1{ 1 };
				static constexpr int32_t ACCEPT{ 2 };
				static constexpr int32_t DECLINE{ 3 };
				static constexpr int32_t ADDENDUM{ 4 };
				static constexpr int32_t NO_WAS{ 5 };
				static constexpr int32_t TRADE_REPORT_CANCEL{ 6 };
				static constexpr int32_t _7{ 7 };
				static constexpr int32_t DEFAULTED{ 8 };
				static constexpr int32_t INVALID_CMTA{ 9 };
				static constexpr int32_t PENDED{ 10 };
				static constexpr int32_t ALLEGED_NEW{ 11 };
				static constexpr int32_t ALLEGED_ADDENDUM{ 12 };
				static constexpr int32_t ALLEGED_NO_WAS{ 13 };
				static constexpr int32_t ALLEGED_TRADE_REPORT_CANCEL{ 14 };
				static constexpr int32_t ALLEGED_15{ 15 };
			};

			// AllocNoOrdersType(857): INT
			struct AllocNoOrdersType
			{
				static constexpr uint16_t tag{ 857 };
				static constexpr int32_t NOT_SPECIFIED{ 0 };
				static constexpr int32_t EXPLICIT_LIST_PROVIDED{ 1 };
			};

			// SharedCommission(858): AMT
			struct SharedCommission
			{
				static constexpr uint16_t tag{ 858 };
			};

			// ConfirmReqID(859): STRING
			struct ConfirmReqID
			{
				static constexpr uint16_t tag{ 859 };
			};

			// AvgParPx(860): PRICE
			struct AvgParPx
			{
				static constexpr uint16_t tag{ 860 };
			};

			// ReportedPx(861): PRICE
			struct ReportedPx
			{
				static constexpr uint16_t tag{ 861 };
			};

			// NoCapacities(862): NUMINGROUP
			struct NoCapacities
			{
				static constexpr uint16_t tag{ 862 };
			};

			// OrderCapacityQty(863): QTY
			struct OrderCapacityQty
			{
				static constexpr uint16_t tag{ 863 };
			};

			// NoEvents(864): NUMINGROUP
			struct NoEvents
			{
				static constexpr uint16_t tag{ 864 };
			};

			// EventType(865): INT
			struct EventType
			{
				static constexpr uint16_t tag{ 865 };
				static constexpr int32_t PUT{ 1 };
				static constexpr int32_t CALL{ 2 };
				static constexpr int32_t TENDER{ 3 };
				static constexpr int32_t SINKING_FUND_CALL{ 4 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t ACTIVATION{ 5 };
				static constexpr int32_t INACTIVIATION{ 6 };
				static constexpr int32_t LAST_ELIGIBLE_TRADE_DATE{ 7 };
				static constexpr int32_t SWAP_START_DATE{ 8 };
				static constexpr int32_t SWAP_END_DATE{ 9 };
				static constexpr int32_t SWAP_NEXT_START_DATE{ 11 };
				static constexpr int32_t SWAP_ROLL_DATE{ 10 };
				static constexpr int32_t SWAP_NEXT_ROLL_DATE{ 12 };
				static constexpr int32_t FIRST_DELIVERY_DATE{ 13 };
				static constexpr int32_t LAST_DELIVERY_DATE{ 14 };
				static constexpr int32_t INITIAL_INVENTORY_DUE_DATE{ 15 };
				static constexpr int32_t FINAL_INVENTORY_DUE_DATE{ 16 };
				static constexpr int32_t FIRST_INTENT_DATE{ 17 };
				static constexpr int32_t LAST_INTENT_DATE{ 18 };
				static constexpr int32_t POSITION_REMOVAL_DATE{ 19 };
			};

			// EventDate(866): LOCALMKTDATE
			struct EventDate
			{
				static constexpr uint16_t tag{ 866 };
			};

			// EventPx(867): PRICE
			struct EventPx
			{
				static constexpr uint16_t tag{ 867 };
			};

			// EventText(868): STRING
			struct EventText
			{
				static constexpr uint16_t tag{ 868 };
			};

			// PctAtRisk(869): PERCENTAGE
			struct PctAtRisk
			{
				static constexpr uint16_t tag{ 869 };
			};

			// NoInstrAttrib(870): NUMINGROUP
			struct NoInstrAttrib
			{
				static constexpr uint16_t tag{ 870 };
			};

			// InstrAttribType(871): INT
			struct InstrAttribType
			{
				static constexpr uint16_t tag{ 871 };
				static constexpr int32_t FLAT{ 1 };
				static constexpr int32_t ORIGINAL_ISSUE_DISCOUNT{ 10 };
				static constexpr int32_t CALLABLE_PUTTABLE{ 11 };
				static constexpr int32_t ESCROWED_TO_MATURITY{ 12 };
				static constexpr int32_t ESCROWED_TO_REDEMPTION_DATE{ 13 };
				static constexpr int32_t PRE_REFUNDED{ 14 };
				static constexpr int32_t IN_DEFAULT{ 15 };
				static constexpr int32_t UNRATED{ 16 };
				static constexpr int32_t TAXABLE{ 17 };
				static constexpr int32_t INDEXED{ 18 };
				static constexpr int32_t SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX{ 19 };
				static constexpr int32_t ZERO_COUPON{ 2 };
				static constexpr int32_t ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE{ 20 };
				static constexpr int32_t CALLABLE_BELOW_MATURITY_VALUE{ 21 };
				static constexpr int32_t CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED{ 22 };
				static constexpr int32_t INTEREST_BEARING{ 3 };
				static constexpr int32_t NO_PERIODIC_PAYMENTS{ 4 };
				static constexpr int32_t VARIABLE_RATE{ 5 };
				static constexpr int32_t LESS_FEE_FOR_PUT{ 6 };
				static constexpr int32_t STEPPED_COUPON{ 7 };
				static constexpr int32_t COUPON_PERIOD{ 8 };
				static constexpr int32_t WHEN_AND_IF_ISSUED{ 9 };
				static constexpr int32_t TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE{ 99 };
				static constexpr int32_t PRICE_TICK_RULES_FOR_SECURITY{ 23 };
				static constexpr int32_t TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY{ 24 };
				static constexpr int32_t INSTRUMENT_DENOMINATOR{ 25 };
				static constexpr int32_t INSTRUMENT_NUMERATOR{ 26 };
				static constexpr int32_t INSTRUMENT_PRICE_PRECISION{ 27 };
				static constexpr int32_t INSTRUMENT_STRIKE_PRICE{ 28 };
				static constexpr int32_t TRADEABLE_INDICATOR{ 29 };
			};

			// InstrAttribValue(872): STRING
			struct InstrAttribValue
			{
				static constexpr uint16_t tag{ 872 };
			};

			// DatedDate(873): LOCALMKTDATE
			struct DatedDate
			{
				static constexpr uint16_t tag{ 873 };
			};

			// InterestAccrualDate(874): LOCALMKTDATE
			struct InterestAccrualDate
			{
				static constexpr uint16_t tag{ 874 };
			};

			// CPProgram(875): INT
			struct CPProgram
			{
				static constexpr uint16_t tag{ 875 };
				static constexpr int32_t _3{ 1 };
				static constexpr int32_t _4{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// CPRegType(876): STRING
			struct CPRegType
			{
				static constexpr uint16_t tag{ 876 };
			};

			// UnderlyingCPProgram(877): STRING
			struct UnderlyingCPProgram
			{
				static constexpr uint16_t tag{ 877 };
			};

			// UnderlyingCPRegType(878): STRING
			struct UnderlyingCPRegType
			{
				static constexpr uint16_t tag{ 878 };
			};

			// UnderlyingQty(879): QTY
			struct UnderlyingQty
			{
				static constexpr uint16_t tag{ 879 };
			};

			// TrdMatchID(880): STRING
			struct TrdMatchID
			{
				static constexpr uint16_t tag{ 880 };
			};

			// SecondaryTradeReportRefID(881): STRING
			struct SecondaryTradeReportRefID
			{
				static constexpr uint16_t tag{ 881 };
			};

			// UnderlyingDirtyPrice(882): PRICE
			struct UnderlyingDirtyPrice
			{
				static constexpr uint16_t tag{ 882 };
			};

			// UnderlyingEndPrice(883): PRICE
			struct UnderlyingEndPrice
			{
				static constexpr uint16_t tag{ 883 };
			};

			// UnderlyingStartValue(884): AMT
			struct UnderlyingStartValue
			{
				static constexpr uint16_t tag{ 884 };
			};

			// UnderlyingCurrentValue(885): AMT
			struct UnderlyingCurrentValue
			{
				static constexpr uint16_t tag{ 885 };
			};

			// UnderlyingEndValue(886): AMT
			struct UnderlyingEndValue
			{
				static constexpr uint16_t tag{ 886 };
			};

			// NoUnderlyingStips(887): NUMINGROUP
			struct NoUnderlyingStips
			{
				static constexpr uint16_t tag{ 887 };
			};

			// UnderlyingStipType(888): STRING
			struct UnderlyingStipType
			{
				static constexpr uint16_t tag{ 888 };
			};

			// UnderlyingStipValue(889): STRING
			struct UnderlyingStipValue
			{
				static constexpr uint16_t tag{ 889 };
			};

			// MaturityNetMoney(890): AMT
			struct MaturityNetMoney
			{
				static constexpr uint16_t tag{ 890 };
			};

			// MiscFeeBasis(891): INT
			struct MiscFeeBasis
			{
				static constexpr uint16_t tag{ 891 };
				static constexpr int32_t ABSOLUTE{ 0 };
				static constexpr int32_t PER_UNIT{ 1 };
				static constexpr int32_t PERCENTAGE{ 2 };
			};

			// TotNoAllocs(892): INT
			struct TotNoAllocs
			{
				static constexpr uint16_t tag{ 892 };
			};

			// LastFragment(893): BOOLEAN
			struct LastFragment
			{
				static constexpr uint16_t tag{ 893 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// CollReqID(894): STRING
			struct CollReqID
			{
				static constexpr uint16_t tag{ 894 };
			};

			// CollAsgnReason(895): INT
			struct CollAsgnReason
			{
				static constexpr uint16_t tag{ 895 };
				static constexpr int32_t INITIAL{ 0 };
				static constexpr int32_t SCHEDULED{ 1 };
				static constexpr int32_t TIME_WARNING{ 2 };
				static constexpr int32_t MARGIN_DEFICIENCY{ 3 };
				static constexpr int32_t MARGIN_EXCESS{ 4 };
				static constexpr int32_t FORWARD_COLLATERAL_DEMAND{ 5 };
				static constexpr int32_t EVENT_OF_DEFAULT{ 6 };
				static constexpr int32_t ADVERSE_TAX_EVENT{ 7 };
			};

			// CollInquiryQualifier(896): INT
			struct CollInquiryQualifier
			{
				static constexpr uint16_t tag{ 896 };
				static constexpr int32_t TRADE_DATE{ 0 };
				static constexpr int32_t GC_INSTRUMENT{ 1 };
				static constexpr int32_t COLLATERAL_INSTRUMENT{ 2 };
				static constexpr int32_t SUBSTITUTION_ELIGIBLE{ 3 };
				static constexpr int32_t NOT_ASSIGNED{ 4 };
				static constexpr int32_t PARTIALLY_ASSIGNED{ 5 };
				static constexpr int32_t FULLY_ASSIGNED{ 6 };
				static constexpr int32_t OUTSTANDING_TRADES{ 7 };
			};

			// NoTrades(897): NUMINGROUP
			struct NoTrades
			{
				static constexpr uint16_t tag{ 897 };
			};

			// MarginRatio(898): PERCENTAGE
			struct MarginRatio
			{
				static constexpr uint16_t tag{ 898 };
			};

			// MarginExcess(899): AMT
			struct MarginExcess
			{
				static constexpr uint16_t tag{ 899 };
			};

			// TotalNetValue(900): AMT
			struct TotalNetValue
			{
				static constexpr uint16_t tag{ 900 };
			};

			// CashOutstanding(901): AMT
			struct CashOutstanding
			{
				static constexpr uint16_t tag{ 901 };
			};

			// CollAsgnID(902): STRING
			struct CollAsgnID
			{
				static constexpr uint16_t tag{ 902 };
			};

			// CollAsgnTransType(903): INT
			struct CollAsgnTransType
			{
				static constexpr uint16_t tag{ 903 };
				static constexpr int32_t NEW{ 0 };
				static constexpr int32_t REPLACE{ 1 };
				static constexpr int32_t CANCEL{ 2 };
				static constexpr int32_t RELEASE{ 3 };
				static constexpr int32_t REVERSE{ 4 };
			};

			// CollRespID(904): STRING
			struct CollRespID
			{
				static constexpr uint16_t tag{ 904 };
			};

			// CollAsgnRespType(905): INT
			struct CollAsgnRespType
			{
				static constexpr uint16_t tag{ 905 };
				static constexpr int32_t RECEIVED{ 0 };
				static constexpr int32_t ACCEPTED{ 1 };
				static constexpr int32_t DECLINED{ 2 };
				static constexpr int32_t REJECTED{ 3 };
			};

			// CollAsgnRejectReason(906): INT
			struct CollAsgnRejectReason
			{
				static constexpr uint16_t tag{ 906 };
				static constexpr int32_t UNKNOWN_DEAL{ 0 };
				static constexpr int32_t UNKNOWN_OR_INVALID_INSTRUMENT{ 1 };
				static constexpr int32_t UNAUTHORIZED_TRANSACTION{ 2 };
				static constexpr int32_t INSUFFICIENT_COLLATERAL{ 3 };
				static constexpr int32_t INVALID_TYPE_OF_COLLATERAL{ 4 };
				static constexpr int32_t EXCESSIVE_SUBSTITUTION{ 5 };
				static constexpr int32_t OTHER{ 99 };
			};

			// CollAsgnRefID(907): STRING
			struct CollAsgnRefID
			{
				static constexpr uint16_t tag{ 907 };
			};

			// CollRptID(908): STRING
			struct CollRptID
			{
				static constexpr uint16_t tag{ 908 };
			};

			// CollInquiryID(909): STRING
			struct CollInquiryID
			{
				static constexpr uint16_t tag{ 909 };
			};

			// CollStatus(910): INT
			struct CollStatus
			{
				static constexpr uint16_t tag{ 910 };
				static constexpr int32_t UNASSIGNED{ 0 };
				static constexpr int32_t PARTIALLY_ASSIGNED{ 1 };
				static constexpr int32_t ASSIGNMENT_PROPOSED{ 2 };
				static constexpr int32_t ASSIGNED{ 3 };
				static constexpr int32_t CHALLENGED{ 4 };
			};

			// TotNumReports(911): INT
			struct TotNumReports
			{
				static constexpr uint16_t tag{ 911 };
			};

			// LastRptRequested(912): BOOLEAN
			struct LastRptRequested
			{
				static constexpr uint16_t tag{ 912 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// AgreementDesc(913): STRING
			struct AgreementDesc
			{
				static constexpr uint16_t tag{ 913 };
			};

			// AgreementID(914): STRING
			struct AgreementID
			{
				static constexpr uint16_t tag{ 914 };
			};

			// AgreementDate(915): LOCALMKTDATE
			struct AgreementDate
			{
				static constexpr uint16_t tag{ 915 };
			};

			// StartDate(916): LOCALMKTDATE
			struct StartDate
			{
				static constexpr uint16_t tag{ 916 };
			};

			// EndDate(917): LOCALMKTDATE
			struct EndDate
			{
				static constexpr uint16_t tag{ 917 };
			};

			// AgreementCurrency(918): CURRENCY
			struct AgreementCurrency
			{
				static constexpr uint16_t tag{ 918 };
			};

			// DeliveryType(919): INT
			struct DeliveryType
			{
				static constexpr uint16_t tag{ 919 };
				static constexpr int32_t VERSUS_PAYMENT_DELIVER{ 0 };
				static constexpr int32_t FREE_DELIVER{ 1 };
				static constexpr int32_t TRI_PARTY{ 2 };
				static constexpr int32_t HOLD_IN_CUSTODY{ 3 };
			};

			// EndAccruedInterestAmt(920): AMT
			struct EndAccruedInterestAmt
			{
				static constexpr uint16_t tag{ 920 };
			};

			// StartCash(921): AMT
			struct StartCash
			{
				static constexpr uint16_t tag{ 921 };
			};

			// EndCash(922): AMT
			struct EndCash
			{
				static constexpr uint16_t tag{ 922 };
			};

			// UserRequestID(923): STRING
			struct UserRequestID
			{
				static constexpr uint16_t tag{ 923 };
			};

			// UserRequestType(924): INT
			struct UserRequestType
			{
				static constexpr uint16_t tag{ 924 };
				static constexpr int32_t LOG_ON_USER{ 1 };
				static constexpr int32_t LOG_OFF_USER{ 2 };
				static constexpr int32_t CHANGE_PASSWORD_FOR_USER{ 3 };
				static constexpr int32_t REQUEST_INDIVIDUAL_USER_STATUS{ 4 };
			};

			// NewPassword(925): STRING
			struct NewPassword
			{
				static constexpr uint16_t tag{ 925 };
			};

			// UserStatus(926): INT
			struct UserStatus
			{
				static constexpr uint16_t tag{ 926 };
				static constexpr int32_t LOGGED_IN{ 1 };
				static constexpr int32_t NOT_LOGGED_IN{ 2 };
				static constexpr int32_t USER_NOT_RECOGNISED{ 3 };
				static constexpr int32_t PASSWORD_INCORRECT{ 4 };
				static constexpr int32_t PASSWORD_CHANGED{ 5 };
				static constexpr int32_t OTHER{ 6 };
				static constexpr int32_t FORCED_USER_LOGOUT_BY_EXCHANGE{ 7 };
				static constexpr int32_t SESSION_SHUTDOWN_WARNING{ 8 };
			};

			// UserStatusText(927): STRING
			struct UserStatusText
			{
				static constexpr uint16_t tag{ 927 };
			};

			// StatusValue(928): INT
			struct StatusValue
			{
				static constexpr uint16_t tag{ 928 };
				static constexpr int32_t CONNECTED{ 1 };
				static constexpr int32_t NOT_CONNECTED_2{ 2 };
				static constexpr int32_t NOT_CONNECTED_3{ 3 };
				static constexpr int32_t IN_PROCESS{ 4 };
			};

			// StatusText(929): STRING
			struct StatusText
			{
				static constexpr uint16_t tag{ 929 };
			};

			// RefCompID(930): STRING
			struct RefCompID
			{
				static constexpr uint16_t tag{ 930 };
			};

			// RefSubID(931): STRING
			struct RefSubID
			{
				static constexpr uint16_t tag{ 931 };
			};

			// NetworkResponseID(932): STRING
			struct NetworkResponseID
			{
				static constexpr uint16_t tag{ 932 };
			};

			// NetworkRequestID(933): STRING
			struct NetworkRequestID
			{
				static constexpr uint16_t tag{ 933 };
			};

			// LastNetworkResponseID(934): STRING
			struct LastNetworkResponseID
			{
				static constexpr uint16_t tag{ 934 };
			};

			// NetworkRequestType(935): INT
			struct NetworkRequestType
			{
				static constexpr uint16_t tag{ 935 };
				static constexpr int32_t SNAPSHOT{ 1 };
				static constexpr int32_t SUBSCRIBE{ 2 };
				static constexpr int32_t STOP_SUBSCRIBING{ 4 };
				static constexpr int32_t LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED{ 8 };
			};

			// NoCompIDs(936): NUMINGROUP
			struct NoCompIDs
			{
				static constexpr uint16_t tag{ 936 };
			};

			// NetworkStatusResponseType(937): INT
			struct NetworkStatusResponseType
			{
				static constexpr uint16_t tag{ 937 };
				static constexpr int32_t FULL{ 1 };
				static constexpr int32_t INCREMENTAL_UPDATE{ 2 };
			};

			// NoCollInquiryQualifier(938): NUMINGROUP
			struct NoCollInquiryQualifier
			{
				static constexpr uint16_t tag{ 938 };
			};

			// TrdRptStatus(939): INT
			struct TrdRptStatus
			{
				static constexpr uint16_t tag{ 939 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t REJECTED{ 1 };
				static constexpr int32_t ACCEPTED_WITH_ERRORS{ 3 };
			};

			// AffirmStatus(940): INT
			struct AffirmStatus
			{
				static constexpr uint16_t tag{ 940 };
				static constexpr int32_t RECEIVED{ 1 };
				static constexpr int32_t CONFIRM_REJECTED_IE_NOT_AFFIRMED{ 2 };
				static constexpr int32_t AFFIRMED{ 3 };
			};

			// UnderlyingStrikeCurrency(941): CURRENCY
			struct UnderlyingStrikeCurrency
			{
				static constexpr uint16_t tag{ 941 };
			};

			// LegStrikeCurrency(942): CURRENCY
			struct LegStrikeCurrency
			{
				static constexpr uint16_t tag{ 942 };
			};

			// TimeBracket(943): STRING
			struct TimeBracket
			{
				static constexpr uint16_t tag{ 943 };
			};

			// CollAction(944): INT
			struct CollAction
			{
				static constexpr uint16_t tag{ 944 };
				static constexpr int32_t RETAIN{ 0 };
				static constexpr int32_t ADD{ 1 };
				static constexpr int32_t REMOVE{ 2 };
			};

			// CollInquiryStatus(945): INT
			struct CollInquiryStatus
			{
				static constexpr uint16_t tag{ 945 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t ACCEPTED_WITH_WARNINGS{ 1 };
				static constexpr int32_t COMPLETED{ 2 };
				static constexpr int32_t COMPLETED_WITH_WARNINGS{ 3 };
				static constexpr int32_t REJECTED{ 4 };
			};

			// CollInquiryResult(946): INT
			struct CollInquiryResult
			{
				static constexpr uint16_t tag{ 946 };
				static constexpr int32_t SUCCESSFUL{ 0 };
				static constexpr int32_t INVALID_OR_UNKNOWN_INSTRUMENT{ 1 };
				static constexpr int32_t INVALID_OR_UNKNOWN_COLLATERAL_TYPE{ 2 };
				static constexpr int32_t INVALID_PARTIES{ 3 };
				static constexpr int32_t INVALID_TRANSPORT_TYPE_REQUESTED{ 4 };
				static constexpr int32_t INVALID_DESTINATION_REQUESTED{ 5 };
				static constexpr int32_t NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED{ 6 };
				static constexpr int32_t NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED{ 7 };
				static constexpr int32_t COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED{ 8 };
				static constexpr int32_t UNAUTHORIZED_FOR_COLLATERAL_INQUIRY{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// StrikeCurrency(947): CURRENCY
			struct StrikeCurrency
			{
				static constexpr uint16_t tag{ 947 };
			};

			// NoNested3PartyIDs(948): NUMINGROUP
			struct NoNested3PartyIDs
			{
				static constexpr uint16_t tag{ 948 };
			};

			// Nested3PartyID(949): STRING
			struct Nested3PartyID
			{
				static constexpr uint16_t tag{ 949 };
			};

			// Nested3PartyIDSource(950): CHAR
			struct Nested3PartyIDSource
			{
				static constexpr uint16_t tag{ 950 };
			};

			// Nested3PartyRole(951): INT
			struct Nested3PartyRole
			{
				static constexpr uint16_t tag{ 951 };
			};

			// NoNested3PartySubIDs(952): NUMINGROUP
			struct NoNested3PartySubIDs
			{
				static constexpr uint16_t tag{ 952 };
			};

			// Nested3PartySubID(953): STRING
			struct Nested3PartySubID
			{
				static constexpr uint16_t tag{ 953 };
			};

			// Nested3PartySubIDType(954): INT
			struct Nested3PartySubIDType
			{
				static constexpr uint16_t tag{ 954 };
			};

			// LegContractSettlMonth(955): MONTHYEAR
			struct LegContractSettlMonth
			{
				static constexpr uint16_t tag{ 955 };
			};

			// LegInterestAccrualDate(956): LOCALMKTDATE
			struct LegInterestAccrualDate
			{
				static constexpr uint16_t tag{ 956 };
			};

			// NoStrategyParameters(957): NUMINGROUP
			struct NoStrategyParameters
			{
				static constexpr uint16_t tag{ 957 };
			};

			// StrategyParameterName(958): STRING
			struct StrategyParameterName
			{
				static constexpr uint16_t tag{ 958 };
			};

			// StrategyParameterType(959): INT
			struct StrategyParameterType
			{
				static constexpr uint16_t tag{ 959 };
				static constexpr int32_t INT{ 1 };
				static constexpr int32_t LENGTH{ 2 };
				static constexpr int32_t NUMINGROUP{ 3 };
				static constexpr int32_t SEQNUM{ 4 };
				static constexpr int32_t TAGNUM{ 5 };
				static constexpr int32_t FLOAT{ 6 };
				static constexpr int32_t QTY{ 7 };
				static constexpr int32_t PRICE{ 8 };
				static constexpr int32_t PRICEOFFSET{ 9 };
				static constexpr int32_t AMT{ 10 };
				static constexpr int32_t PERCENTAGE{ 11 };
				static constexpr int32_t CHAR{ 12 };
				static constexpr int32_t BOOLEAN{ 13 };
				static constexpr int32_t STRING{ 14 };
				static constexpr int32_t MULTIPLECHARVALUE{ 15 };
				static constexpr int32_t CURRENCY{ 16 };
				static constexpr int32_t EXCHANGE{ 17 };
				static constexpr int32_t MONTHYEAR{ 18 };
				static constexpr int32_t UTCTIMESTAMP{ 19 };
				static constexpr int32_t UTCTIMEONLY{ 20 };
				static constexpr int32_t LOCALMKTDATE{ 21 };
				static constexpr int32_t UTCDATEONLY{ 22 };
				static constexpr int32_t DATA{ 23 };
				static constexpr int32_t MULTIPLESTRINGVALUE{ 24 };
				static constexpr int32_t COUNTRY{ 25 };
				static constexpr int32_t LANGUAGE{ 26 };
				static constexpr int32_t TZTIMEONLY{ 27 };
				static constexpr int32_t TZTIMESTAMP{ 28 };
				static constexpr int32_t TENOR{ 29 };
			};

			// StrategyParameterValue(960): STRING
			struct StrategyParameterValue
			{
				static constexpr uint16_t tag{ 960 };
			};

			// HostCrossID(961): STRING
			struct HostCrossID
			{
				static constexpr uint16_t tag{ 961 };
			};

			// SideTimeInForce(962): UTCTIMESTAMP
			struct SideTimeInForce
			{
				static constexpr uint16_t tag{ 962 };
			};

			// MDReportID(963): INT
			struct MDReportID
			{
				static constexpr uint16_t tag{ 963 };
			};

			// SecurityReportID(964): INT
			struct SecurityReportID
			{
				static constexpr uint16_t tag{ 964 };
			};

			// SecurityStatusID(965): STRING
			struct SecurityStatusID
			{
				static constexpr uint16_t tag{ 965 };
				static inline const std::string ACTIVE{ "1" };
				static inline const std::string INACTIVE{ "2" };
			};

			// SettleOnOpenFlag(966): STRING
			struct SettleOnOpenFlag
			{
				static constexpr uint16_t tag{ 966 };
			};

			// StrikeMultiplier(967): FLOAT
			struct StrikeMultiplier
			{
				static constexpr uint16_t tag{ 967 };
			};

			// StrikeValue(968): FLOAT
			struct StrikeValue
			{
				static constexpr uint16_t tag{ 968 };
			};

			// MinPriceIncrement(969): FLOAT
			struct MinPriceIncrement
			{
				static constexpr uint16_t tag{ 969 };
			};

			// PositionLimit(970): INT
			struct PositionLimit
			{
				static constexpr uint16_t tag{ 970 };
			};

			// NTPositionLimit(971): INT
			struct NTPositionLimit
			{
				static constexpr uint16_t tag{ 971 };
			};

			// UnderlyingAllocationPercent(972): PERCENTAGE
			struct UnderlyingAllocationPercent
			{
				static constexpr uint16_t tag{ 972 };
			};

			// UnderlyingCashAmount(973): AMT
			struct UnderlyingCashAmount
			{
				static constexpr uint16_t tag{ 973 };
			};

			// UnderlyingCashType(974): STRING
			struct UnderlyingCashType
			{
				static constexpr uint16_t tag{ 974 };
				static inline const std::string FIXED{ "FIXED" };
				static inline const std::string DIFF{ "DIFF" };
			};

			// UnderlyingSettlementType(975): INT
			struct UnderlyingSettlementType
			{
				static constexpr uint16_t tag{ 975 };
				static constexpr int32_t T_PLUS_1{ 2 };
				static constexpr int32_t T_PLUS_3{ 4 };
				static constexpr int32_t T_PLUS_4{ 5 };
			};

			// QuantityDate(976): LOCALMKTDATE
			struct QuantityDate
			{
				static constexpr uint16_t tag{ 976 };
			};

			// ContIntRptID(977): STRING
			struct ContIntRptID
			{
				static constexpr uint16_t tag{ 977 };
			};

			// LateIndicator(978): BOOLEAN
			struct LateIndicator
			{
				static constexpr uint16_t tag{ 978 };
			};

			// InputSource(979): STRING
			struct InputSource
			{
				static constexpr uint16_t tag{ 979 };
			};

			// SecurityUpdateAction(980): CHAR
			struct SecurityUpdateAction
			{
				static constexpr uint16_t tag{ 980 };
				static constexpr char ADD{ 'A' };
				static constexpr char DELETE{ 'D' };
				static constexpr char MODIFY{ 'M' };
			};

			// NoExpiration(981): NUMINGROUP
			struct NoExpiration
			{
				static constexpr uint16_t tag{ 981 };
			};

			// ExpirationQtyType(982): INT
			struct ExpirationQtyType
			{
				static constexpr uint16_t tag{ 982 };
				static constexpr int32_t AUTO_EXERCISE{ 1 };
				static constexpr int32_t NON_AUTO_EXERCISE{ 2 };
				static constexpr int32_t FINAL_WILL_BE_EXERCISED{ 3 };
				static constexpr int32_t CONTRARY_INTENTION{ 4 };
				static constexpr int32_t DIFFERENCE{ 5 };
			};

			// ExpQty(983): QTY
			struct ExpQty
			{
				static constexpr uint16_t tag{ 983 };
			};

			// NoUnderlyingAmounts(984): NUMINGROUP
			struct NoUnderlyingAmounts
			{
				static constexpr uint16_t tag{ 984 };
			};

			// UnderlyingPayAmount(985): AMT
			struct UnderlyingPayAmount
			{
				static constexpr uint16_t tag{ 985 };
			};

			// UnderlyingCollectAmount(986): AMT
			struct UnderlyingCollectAmount
			{
				static constexpr uint16_t tag{ 986 };
			};

			// UnderlyingSettlementDate(987): LOCALMKTDATE
			struct UnderlyingSettlementDate
			{
				static constexpr uint16_t tag{ 987 };
			};

			// UnderlyingSettlementStatus(988): STRING
			struct UnderlyingSettlementStatus
			{
				static constexpr uint16_t tag{ 988 };
			};

			// SecondaryIndividualAllocID(989): STRING
			struct SecondaryIndividualAllocID
			{
				static constexpr uint16_t tag{ 989 };
			};

			// LegReportID(990): STRING
			struct LegReportID
			{
				static constexpr uint16_t tag{ 990 };
			};

			// RndPx(991): PRICE
			struct RndPx
			{
				static constexpr uint16_t tag{ 991 };
			};

			// IndividualAllocType(992): INT
			struct IndividualAllocType
			{
				static constexpr uint16_t tag{ 992 };
				static constexpr int32_t SUB_ALLOCATE{ 1 };
				static constexpr int32_t THIRD_PARTY_ALLOCATION{ 2 };
			};

			// AllocCustomerCapacity(993): STRING
			struct AllocCustomerCapacity
			{
				static constexpr uint16_t tag{ 993 };
			};

			// TierCode(994): STRING
			struct TierCode
			{
				static constexpr uint16_t tag{ 994 };
			};

			// UnitOfMeasure(996): STRING
			struct UnitOfMeasure
			{
				static constexpr uint16_t tag{ 996 };
				static inline const std::string MEGAWATT_HOURS{ "MWh" };
				static inline const std::string ONE_MILLION_BTU{ "MMBtu" };
				static inline const std::string BARRELS{ "Bbl" };
				static inline const std::string GALLONS{ "Gal" };
				static inline const std::string METRIC_TONS{ "t" };
				static inline const std::string TONS{ "tn" };
				static inline const std::string MILLION_BARRELS{ "MMbbl" };
				static inline const std::string POUNDS{ "lbs" };
				static inline const std::string TROY_OUNCES{ "oz_tr" };
				static inline const std::string US_DOLLARS{ "USD" };
				static inline const std::string BILLION_CUBIC_FEET{ "Bcf" };
				static inline const std::string BUSHELS{ "Bu" };
				static inline const std::string ALLOWANCES{ "Alw" };
			};

			// TimeUnit(997): STRING
			struct TimeUnit
			{
				static constexpr uint16_t tag{ 997 };
				static inline const std::string SECOND{ "S" };
				static inline const std::string MINUTE{ "Min" };
				static inline const std::string HOUR{ "H" };
				static inline const std::string DAY{ "D" };
				static inline const std::string WEEK{ "Wk" };
				static inline const std::string MONTH{ "Mo" };
				static inline const std::string YEAR{ "Yr" };
			};

			// UnderlyingUnitOfMeasure(998): STRING
			struct UnderlyingUnitOfMeasure
			{
				static constexpr uint16_t tag{ 998 };
			};

			// LegUnitOfMeasure(999): STRING
			struct LegUnitOfMeasure
			{
				static constexpr uint16_t tag{ 999 };
			};

			// UnderlyingTimeUnit(1000): STRING
			struct UnderlyingTimeUnit
			{
				static constexpr uint16_t tag{ 1000 };
			};

			// LegTimeUnit(1001): STRING
			struct LegTimeUnit
			{
				static constexpr uint16_t tag{ 1001 };
			};

			// AllocMethod(1002): INT
			struct AllocMethod
			{
				static constexpr uint16_t tag{ 1002 };
				static constexpr int32_t AUTOMATIC{ 1 };
				static constexpr int32_t GUARANTOR{ 2 };
				static constexpr int32_t MANUAL{ 3 };
			};

			// TradeID(1003): STRING
			struct TradeID
			{
				static constexpr uint16_t tag{ 1003 };
			};

			// SideTradeReportID(1005): STRING
			struct SideTradeReportID
			{
				static constexpr uint16_t tag{ 1005 };
			};

			// SideFillStationCd(1006): STRING
			struct SideFillStationCd
			{
				static constexpr uint16_t tag{ 1006 };
			};

			// SideReasonCd(1007): STRING
			struct SideReasonCd
			{
				static constexpr uint16_t tag{ 1007 };
			};

			// SideTrdSubTyp(1008): INT
			struct SideTrdSubTyp
			{
				static constexpr uint16_t tag{ 1008 };
			};

			// SideLastQty(1009): INT
			struct SideLastQty
			{
				static constexpr uint16_t tag{ 1009 };
			};

			// MessageEventSource(1011): STRING
			struct MessageEventSource
			{
				static constexpr uint16_t tag{ 1011 };
			};

			// SideTrdRegTimestamp(1012): UTCTIMESTAMP
			struct SideTrdRegTimestamp
			{
				static constexpr uint16_t tag{ 1012 };
			};

			// SideTrdRegTimestampType(1013): INT
			struct SideTrdRegTimestampType
			{
				static constexpr uint16_t tag{ 1013 };
			};

			// SideTrdRegTimestampSrc(1014): STRING
			struct SideTrdRegTimestampSrc
			{
				static constexpr uint16_t tag{ 1014 };
			};

			// AsOfIndicator(1015): CHAR
			struct AsOfIndicator
			{
				static constexpr uint16_t tag{ 1015 };
				static constexpr char FALSE{ '0' };
				static constexpr char TRUE{ '1' };
			};

			// NoSideTrdRegTS(1016): NUMINGROUP
			struct NoSideTrdRegTS
			{
				static constexpr uint16_t tag{ 1016 };
			};

			// LegOptionRatio(1017): FLOAT
			struct LegOptionRatio
			{
				static constexpr uint16_t tag{ 1017 };
			};

			// NoInstrumentParties(1018): NUMINGROUP
			struct NoInstrumentParties
			{
				static constexpr uint16_t tag{ 1018 };
			};

			// InstrumentPartyID(1019): STRING
			struct InstrumentPartyID
			{
				static constexpr uint16_t tag{ 1019 };
			};

			// TradeVolume(1020): QTY
			struct TradeVolume
			{
				static constexpr uint16_t tag{ 1020 };
			};

			// MDBookType(1021): INT
			struct MDBookType
			{
				static constexpr uint16_t tag{ 1021 };
				static constexpr int32_t TOP_OF_BOOK{ 1 };
				static constexpr int32_t PRICE_DEPTH{ 2 };
				static constexpr int32_t ORDER_DEPTH{ 3 };
			};

			// MDFeedType(1022): STRING
			struct MDFeedType
			{
				static constexpr uint16_t tag{ 1022 };
			};

			// MDPriceLevel(1023): INT
			struct MDPriceLevel
			{
				static constexpr uint16_t tag{ 1023 };
			};

			// MDOriginType(1024): INT
			struct MDOriginType
			{
				static constexpr uint16_t tag{ 1024 };
				static constexpr int32_t BOOK{ 0 };
				static constexpr int32_t OFF_BOOK{ 1 };
				static constexpr int32_t CROSS{ 2 };
			};

			// FirstPx(1025): PRICE
			struct FirstPx
			{
				static constexpr uint16_t tag{ 1025 };
			};

			// MDEntrySpotRate(1026): FLOAT
			struct MDEntrySpotRate
			{
				static constexpr uint16_t tag{ 1026 };
			};

			// MDEntryForwardPoints(1027): PRICEOFFSET
			struct MDEntryForwardPoints
			{
				static constexpr uint16_t tag{ 1027 };
			};

			// ManualOrderIndicator(1028): BOOLEAN
			struct ManualOrderIndicator
			{
				static constexpr uint16_t tag{ 1028 };
			};

			// CustDirectedOrder(1029): BOOLEAN
			struct CustDirectedOrder
			{
				static constexpr uint16_t tag{ 1029 };
			};

			// ReceivedDeptID(1030): STRING
			struct ReceivedDeptID
			{
				static constexpr uint16_t tag{ 1030 };
			};

			// CustOrderHandlingInst(1031): MULTIPLESTRINGVALUE
			struct CustOrderHandlingInst
			{
				static constexpr uint16_t tag{ 1031 };
				static inline const std::string ADD_ON_ORDER{ "ADD" };
				static inline const std::string ALL_OR_NONE{ "AON" };
				static inline const std::string CASH_NOT_HELD{ "CNH" };
				static inline const std::string DIRECTED_ORDER{ "DIR" };
				static inline const std::string EXCHANGE_FOR_PHYSICAL_TRANSACTION{ "E.W" };
				static inline const std::string FILL_OR_KILL{ "FOK" };
				static inline const std::string IMBALANCE_ONLY{ "IO" };
				static inline const std::string IMMEDIATE_OR_CANCEL{ "IOC" };
				static inline const std::string LIMIT_ON_OPEN{ "LOO" };
				static inline const std::string LIMIT_ON_CLOSE{ "LOC" };
				static inline const std::string MARKET_AT_OPEN{ "MAO" };
				static inline const std::string MARKET_AT_CLOSE{ "MAC" };
				static inline const std::string MARKET_ON_OPEN{ "MOO" };
				static inline const std::string MARKET_ON_CLOSE{ "MOC" };
				static inline const std::string MINIMUM_QUANTITY{ "MQT" };
				static inline const std::string NOT_HELD{ "NH" };
				static inline const std::string OVER_THE_DAY{ "OVD" };
				static inline const std::string PEGGED{ "PEG" };
				static inline const std::string RESERVE_SIZE_ORDER{ "RSV" };
				static inline const std::string STOP_STOCK_TRANSACTION{ "S.W" };
				static inline const std::string SCALE{ "SCL" };
				static inline const std::string TIME_ORDER{ "TMO" };
				static inline const std::string TRAILING_STOP{ "TS" };
				static inline const std::string WORK{ "WRK" };
			};

			// OrderHandlingInstSource(1032): INT
			struct OrderHandlingInstSource
			{
				static constexpr uint16_t tag{ 1032 };
				static constexpr int32_t NASD_OATS{ 1 };
			};

			// DeskType(1033): STRING
			struct DeskType
			{
				static constexpr uint16_t tag{ 1033 };
				static inline const std::string AGENCY{ "A" };
				static inline const std::string ARBITRAGE{ "AR" };
				static inline const std::string DERIVATIVES{ "D" };
				static inline const std::string INTERNATIONAL{ "IN" };
				static inline const std::string INSTITUTIONAL{ "IS" };
				static inline const std::string OTHER{ "O" };
				static inline const std::string PREFERRED_TRADING{ "PF" };
				static inline const std::string PROPRIETARY{ "PR" };
				static inline const std::string PROGRAM_TRADING{ "PT" };
				static inline const std::string SALES{ "S" };
				static inline const std::string TRADING{ "T" };
			};

			// DeskTypeSource(1034): INT
			struct DeskTypeSource
			{
				static constexpr uint16_t tag{ 1034 };
				static constexpr int32_t NASD_OATS{ 1 };
			};

			// DeskOrderHandlingInst(1035): MULTIPLESTRINGVALUE
			struct DeskOrderHandlingInst
			{
				static constexpr uint16_t tag{ 1035 };
				static inline const std::string ADD_ON_ORDER{ "ADD" };
				static inline const std::string ALL_OR_NONE{ "AON" };
				static inline const std::string CASH_NOT_HELD{ "CNH" };
				static inline const std::string DIRECTED_ORDER{ "DIR" };
				static inline const std::string EXCHANGE_FOR_PHYSICAL_TRANSACTION{ "E.W" };
				static inline const std::string FILL_OR_KILL{ "FOK" };
				static inline const std::string IMBALANCE_ONLY{ "IO" };
				static inline const std::string IMMEDIATE_OR_CANCEL{ "IOC" };
				static inline const std::string LIMIT_ON_OPEN{ "LOO" };
				static inline const std::string LIMIT_ON_CLOSE{ "LOC" };
				static inline const std::string MARKET_AT_OPEN{ "MAO" };
				static inline const std::string MARKET_AT_CLOSE{ "MAC" };
				static inline const std::string MARKET_ON_OPEN{ "MOO" };
				static inline const std::string MARKET_ON_CLOSE{ "MOC" };
				static inline const std::string MINIMUM_QUANTITY{ "MQT" };
				static inline const std::string NOT_HELD{ "NH" };
				static inline const std::string OVER_THE_DAY{ "OVD" };
				static inline const std::string PEGGED{ "PEG" };
				static inline const std::string RESERVE_SIZE_ORDER{ "RSV" };
				static inline const std::string STOP_STOCK_TRANSACTION{ "S.W" };
				static inline const std::string SCALE{ "SCL" };
				static inline const std::string TIME_ORDER{ "TMO" };
				static inline const std::string TRAILING_STOP{ "TS" };
				static inline const std::string WORK{ "WRK" };
			};

			// ExecAckStatus(1036): CHAR
			struct ExecAckStatus
			{
				static constexpr uint16_t tag{ 1036 };
				static constexpr char RECEIVED_NOT_YET_PROCESSED{ '0' };
				static constexpr char ACCEPTED{ '1' };
				static constexpr char DONT_KNOW{ '2' };
			};

			// UnderlyingDeliveryAmount(1037): AMT
			struct UnderlyingDeliveryAmount
			{
				static constexpr uint16_t tag{ 1037 };
			};

			// UnderlyingCapValue(1038): AMT
			struct UnderlyingCapValue
			{
				static constexpr uint16_t tag{ 1038 };
			};

			// UnderlyingSettlMethod(1039): STRING
			struct UnderlyingSettlMethod
			{
				static constexpr uint16_t tag{ 1039 };
			};

			// SecondaryTradeID(1040): STRING
			struct SecondaryTradeID
			{
				static constexpr uint16_t tag{ 1040 };
			};

			// FirmTradeID(1041): STRING
			struct FirmTradeID
			{
				static constexpr uint16_t tag{ 1041 };
			};

			// SecondaryFirmTradeID(1042): STRING
			struct SecondaryFirmTradeID
			{
				static constexpr uint16_t tag{ 1042 };
			};

			// CollApplType(1043): INT
			struct CollApplType
			{
				static constexpr uint16_t tag{ 1043 };
				static constexpr int32_t SPECIFIC_DEPOSIT{ 0 };
				static constexpr int32_t GENERAL{ 1 };
			};

			// UnderlyingAdjustedQuantity(1044): QTY
			struct UnderlyingAdjustedQuantity
			{
				static constexpr uint16_t tag{ 1044 };
			};

			// UnderlyingFXRate(1045): FLOAT
			struct UnderlyingFXRate
			{
				static constexpr uint16_t tag{ 1045 };
			};

			// UnderlyingFXRateCalc(1046): CHAR
			struct UnderlyingFXRateCalc
			{
				static constexpr uint16_t tag{ 1046 };
				static constexpr char MULTIPLY{ 'M' };
				static constexpr char DIVIDE{ 'D' };
			};

			// AllocPositionEffect(1047): CHAR
			struct AllocPositionEffect
			{
				static constexpr uint16_t tag{ 1047 };
				static constexpr char OPEN{ 'O' };
				static constexpr char CLOSE{ 'C' };
				static constexpr char ROLLED{ 'R' };
				static constexpr char FIFO{ 'F' };
			};

			// DealingCapacity(1048): CHAR
			struct DealingCapacity
			{
				static constexpr uint16_t tag{ 1048 };
				static constexpr char AGENT{ 'A' };
				static constexpr char PRINCIPAL{ 'P' };
				static constexpr char RISKLESS_PRINCIPAL{ 'R' };
			};

			// InstrmtAssignmentMethod(1049): CHAR
			struct InstrmtAssignmentMethod
			{
				static constexpr uint16_t tag{ 1049 };
			};

			// InstrumentPartyIDSource(1050): CHAR
			struct InstrumentPartyIDSource
			{
				static constexpr uint16_t tag{ 1050 };
			};

			// InstrumentPartyRole(1051): INT
			struct InstrumentPartyRole
			{
				static constexpr uint16_t tag{ 1051 };
			};

			// NoInstrumentPartySubIDs(1052): NUMINGROUP
			struct NoInstrumentPartySubIDs
			{
				static constexpr uint16_t tag{ 1052 };
			};

			// InstrumentPartySubID(1053): STRING
			struct InstrumentPartySubID
			{
				static constexpr uint16_t tag{ 1053 };
			};

			// InstrumentPartySubIDType(1054): INT
			struct InstrumentPartySubIDType
			{
				static constexpr uint16_t tag{ 1054 };
			};

			// PositionCurrency(1055): STRING
			struct PositionCurrency
			{
				static constexpr uint16_t tag{ 1055 };
			};

			// CalculatedCcyLastQty(1056): QTY
			struct CalculatedCcyLastQty
			{
				static constexpr uint16_t tag{ 1056 };
			};

			// AggressorIndicator(1057): BOOLEAN
			struct AggressorIndicator
			{
				static constexpr uint16_t tag{ 1057 };
				static constexpr char YES{ 'Y' };
				static constexpr char NO{ 'N' };
			};

			// NoUndlyInstrumentParties(1058): NUMINGROUP
			struct NoUndlyInstrumentParties
			{
				static constexpr uint16_t tag{ 1058 };
			};

			// UnderlyingInstrumentPartyID(1059): STRING
			struct UnderlyingInstrumentPartyID
			{
				static constexpr uint16_t tag{ 1059 };
			};

			// UnderlyingInstrumentPartyIDSource(1060): CHAR
			struct UnderlyingInstrumentPartyIDSource
			{
				static constexpr uint16_t tag{ 1060 };
			};

			// UnderlyingInstrumentPartyRole(1061): INT
			struct UnderlyingInstrumentPartyRole
			{
				static constexpr uint16_t tag{ 1061 };
			};

			// NoUndlyInstrumentPartySubIDs(1062): NUMINGROUP
			struct NoUndlyInstrumentPartySubIDs
			{
				static constexpr uint16_t tag{ 1062 };
			};

			// UnderlyingInstrumentPartySubID(1063): STRING
			struct UnderlyingInstrumentPartySubID
			{
				static constexpr uint16_t tag{ 1063 };
			};

			// UnderlyingInstrumentPartySubIDType(1064): INT
			struct UnderlyingInstrumentPartySubIDType
			{
				static constexpr uint16_t tag{ 1064 };
			};

			// BidSwapPoints(1065): PRICEOFFSET
			struct BidSwapPoints
			{
				static constexpr uint16_t tag{ 1065 };
			};

			// OfferSwapPoints(1066): PRICEOFFSET
			struct OfferSwapPoints
			{
				static constexpr uint16_t tag{ 1066 };
			};

			// LegBidForwardPoints(1067): PRICEOFFSET
			struct LegBidForwardPoints
			{
				static constexpr uint16_t tag{ 1067 };
			};

			// LegOfferForwardPoints(1068): PRICEOFFSET
			struct LegOfferForwardPoints
			{
				static constexpr uint16_t tag{ 1068 };
			};

			// SwapPoints(1069): PRICEOFFSET
			struct SwapPoints
			{
				static constexpr uint16_t tag{ 1069 };
			};

			// MDQuoteType(1070): INT
			struct MDQuoteType
			{
				static constexpr uint16_t tag{ 1070 };
				static constexpr int32_t INDICATIVE{ 0 };
				static constexpr int32_t TRADEABLE{ 1 };
				static constexpr int32_t RESTRICTED_TRADEABLE{ 2 };
				static constexpr int32_t COUNTER{ 3 };
				static constexpr int32_t INDICATIVE_AND_TRADEABLE{ 4 };
			};

			// LastSwapPoints(1071): PRICEOFFSET
			struct LastSwapPoints
			{
				static constexpr uint16_t tag{ 1071 };
			};

			// SideGrossTradeAmt(1072): AMT
			struct SideGrossTradeAmt
			{
				static constexpr uint16_t tag{ 1072 };
			};

			// LegLastForwardPoints(1073): PRICEOFFSET
			struct LegLastForwardPoints
			{
				static constexpr uint16_t tag{ 1073 };
			};

			// LegCalculatedCcyLastQty(1074): QTY
			struct LegCalculatedCcyLastQty
			{
				static constexpr uint16_t tag{ 1074 };
			};

			// LegGrossTradeAmt(1075): AMT
			struct LegGrossTradeAmt
			{
				static constexpr uint16_t tag{ 1075 };
			};

			// MaturityTime(1079): TZTIMEONLY
			struct MaturityTime
			{
				static constexpr uint16_t tag{ 1079 };
			};

			// RefOrderID(1080): STRING
			struct RefOrderID
			{
				static constexpr uint16_t tag{ 1080 };
			};

			// RefOrderIDSource(1081): CHAR
			struct RefOrderIDSource
			{
				static constexpr uint16_t tag{ 1081 };
				static constexpr char SECONDARYORDERID{ '0' };
				static constexpr char ORDERID{ '1' };
				static constexpr char MDENTRYID{ '2' };
				static constexpr char QUOTEENTRYID{ '3' };
				static constexpr char ORIGINAL_ORDER_ID{ '4' };
			};

			// SecondaryDisplayQty(1082): QTY
			struct SecondaryDisplayQty
			{
				static constexpr uint16_t tag{ 1082 };
			};

			// DisplayWhen(1083): CHAR
			struct DisplayWhen
			{
				static constexpr uint16_t tag{ 1083 };
				static constexpr char IMMEDIATE{ '1' };
				static constexpr char EXHAUST{ '2' };
			};

			// DisplayMethod(1084): CHAR
			struct DisplayMethod
			{
				static constexpr uint16_t tag{ 1084 };
				static constexpr char INITIAL{ '1' };
				static constexpr char NEW{ '2' };
				static constexpr char RANDOM{ '3' };
				static constexpr char UNDISCLOSED{ '4' };
			};

			// DisplayLowQty(1085): QTY
			struct DisplayLowQty
			{
				static constexpr uint16_t tag{ 1085 };
			};

			// DisplayHighQty(1086): QTY
			struct DisplayHighQty
			{
				static constexpr uint16_t tag{ 1086 };
			};

			// DisplayMinIncr(1087): QTY
			struct DisplayMinIncr
			{
				static constexpr uint16_t tag{ 1087 };
			};

			// RefreshQty(1088): QTY
			struct RefreshQty
			{
				static constexpr uint16_t tag{ 1088 };
			};

			// MatchIncrement(1089): QTY
			struct MatchIncrement
			{
				static constexpr uint16_t tag{ 1089 };
			};

			// MaxPriceLevels(1090): INT
			struct MaxPriceLevels
			{
				static constexpr uint16_t tag{ 1090 };
			};

			// PreTradeAnonymity(1091): BOOLEAN
			struct PreTradeAnonymity
			{
				static constexpr uint16_t tag{ 1091 };
			};

			// PriceProtectionScope(1092): CHAR
			struct PriceProtectionScope
			{
				static constexpr uint16_t tag{ 1092 };
				static constexpr char NONE{ '0' };
				static constexpr char LOCAL{ '1' };
				static constexpr char NATIONAL{ '2' };
				static constexpr char GLOBAL{ '3' };
			};

			// LotType(1093): CHAR
			struct LotType
			{
				static constexpr uint16_t tag{ 1093 };
				static constexpr char ODD_LOT{ '1' };
				static constexpr char ROUND_LOT{ '2' };
				static constexpr char BLOCK_LOT{ '3' };
				static constexpr char ROUND_LOT_BASED_UPON_UNITOFMEASURE{ '4' };
			};

			// PegPriceType(1094): INT
			struct PegPriceType
			{
				static constexpr uint16_t tag{ 1094 };
				static constexpr int32_t LAST_PEG{ 1 };
				static constexpr int32_t MID_PRICE_PEG{ 2 };
				static constexpr int32_t OPENING_PEG{ 3 };
				static constexpr int32_t MARKET_PEG{ 4 };
				static constexpr int32_t PRIMARY_PEG{ 5 };
				static constexpr int32_t PEG_TO_VWAP{ 7 };
				static constexpr int32_t TRAILING_STOP_PEG{ 8 };
				static constexpr int32_t PEG_TO_LIMIT_PRICE{ 9 };
			};

			// PeggedRefPrice(1095): PRICE
			struct PeggedRefPrice
			{
				static constexpr uint16_t tag{ 1095 };
			};

			// PegSecurityIDSource(1096): STRING
			struct PegSecurityIDSource
			{
				static constexpr uint16_t tag{ 1096 };
			};

			// PegSecurityID(1097): STRING
			struct PegSecurityID
			{
				static constexpr uint16_t tag{ 1097 };
			};

			// PegSymbol(1098): STRING
			struct PegSymbol
			{
				static constexpr uint16_t tag{ 1098 };
			};

			// PegSecurityDesc(1099): STRING
			struct PegSecurityDesc
			{
				static constexpr uint16_t tag{ 1099 };
			};

			// TriggerType(1100): CHAR
			struct TriggerType
			{
				static constexpr uint16_t tag{ 1100 };
				static constexpr char PARTIAL_EXECUTION{ '1' };
				static constexpr char SPECIFIED_TRADING_SESSION{ '2' };
				static constexpr char NEXT_AUCTION{ '3' };
				static constexpr char PRICE_MOVEMENT{ '4' };
			};

			// TriggerAction(1101): CHAR
			struct TriggerAction
			{
				static constexpr uint16_t tag{ 1101 };
				static constexpr char ACTIVATE{ '1' };
				static constexpr char MODIFY{ '2' };
				static constexpr char CANCEL{ '3' };
			};

			// TriggerPrice(1102): PRICE
			struct TriggerPrice
			{
				static constexpr uint16_t tag{ 1102 };
			};

			// TriggerSymbol(1103): STRING
			struct TriggerSymbol
			{
				static constexpr uint16_t tag{ 1103 };
			};

			// TriggerSecurityID(1104): STRING
			struct TriggerSecurityID
			{
				static constexpr uint16_t tag{ 1104 };
			};

			// TriggerSecurityIDSource(1105): STRING
			struct TriggerSecurityIDSource
			{
				static constexpr uint16_t tag{ 1105 };
			};

			// TriggerSecurityDesc(1106): STRING
			struct TriggerSecurityDesc
			{
				static constexpr uint16_t tag{ 1106 };
			};

			// TriggerPriceType(1107): CHAR
			struct TriggerPriceType
			{
				static constexpr uint16_t tag{ 1107 };
				static constexpr char BEST_OFFER{ '1' };
				static constexpr char LAST_TRADE{ '2' };
				static constexpr char BEST_BID{ '3' };
				static constexpr char BEST_BID_OR_LAST_TRADE{ '4' };
				static constexpr char BEST_OFFER_OR_LAST_TRADE{ '5' };
				static constexpr char BEST_MID{ '6' };
			};

			// TriggerPriceTypeScope(1108): CHAR
			struct TriggerPriceTypeScope
			{
				static constexpr uint16_t tag{ 1108 };
				static constexpr char NONE{ '0' };
				static constexpr char LOCAL{ '1' };
				static constexpr char NATIONAL{ '2' };
				static constexpr char GLOBAL{ '3' };
			};

			// TriggerPriceDirection(1109): CHAR
			struct TriggerPriceDirection
			{
				static constexpr uint16_t tag{ 1109 };
				static constexpr char TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE{ 'U' };
				static constexpr char TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE{ 'D' };
			};

			// TriggerNewPrice(1110): PRICE
			struct TriggerNewPrice
			{
				static constexpr uint16_t tag{ 1110 };
			};

			// TriggerOrderType(1111): CHAR
			struct TriggerOrderType
			{
				static constexpr uint16_t tag{ 1111 };
				static constexpr char MARKET{ '1' };
				static constexpr char LIMIT{ '2' };
			};

			// TriggerNewQty(1112): QTY
			struct TriggerNewQty
			{
				static constexpr uint16_t tag{ 1112 };
			};

			// TriggerTradingSessionID(1113): STRING
			struct TriggerTradingSessionID
			{
				static constexpr uint16_t tag{ 1113 };
			};

			// TriggerTradingSessionSubID(1114): STRING
			struct TriggerTradingSessionSubID
			{
				static constexpr uint16_t tag{ 1114 };
			};

			// OrderCategory(1115): CHAR
			struct OrderCategory
			{
				static constexpr uint16_t tag{ 1115 };
				static constexpr char ORDER{ '1' };
				static constexpr char QUOTE{ '2' };
				static constexpr char PRIVATELY_NEGOTIATED_TRADE{ '3' };
				static constexpr char MULTILEG_ORDER{ '4' };
				static constexpr char LINKED_ORDER{ '5' };
				static constexpr char QUOTE_REQUEST{ '6' };
				static constexpr char IMPLIED_ORDER{ '7' };
				static constexpr char CROSS_ORDER{ '8' };
				static constexpr char STREAMING_PRICE{ '9' };
			};

			// NoRootPartyIDs(1116): NUMINGROUP
			struct NoRootPartyIDs
			{
				static constexpr uint16_t tag{ 1116 };
			};

			// RootPartyID(1117): STRING
			struct RootPartyID
			{
				static constexpr uint16_t tag{ 1117 };
			};

			// RootPartyIDSource(1118): CHAR
			struct RootPartyIDSource
			{
				static constexpr uint16_t tag{ 1118 };
			};

			// RootPartyRole(1119): INT
			struct RootPartyRole
			{
				static constexpr uint16_t tag{ 1119 };
			};

			// NoRootPartySubIDs(1120): NUMINGROUP
			struct NoRootPartySubIDs
			{
				static constexpr uint16_t tag{ 1120 };
			};

			// RootPartySubID(1121): STRING
			struct RootPartySubID
			{
				static constexpr uint16_t tag{ 1121 };
			};

			// RootPartySubIDType(1122): INT
			struct RootPartySubIDType
			{
				static constexpr uint16_t tag{ 1122 };
			};

			// TradeHandlingInstr(1123): CHAR
			struct TradeHandlingInstr
			{
				static constexpr uint16_t tag{ 1123 };
				static constexpr char TRADE_CONFIRMATION{ '0' };
				static constexpr char TWO_PARTY_REPORT{ '1' };
				static constexpr char ONE_PARTY_REPORT_FOR_MATCHING{ '2' };
				static constexpr char ONE_PARTY_REPORT_FOR_PASS_THROUGH{ '3' };
				static constexpr char AUTOMATED_FLOOR_ORDER_ROUTING{ '4' };
				static constexpr char TWO_PARTY_REPORT_FOR_CLAIM{ '5' };
			};

			// OrigTradeHandlingInstr(1124): CHAR
			struct OrigTradeHandlingInstr
			{
				static constexpr uint16_t tag{ 1124 };
			};

			// OrigTradeDate(1125): LOCALMKTDATE
			struct OrigTradeDate
			{
				static constexpr uint16_t tag{ 1125 };
			};

			// OrigTradeID(1126): STRING
			struct OrigTradeID
			{
				static constexpr uint16_t tag{ 1126 };
			};

			// OrigSecondaryTradeID(1127): STRING
			struct OrigSecondaryTradeID
			{
				static constexpr uint16_t tag{ 1127 };
			};

			// ApplVerID(1128): STRING
			struct ApplVerID
			{
				static constexpr uint16_t tag{ 1128 };
				static inline const std::string FIX27{ "0" };
				static inline const std::string FIX30{ "1" };
				static inline const std::string FIX40{ "2" };
				static inline const std::string FIX41{ "3" };
				static inline const std::string FIX42{ "4" };
				static inline const std::string FIX43{ "5" };
				static inline const std::string FIX44{ "6" };
				static inline const std::string FIX50{ "7" };
				static inline const std::string FIX50SP1{ "8" };
				static inline const std::string FIX50SP2{ "9" };
			};

			// CstmApplVerID(1129): STRING
			struct CstmApplVerID
			{
				static constexpr uint16_t tag{ 1129 };
			};

			// RefApplVerID(1130): STRING
			struct RefApplVerID
			{
				static constexpr uint16_t tag{ 1130 };
			};

			// RefCstmApplVerID(1131): STRING
			struct RefCstmApplVerID
			{
				static constexpr uint16_t tag{ 1131 };
			};

			// TZTransactTime(1132): TZTIMESTAMP
			struct TZTransactTime
			{
				static constexpr uint16_t tag{ 1132 };
			};

			// ExDestinationIDSource(1133): CHAR
			struct ExDestinationIDSource
			{
				static constexpr uint16_t tag{ 1133 };
				static constexpr char BIC{ 'B' };
				static constexpr char GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER{ 'C' };
				static constexpr char PROPRIETARY{ 'D' };
				static constexpr char ISO_COUNTRY_CODE{ 'E' };
				static constexpr char MIC{ 'G' };
			};

			// ReportedPxDiff(1134): BOOLEAN
			struct ReportedPxDiff
			{
				static constexpr uint16_t tag{ 1134 };
			};

			// RptSys(1135): STRING
			struct RptSys
			{
				static constexpr uint16_t tag{ 1135 };
			};

			// AllocClearingFeeIndicator(1136): STRING
			struct AllocClearingFeeIndicator
			{
				static constexpr uint16_t tag{ 1136 };
			};

			// DefaultApplVerID(1137): STRING
			struct DefaultApplVerID
			{
				static constexpr uint16_t tag{ 1137 };
				static inline const std::string FIX27{ "0" };
				static inline const std::string FIX30{ "1" };
				static inline const std::string FIX40{ "2" };
				static inline const std::string FIX41{ "3" };
				static inline const std::string FIX42{ "4" };
				static inline const std::string FIX43{ "5" };
				static inline const std::string FIX44{ "6" };
				static inline const std::string FIX50{ "7" };
				static inline const std::string FIX50SP1{ "8" };
				static inline const std::string FIX50SP2{ "9" };
			};

			// DisplayQty(1138): QTY
			struct DisplayQty
			{
				static constexpr uint16_t tag{ 1138 };
			};

			// ExchangeSpecialInstructions(1139): STRING
			struct ExchangeSpecialInstructions
			{
				static constexpr uint16_t tag{ 1139 };
			};

			// MaxTradeVol(1140): QTY
			struct MaxTradeVol
			{
				static constexpr uint16_t tag{ 1140 };
			};

			// NoMDFeedTypes(1141): NUMINGROUP
			struct NoMDFeedTypes
			{
				static constexpr uint16_t tag{ 1141 };
			};

			// MatchAlgorithm(1142): STRING
			struct MatchAlgorithm
			{
				static constexpr uint16_t tag{ 1142 };
			};

			// MaxPriceVariation(1143): FLOAT
			struct MaxPriceVariation
			{
				static constexpr uint16_t tag{ 1143 };
			};

			// ImpliedMarketIndicator(1144): INT
			struct ImpliedMarketIndicator
			{
				static constexpr uint16_t tag{ 1144 };
				static constexpr int32_t NOT_IMPLIED{ 0 };
				static constexpr int32_t IMPLIED_IN{ 1 };
				static constexpr int32_t IMPLIED_OUT{ 2 };
				static constexpr int32_t BOTH_IMPLIED_IN_AND_IMPLIED_OUT{ 3 };
			};

			// EventTime(1145): UTCTIMESTAMP
			struct EventTime
			{
				static constexpr uint16_t tag{ 1145 };
			};

			// MinPriceIncrementAmount(1146): AMT
			struct MinPriceIncrementAmount
			{
				static constexpr uint16_t tag{ 1146 };
			};

			// UnitOfMeasureQty(1147): QTY
			struct UnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1147 };
			};

			// LowLimitPrice(1148): PRICE
			struct LowLimitPrice
			{
				static constexpr uint16_t tag{ 1148 };
			};

			// HighLimitPrice(1149): PRICE
			struct HighLimitPrice
			{
				static constexpr uint16_t tag{ 1149 };
			};

			// TradingReferencePrice(1150): PRICE
			struct TradingReferencePrice
			{
				static constexpr uint16_t tag{ 1150 };
			};

			// SecurityGroup(1151): STRING
			struct SecurityGroup
			{
				static constexpr uint16_t tag{ 1151 };
			};

			// LegNumber(1152): INT
			struct LegNumber
			{
				static constexpr uint16_t tag{ 1152 };
			};

			// SettlementCycleNo(1153): INT
			struct SettlementCycleNo
			{
				static constexpr uint16_t tag{ 1153 };
			};

			// SideCurrency(1154): CURRENCY
			struct SideCurrency
			{
				static constexpr uint16_t tag{ 1154 };
			};

			// SideSettlCurrency(1155): CURRENCY
			struct SideSettlCurrency
			{
				static constexpr uint16_t tag{ 1155 };
			};

			// ApplExtID(1156): INT
			struct ApplExtID
			{
				static constexpr uint16_t tag{ 1156 };
			};

			// CcyAmt(1157): AMT
			struct CcyAmt
			{
				static constexpr uint16_t tag{ 1157 };
			};

			// NoSettlDetails(1158): NUMINGROUP
			struct NoSettlDetails
			{
				static constexpr uint16_t tag{ 1158 };
			};

			// SettlObligMode(1159): INT
			struct SettlObligMode
			{
				static constexpr uint16_t tag{ 1159 };
				static constexpr int32_t PRELIMINARY{ 1 };
				static constexpr int32_t FINAL{ 2 };
			};

			// SettlObligMsgID(1160): STRING
			struct SettlObligMsgID
			{
				static constexpr uint16_t tag{ 1160 };
			};

			// SettlObligID(1161): STRING
			struct SettlObligID
			{
				static constexpr uint16_t tag{ 1161 };
			};

			// SettlObligTransType(1162): CHAR
			struct SettlObligTransType
			{
				static constexpr uint16_t tag{ 1162 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
				static constexpr char RESTATE{ 'T' };
			};

			// SettlObligRefID(1163): STRING
			struct SettlObligRefID
			{
				static constexpr uint16_t tag{ 1163 };
			};

			// SettlObligSource(1164): CHAR
			struct SettlObligSource
			{
				static constexpr uint16_t tag{ 1164 };
				static constexpr char INSTRUCTIONS_OF_BROKER{ '1' };
				static constexpr char INSTRUCTIONS_FOR_INSTITUTION{ '2' };
				static constexpr char INVESTOR{ '3' };
			};

			// NoSettlOblig(1165): NUMINGROUP
			struct NoSettlOblig
			{
				static constexpr uint16_t tag{ 1165 };
			};

			// QuoteMsgID(1166): STRING
			struct QuoteMsgID
			{
				static constexpr uint16_t tag{ 1166 };
			};

			// QuoteEntryStatus(1167): INT
			struct QuoteEntryStatus
			{
				static constexpr uint16_t tag{ 1167 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t REJECTED{ 5 };
				static constexpr int32_t REMOVED_FROM_MARKET{ 6 };
				static constexpr int32_t EXPIRED{ 7 };
				static constexpr int32_t LOCKED_MARKET_WARNING{ 12 };
				static constexpr int32_t CROSS_MARKET_WARNING{ 13 };
				static constexpr int32_t CANCELED_DUE_TO_LOCK_MARKET{ 14 };
				static constexpr int32_t CANCELED_DUE_TO_CROSS_MARKET{ 15 };
				static constexpr int32_t ACTIVE{ 16 };
			};

			// TotNoCxldQuotes(1168): INT
			struct TotNoCxldQuotes
			{
				static constexpr uint16_t tag{ 1168 };
			};

			// TotNoAccQuotes(1169): INT
			struct TotNoAccQuotes
			{
				static constexpr uint16_t tag{ 1169 };
			};

			// TotNoRejQuotes(1170): INT
			struct TotNoRejQuotes
			{
				static constexpr uint16_t tag{ 1170 };
			};

			// PrivateQuote(1171): BOOLEAN
			struct PrivateQuote
			{
				static constexpr uint16_t tag{ 1171 };
			};

			// RespondentType(1172): INT
			struct RespondentType
			{
				static constexpr uint16_t tag{ 1172 };
				static constexpr int32_t ALL_MARKET_PARTICIPANTS{ 1 };
				static constexpr int32_t SPECIFIED_MARKET_PARTICIPANTS{ 2 };
				static constexpr int32_t ALL_MARKET_MAKERS{ 3 };
				static constexpr int32_t PRIMARY_MARKET_MAKER{ 4 };
			};

			// MDSubBookType(1173): INT
			struct MDSubBookType
			{
				static constexpr uint16_t tag{ 1173 };
			};

			// SecurityTradingEvent(1174): INT
			struct SecurityTradingEvent
			{
				static constexpr uint16_t tag{ 1174 };
				static constexpr int32_t ORDER_IMBALANCE_AUCTION_IS_EXTENDED{ 1 };
				static constexpr int32_t TRADING_RESUMES{ 2 };
				static constexpr int32_t PRICE_VOLATILITY_INTERRUPTION{ 3 };
				static constexpr int32_t CHANGE_OF_TRADING_SESSION{ 4 };
				static constexpr int32_t CHANGE_OF_TRADING_SUBSESSION{ 5 };
				static constexpr int32_t CHANGE_OF_SECURITY_TRADING_STATUS{ 6 };
				static constexpr int32_t CHANGE_OF_BOOK_TYPE{ 7 };
				static constexpr int32_t CHANGE_OF_MARKET_DEPTH{ 8 };
			};

			// NoStatsIndicators(1175): NUMINGROUP
			struct NoStatsIndicators
			{
				static constexpr uint16_t tag{ 1175 };
			};

			// StatsType(1176): INT
			struct StatsType
			{
				static constexpr uint16_t tag{ 1176 };
				static constexpr int32_t EXCHANGE_LAST{ 1 };
				static constexpr int32_t HIGH{ 2 };
				static constexpr int32_t AVERAGE_PRICE{ 3 };
				static constexpr int32_t TURNOVER{ 4 };
			};

			// NoOfSecSizes(1177): NUMINGROUP
			struct NoOfSecSizes
			{
				static constexpr uint16_t tag{ 1177 };
			};

			// MDSecSizeType(1178): INT
			struct MDSecSizeType
			{
				static constexpr uint16_t tag{ 1178 };
				static constexpr int32_t CUSTOMER{ 1 };
			};

			// MDSecSize(1179): QTY
			struct MDSecSize
			{
				static constexpr uint16_t tag{ 1179 };
			};

			// ApplID(1180): STRING
			struct ApplID
			{
				static constexpr uint16_t tag{ 1180 };
			};

			// ApplSeqNum(1181): SEQNUM
			struct ApplSeqNum
			{
				static constexpr uint16_t tag{ 1181 };
			};

			// ApplBegSeqNum(1182): SEQNUM
			struct ApplBegSeqNum
			{
				static constexpr uint16_t tag{ 1182 };
			};

			// ApplEndSeqNum(1183): SEQNUM
			struct ApplEndSeqNum
			{
				static constexpr uint16_t tag{ 1183 };
			};

			// SecurityXMLLen(1184): LENGTH
			struct SecurityXMLLen
			{
				static constexpr uint16_t tag{ 1184 };
			};

			// SecurityXML(1185): XMLDATA
			struct SecurityXML
			{
				static constexpr uint16_t tag{ 1185 };
			};

			// SecurityXMLSchema(1186): STRING
			struct SecurityXMLSchema
			{
				static constexpr uint16_t tag{ 1186 };
			};

			// RefreshIndicator(1187): BOOLEAN
			struct RefreshIndicator
			{
				static constexpr uint16_t tag{ 1187 };
			};

			// Volatility(1188): FLOAT
			struct Volatility
			{
				static constexpr uint16_t tag{ 1188 };
			};

			// TimeToExpiration(1189): FLOAT
			struct TimeToExpiration
			{
				static constexpr uint16_t tag{ 1189 };
			};

			// RiskFreeRate(1190): FLOAT
			struct RiskFreeRate
			{
				static constexpr uint16_t tag{ 1190 };
			};

			// PriceUnitOfMeasure(1191): STRING
			struct PriceUnitOfMeasure
			{
				static constexpr uint16_t tag{ 1191 };
			};

			// PriceUnitOfMeasureQty(1192): QTY
			struct PriceUnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1192 };
			};

			// SettlMethod(1193): CHAR
			struct SettlMethod
			{
				static constexpr uint16_t tag{ 1193 };
				static constexpr char CASH_SETTLEMENT_REQUIRED{ 'C' };
				static constexpr char PHYSICAL_SETTLEMENT_REQUIRED{ 'P' };
			};

			// ExerciseStyle(1194): INT
			struct ExerciseStyle
			{
				static constexpr uint16_t tag{ 1194 };
				static constexpr int32_t EUROPEAN{ 0 };
				static constexpr int32_t AMERICAN{ 1 };
				static constexpr int32_t BERMUDA{ 2 };
			};

			// OptPayoutAmount(1195): AMT
			struct OptPayoutAmount
			{
				static constexpr uint16_t tag{ 1195 };
			};

			// PriceQuoteMethod(1196): STRING
			struct PriceQuoteMethod
			{
				static constexpr uint16_t tag{ 1196 };
				static inline const std::string STANDARD{ "STD" };
				static inline const std::string INDEX{ "INX" };
				static inline const std::string INTEREST_RATE_INDEX{ "INT" };
				static inline const std::string PERCENT_OF_PAR{ "PCTPAR" };
			};

			// ValuationMethod(1197): STRING
			struct ValuationMethod
			{
				static constexpr uint16_t tag{ 1197 };
				static inline const std::string PREMIUM_STYLE{ "EQTY" };
				static inline const std::string FUTURES_STYLE_MARK_TO_MARKET{ "FUT" };
				static inline const std::string FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT{ "FUTDA" };
				static inline const std::string CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON{ "CDS" };
				static inline const std::string CDS_IN_DELIVERY{ "CDSD" };
			};

			// ListMethod(1198): INT
			struct ListMethod
			{
				static constexpr uint16_t tag{ 1198 };
				static constexpr int32_t PRE_LISTED_ONLY{ 0 };
				static constexpr int32_t USER_REQUESTED{ 1 };
			};

			// CapPrice(1199): PRICE
			struct CapPrice
			{
				static constexpr uint16_t tag{ 1199 };
			};

			// FloorPrice(1200): PRICE
			struct FloorPrice
			{
				static constexpr uint16_t tag{ 1200 };
			};

			// NoStrikeRules(1201): NUMINGROUP
			struct NoStrikeRules
			{
				static constexpr uint16_t tag{ 1201 };
			};

			// StartStrikePxRange(1202): PRICE
			struct StartStrikePxRange
			{
				static constexpr uint16_t tag{ 1202 };
			};

			// EndStrikePxRange(1203): PRICE
			struct EndStrikePxRange
			{
				static constexpr uint16_t tag{ 1203 };
			};

			// StrikeIncrement(1204): FLOAT
			struct StrikeIncrement
			{
				static constexpr uint16_t tag{ 1204 };
			};

			// NoTickRules(1205): NUMINGROUP
			struct NoTickRules
			{
				static constexpr uint16_t tag{ 1205 };
			};

			// StartTickPriceRange(1206): PRICE
			struct StartTickPriceRange
			{
				static constexpr uint16_t tag{ 1206 };
			};

			// EndTickPriceRange(1207): PRICE
			struct EndTickPriceRange
			{
				static constexpr uint16_t tag{ 1207 };
			};

			// TickIncrement(1208): PRICE
			struct TickIncrement
			{
				static constexpr uint16_t tag{ 1208 };
			};

			// TickRuleType(1209): INT
			struct TickRuleType
			{
				static constexpr uint16_t tag{ 1209 };
				static constexpr int32_t REGULAR{ 0 };
				static constexpr int32_t VARIABLE{ 1 };
				static constexpr int32_t FIXED{ 2 };
				static constexpr int32_t TRADED_AS_A_SPREAD_LEG{ 3 };
				static constexpr int32_t SETTLED_AS_A_SPREAD_LEG{ 4 };
			};

			// NestedInstrAttribType(1210): INT
			struct NestedInstrAttribType
			{
				static constexpr uint16_t tag{ 1210 };
			};

			// NestedInstrAttribValue(1211): STRING
			struct NestedInstrAttribValue
			{
				static constexpr uint16_t tag{ 1211 };
			};

			// LegMaturityTime(1212): TZTIMEONLY
			struct LegMaturityTime
			{
				static constexpr uint16_t tag{ 1212 };
			};

			// UnderlyingMaturityTime(1213): TZTIMEONLY
			struct UnderlyingMaturityTime
			{
				static constexpr uint16_t tag{ 1213 };
			};

			// DerivativeSymbol(1214): STRING
			struct DerivativeSymbol
			{
				static constexpr uint16_t tag{ 1214 };
			};

			// DerivativeSymbolSfx(1215): STRING
			struct DerivativeSymbolSfx
			{
				static constexpr uint16_t tag{ 1215 };
			};

			// DerivativeSecurityID(1216): STRING
			struct DerivativeSecurityID
			{
				static constexpr uint16_t tag{ 1216 };
			};

			// DerivativeSecurityIDSource(1217): STRING
			struct DerivativeSecurityIDSource
			{
				static constexpr uint16_t tag{ 1217 };
			};

			// NoDerivativeSecurityAltID(1218): NUMINGROUP
			struct NoDerivativeSecurityAltID
			{
				static constexpr uint16_t tag{ 1218 };
			};

			// DerivativeSecurityAltID(1219): STRING
			struct DerivativeSecurityAltID
			{
				static constexpr uint16_t tag{ 1219 };
			};

			// DerivativeSecurityAltIDSource(1220): STRING
			struct DerivativeSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 1220 };
			};

			// SecondaryLowLimitPrice(1221): PRICE
			struct SecondaryLowLimitPrice
			{
				static constexpr uint16_t tag{ 1221 };
			};

			// MaturityRuleID(1222): STRING
			struct MaturityRuleID
			{
				static constexpr uint16_t tag{ 1222 };
			};

			// StrikeRuleID(1223): STRING
			struct StrikeRuleID
			{
				static constexpr uint16_t tag{ 1223 };
			};

			// LegUnitOfMeasureQty(1224): QTY
			struct LegUnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1224 };
			};

			// DerivativeOptPayAmount(1225): AMT
			struct DerivativeOptPayAmount
			{
				static constexpr uint16_t tag{ 1225 };
			};

			// EndMaturityMonthYear(1226): MONTHYEAR
			struct EndMaturityMonthYear
			{
				static constexpr uint16_t tag{ 1226 };
			};

			// ProductComplex(1227): STRING
			struct ProductComplex
			{
				static constexpr uint16_t tag{ 1227 };
			};

			// DerivativeProductComplex(1228): STRING
			struct DerivativeProductComplex
			{
				static constexpr uint16_t tag{ 1228 };
			};

			// MaturityMonthYearIncrement(1229): INT
			struct MaturityMonthYearIncrement
			{
				static constexpr uint16_t tag{ 1229 };
			};

			// SecondaryHighLimitPrice(1230): PRICE
			struct SecondaryHighLimitPrice
			{
				static constexpr uint16_t tag{ 1230 };
			};

			// MinLotSize(1231): QTY
			struct MinLotSize
			{
				static constexpr uint16_t tag{ 1231 };
			};

			// NoExecInstRules(1232): NUMINGROUP
			struct NoExecInstRules
			{
				static constexpr uint16_t tag{ 1232 };
			};

			// NoLotTypeRules(1234): NUMINGROUP
			struct NoLotTypeRules
			{
				static constexpr uint16_t tag{ 1234 };
			};

			// NoMatchRules(1235): NUMINGROUP
			struct NoMatchRules
			{
				static constexpr uint16_t tag{ 1235 };
			};

			// NoMaturityRules(1236): NUMINGROUP
			struct NoMaturityRules
			{
				static constexpr uint16_t tag{ 1236 };
			};

			// NoOrdTypeRules(1237): NUMINGROUP
			struct NoOrdTypeRules
			{
				static constexpr uint16_t tag{ 1237 };
			};

			// NoTimeInForceRules(1239): NUMINGROUP
			struct NoTimeInForceRules
			{
				static constexpr uint16_t tag{ 1239 };
			};

			// SecondaryTradingReferencePrice(1240): PRICE
			struct SecondaryTradingReferencePrice
			{
				static constexpr uint16_t tag{ 1240 };
			};

			// StartMaturityMonthYear(1241): MONTHYEAR
			struct StartMaturityMonthYear
			{
				static constexpr uint16_t tag{ 1241 };
			};

			// FlexProductEligibilityIndicator(1242): BOOLEAN
			struct FlexProductEligibilityIndicator
			{
				static constexpr uint16_t tag{ 1242 };
			};

			// DerivFlexProductEligibilityIndicator(1243): BOOLEAN
			struct DerivFlexProductEligibilityIndicator
			{
				static constexpr uint16_t tag{ 1243 };
			};

			// FlexibleIndicator(1244): BOOLEAN
			struct FlexibleIndicator
			{
				static constexpr uint16_t tag{ 1244 };
			};

			// TradingCurrency(1245): CURRENCY
			struct TradingCurrency
			{
				static constexpr uint16_t tag{ 1245 };
			};

			// DerivativeProduct(1246): INT
			struct DerivativeProduct
			{
				static constexpr uint16_t tag{ 1246 };
			};

			// DerivativeSecurityGroup(1247): STRING
			struct DerivativeSecurityGroup
			{
				static constexpr uint16_t tag{ 1247 };
			};

			// DerivativeCFICode(1248): STRING
			struct DerivativeCFICode
			{
				static constexpr uint16_t tag{ 1248 };
			};

			// DerivativeSecurityType(1249): STRING
			struct DerivativeSecurityType
			{
				static constexpr uint16_t tag{ 1249 };
			};

			// DerivativeSecuritySubType(1250): STRING
			struct DerivativeSecuritySubType
			{
				static constexpr uint16_t tag{ 1250 };
			};

			// DerivativeMaturityMonthYear(1251): MONTHYEAR
			struct DerivativeMaturityMonthYear
			{
				static constexpr uint16_t tag{ 1251 };
			};

			// DerivativeMaturityDate(1252): LOCALMKTDATE
			struct DerivativeMaturityDate
			{
				static constexpr uint16_t tag{ 1252 };
			};

			// DerivativeMaturityTime(1253): TZTIMEONLY
			struct DerivativeMaturityTime
			{
				static constexpr uint16_t tag{ 1253 };
			};

			// DerivativeSettleOnOpenFlag(1254): STRING
			struct DerivativeSettleOnOpenFlag
			{
				static constexpr uint16_t tag{ 1254 };
			};

			// DerivativeInstrmtAssignmentMethod(1255): CHAR
			struct DerivativeInstrmtAssignmentMethod
			{
				static constexpr uint16_t tag{ 1255 };
			};

			// DerivativeSecurityStatus(1256): STRING
			struct DerivativeSecurityStatus
			{
				static constexpr uint16_t tag{ 1256 };
			};

			// DerivativeInstrRegistry(1257): STRING
			struct DerivativeInstrRegistry
			{
				static constexpr uint16_t tag{ 1257 };
			};

			// DerivativeCountryOfIssue(1258): COUNTRY
			struct DerivativeCountryOfIssue
			{
				static constexpr uint16_t tag{ 1258 };
			};

			// DerivativeStateOrProvinceOfIssue(1259): STRING
			struct DerivativeStateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 1259 };
			};

			// DerivativeLocaleOfIssue(1260): STRING
			struct DerivativeLocaleOfIssue
			{
				static constexpr uint16_t tag{ 1260 };
			};

			// DerivativeStrikePrice(1261): PRICE
			struct DerivativeStrikePrice
			{
				static constexpr uint16_t tag{ 1261 };
			};

			// DerivativeStrikeCurrency(1262): CURRENCY
			struct DerivativeStrikeCurrency
			{
				static constexpr uint16_t tag{ 1262 };
			};

			// DerivativeStrikeMultiplier(1263): FLOAT
			struct DerivativeStrikeMultiplier
			{
				static constexpr uint16_t tag{ 1263 };
			};

			// DerivativeStrikeValue(1264): FLOAT
			struct DerivativeStrikeValue
			{
				static constexpr uint16_t tag{ 1264 };
			};

			// DerivativeOptAttribute(1265): CHAR
			struct DerivativeOptAttribute
			{
				static constexpr uint16_t tag{ 1265 };
			};

			// DerivativeContractMultiplier(1266): FLOAT
			struct DerivativeContractMultiplier
			{
				static constexpr uint16_t tag{ 1266 };
			};

			// DerivativeMinPriceIncrement(1267): FLOAT
			struct DerivativeMinPriceIncrement
			{
				static constexpr uint16_t tag{ 1267 };
			};

			// DerivativeMinPriceIncrementAmount(1268): AMT
			struct DerivativeMinPriceIncrementAmount
			{
				static constexpr uint16_t tag{ 1268 };
			};

			// DerivativeUnitOfMeasure(1269): STRING
			struct DerivativeUnitOfMeasure
			{
				static constexpr uint16_t tag{ 1269 };
			};

			// DerivativeUnitOfMeasureQty(1270): QTY
			struct DerivativeUnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1270 };
			};

			// DerivativeTimeUnit(1271): STRING
			struct DerivativeTimeUnit
			{
				static constexpr uint16_t tag{ 1271 };
			};

			// DerivativeSecurityExchange(1272): EXCHANGE
			struct DerivativeSecurityExchange
			{
				static constexpr uint16_t tag{ 1272 };
			};

			// DerivativePositionLimit(1273): INT
			struct DerivativePositionLimit
			{
				static constexpr uint16_t tag{ 1273 };
			};

			// DerivativeNTPositionLimit(1274): INT
			struct DerivativeNTPositionLimit
			{
				static constexpr uint16_t tag{ 1274 };
			};

			// DerivativeIssuer(1275): STRING
			struct DerivativeIssuer
			{
				static constexpr uint16_t tag{ 1275 };
			};

			// DerivativeIssueDate(1276): LOCALMKTDATE
			struct DerivativeIssueDate
			{
				static constexpr uint16_t tag{ 1276 };
			};

			// DerivativeEncodedIssuerLen(1277): LENGTH
			struct DerivativeEncodedIssuerLen
			{
				static constexpr uint16_t tag{ 1277 };
			};

			// DerivativeEncodedIssuer(1278): DATA
			struct DerivativeEncodedIssuer
			{
				static constexpr uint16_t tag{ 1278 };
			};

			// DerivativeSecurityDesc(1279): STRING
			struct DerivativeSecurityDesc
			{
				static constexpr uint16_t tag{ 1279 };
			};

			// DerivativeEncodedSecurityDescLen(1280): LENGTH
			struct DerivativeEncodedSecurityDescLen
			{
				static constexpr uint16_t tag{ 1280 };
			};

			// DerivativeEncodedSecurityDesc(1281): DATA
			struct DerivativeEncodedSecurityDesc
			{
				static constexpr uint16_t tag{ 1281 };
			};

			// DerivativeSecurityXMLLen(1282): LENGTH
			struct DerivativeSecurityXMLLen
			{
				static constexpr uint16_t tag{ 1282 };
			};

			// DerivativeSecurityXML(1283): DATA
			struct DerivativeSecurityXML
			{
				static constexpr uint16_t tag{ 1283 };
			};

			// DerivativeSecurityXMLSchema(1284): STRING
			struct DerivativeSecurityXMLSchema
			{
				static constexpr uint16_t tag{ 1284 };
			};

			// DerivativeContractSettlMonth(1285): MONTHYEAR
			struct DerivativeContractSettlMonth
			{
				static constexpr uint16_t tag{ 1285 };
			};

			// NoDerivativeEvents(1286): NUMINGROUP
			struct NoDerivativeEvents
			{
				static constexpr uint16_t tag{ 1286 };
			};

			// DerivativeEventType(1287): INT
			struct DerivativeEventType
			{
				static constexpr uint16_t tag{ 1287 };
			};

			// DerivativeEventDate(1288): LOCALMKTDATE
			struct DerivativeEventDate
			{
				static constexpr uint16_t tag{ 1288 };
			};

			// DerivativeEventTime(1289): UTCTIMESTAMP
			struct DerivativeEventTime
			{
				static constexpr uint16_t tag{ 1289 };
			};

			// DerivativeEventPx(1290): PRICE
			struct DerivativeEventPx
			{
				static constexpr uint16_t tag{ 1290 };
			};

			// DerivativeEventText(1291): STRING
			struct DerivativeEventText
			{
				static constexpr uint16_t tag{ 1291 };
			};

			// NoDerivativeInstrumentParties(1292): NUMINGROUP
			struct NoDerivativeInstrumentParties
			{
				static constexpr uint16_t tag{ 1292 };
			};

			// DerivativeInstrumentPartyID(1293): STRING
			struct DerivativeInstrumentPartyID
			{
				static constexpr uint16_t tag{ 1293 };
			};

			// DerivativeInstrumentPartyIDSource(1294): STRING
			struct DerivativeInstrumentPartyIDSource
			{
				static constexpr uint16_t tag{ 1294 };
			};

			// DerivativeInstrumentPartyRole(1295): INT
			struct DerivativeInstrumentPartyRole
			{
				static constexpr uint16_t tag{ 1295 };
			};

			// NoDerivativeInstrumentPartySubIDs(1296): NUMINGROUP
			struct NoDerivativeInstrumentPartySubIDs
			{
				static constexpr uint16_t tag{ 1296 };
			};

			// DerivativeInstrumentPartySubID(1297): STRING
			struct DerivativeInstrumentPartySubID
			{
				static constexpr uint16_t tag{ 1297 };
			};

			// DerivativeInstrumentPartySubIDType(1298): INT
			struct DerivativeInstrumentPartySubIDType
			{
				static constexpr uint16_t tag{ 1298 };
			};

			// DerivativeExerciseStyle(1299): CHAR
			struct DerivativeExerciseStyle
			{
				static constexpr uint16_t tag{ 1299 };
			};

			// MarketSegmentID(1300): STRING
			struct MarketSegmentID
			{
				static constexpr uint16_t tag{ 1300 };
			};

			// MarketID(1301): EXCHANGE
			struct MarketID
			{
				static constexpr uint16_t tag{ 1301 };
			};

			// MaturityMonthYearIncrementUnits(1302): INT
			struct MaturityMonthYearIncrementUnits
			{
				static constexpr uint16_t tag{ 1302 };
				static constexpr int32_t MONTHS{ 0 };
				static constexpr int32_t DAYS{ 1 };
				static constexpr int32_t WEEKS{ 2 };
				static constexpr int32_t YEARS{ 3 };
			};

			// MaturityMonthYearFormat(1303): INT
			struct MaturityMonthYearFormat
			{
				static constexpr uint16_t tag{ 1303 };
				static constexpr int32_t YEARMONTH_ONLY{ 0 };
				static constexpr int32_t YEARMONTHDAY{ 1 };
				static constexpr int32_t YEARMONTHWEEK{ 2 };
			};

			// StrikeExerciseStyle(1304): INT
			struct StrikeExerciseStyle
			{
				static constexpr uint16_t tag{ 1304 };
			};

			// SecondaryPriceLimitType(1305): INT
			struct SecondaryPriceLimitType
			{
				static constexpr uint16_t tag{ 1305 };
			};

			// PriceLimitType(1306): INT
			struct PriceLimitType
			{
				static constexpr uint16_t tag{ 1306 };
				static constexpr int32_t PRICE{ 0 };
				static constexpr int32_t TICKS{ 1 };
				static constexpr int32_t PERCENTAGE{ 2 };
			};

			// DerivativeSecurityListRequestType(1307): INT
			struct DerivativeSecurityListRequestType
			{
				static constexpr uint16_t tag{ 1307 };
				static constexpr int32_t SYMBOL{ 0 };
				static constexpr int32_t SECURITYTYPE_AND_OR_CFICODE{ 1 };
				static constexpr int32_t PRODUCT{ 2 };
				static constexpr int32_t TRADINGSESSIONID{ 3 };
				static constexpr int32_t ALL_SECURITIES{ 4 };
				static constexpr int32_t UNDELYINGSYMBOL{ 5 };
				static constexpr int32_t UNDERLYING_SECURITYTYPE_AND_OR_CFICODE{ 6 };
				static constexpr int32_t UNDERLYING_PRODUCT{ 7 };
				static constexpr int32_t MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID{ 8 };
			};

			// ExecInstValue(1308): CHAR
			struct ExecInstValue
			{
				static constexpr uint16_t tag{ 1308 };
			};

			// NoTradingSessionRules(1309): NUMINGROUP
			struct NoTradingSessionRules
			{
				static constexpr uint16_t tag{ 1309 };
			};

			// NoMarketSegments(1310): NUMINGROUP
			struct NoMarketSegments
			{
				static constexpr uint16_t tag{ 1310 };
			};

			// NoDerivativeInstrAttrib(1311): NUMINGROUP
			struct NoDerivativeInstrAttrib
			{
				static constexpr uint16_t tag{ 1311 };
			};

			// NoNestedInstrAttrib(1312): NUMINGROUP
			struct NoNestedInstrAttrib
			{
				static constexpr uint16_t tag{ 1312 };
			};

			// DerivativeInstrAttribType(1313): INT
			struct DerivativeInstrAttribType
			{
				static constexpr uint16_t tag{ 1313 };
			};

			// DerivativeInstrAttribValue(1314): STRING
			struct DerivativeInstrAttribValue
			{
				static constexpr uint16_t tag{ 1314 };
			};

			// DerivativePriceUnitOfMeasure(1315): STRING
			struct DerivativePriceUnitOfMeasure
			{
				static constexpr uint16_t tag{ 1315 };
			};

			// DerivativePriceUnitOfMeasureQty(1316): QTY
			struct DerivativePriceUnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1316 };
			};

			// DerivativeSettlMethod(1317): CHAR
			struct DerivativeSettlMethod
			{
				static constexpr uint16_t tag{ 1317 };
			};

			// DerivativePriceQuoteMethod(1318): STRING
			struct DerivativePriceQuoteMethod
			{
				static constexpr uint16_t tag{ 1318 };
			};

			// DerivativeValuationMethod(1319): STRING
			struct DerivativeValuationMethod
			{
				static constexpr uint16_t tag{ 1319 };
			};

			// DerivativeListMethod(1320): INT
			struct DerivativeListMethod
			{
				static constexpr uint16_t tag{ 1320 };
			};

			// DerivativeCapPrice(1321): PRICE
			struct DerivativeCapPrice
			{
				static constexpr uint16_t tag{ 1321 };
			};

			// DerivativeFloorPrice(1322): PRICE
			struct DerivativeFloorPrice
			{
				static constexpr uint16_t tag{ 1322 };
			};

			// DerivativePutOrCall(1323): INT
			struct DerivativePutOrCall
			{
				static constexpr uint16_t tag{ 1323 };
			};

			// ListUpdateAction(1324): CHAR
			struct ListUpdateAction
			{
				static constexpr uint16_t tag{ 1324 };
			};

			// ParentMktSegmID(1325): STRING
			struct ParentMktSegmID
			{
				static constexpr uint16_t tag{ 1325 };
			};

			// TradingSessionDesc(1326): STRING
			struct TradingSessionDesc
			{
				static constexpr uint16_t tag{ 1326 };
			};

			// TradSesUpdateAction(1327): CHAR
			struct TradSesUpdateAction
			{
				static constexpr uint16_t tag{ 1327 };
			};

			// RejectText(1328): STRING
			struct RejectText
			{
				static constexpr uint16_t tag{ 1328 };
			};

			// FeeMultiplier(1329): FLOAT
			struct FeeMultiplier
			{
				static constexpr uint16_t tag{ 1329 };
			};

			// UnderlyingLegSymbol(1330): STRING
			struct UnderlyingLegSymbol
			{
				static constexpr uint16_t tag{ 1330 };
			};

			// UnderlyingLegSymbolSfx(1331): STRING
			struct UnderlyingLegSymbolSfx
			{
				static constexpr uint16_t tag{ 1331 };
			};

			// UnderlyingLegSecurityID(1332): STRING
			struct UnderlyingLegSecurityID
			{
				static constexpr uint16_t tag{ 1332 };
			};

			// UnderlyingLegSecurityIDSource(1333): STRING
			struct UnderlyingLegSecurityIDSource
			{
				static constexpr uint16_t tag{ 1333 };
			};

			// NoUnderlyingLegSecurityAltID(1334): NUMINGROUP
			struct NoUnderlyingLegSecurityAltID
			{
				static constexpr uint16_t tag{ 1334 };
			};

			// UnderlyingLegSecurityAltID(1335): STRING
			struct UnderlyingLegSecurityAltID
			{
				static constexpr uint16_t tag{ 1335 };
			};

			// UnderlyingLegSecurityAltIDSource(1336): STRING
			struct UnderlyingLegSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 1336 };
			};

			// UnderlyingLegSecurityType(1337): STRING
			struct UnderlyingLegSecurityType
			{
				static constexpr uint16_t tag{ 1337 };
			};

			// UnderlyingLegSecuritySubType(1338): STRING
			struct UnderlyingLegSecuritySubType
			{
				static constexpr uint16_t tag{ 1338 };
			};

			// UnderlyingLegMaturityMonthYear(1339): MONTHYEAR
			struct UnderlyingLegMaturityMonthYear
			{
				static constexpr uint16_t tag{ 1339 };
			};

			// UnderlyingLegStrikePrice(1340): PRICE
			struct UnderlyingLegStrikePrice
			{
				static constexpr uint16_t tag{ 1340 };
			};

			// UnderlyingLegSecurityExchange(1341): STRING
			struct UnderlyingLegSecurityExchange
			{
				static constexpr uint16_t tag{ 1341 };
			};

			// NoOfLegUnderlyings(1342): NUMINGROUP
			struct NoOfLegUnderlyings
			{
				static constexpr uint16_t tag{ 1342 };
			};

			// UnderlyingLegPutOrCall(1343): INT
			struct UnderlyingLegPutOrCall
			{
				static constexpr uint16_t tag{ 1343 };
			};

			// UnderlyingLegCFICode(1344): STRING
			struct UnderlyingLegCFICode
			{
				static constexpr uint16_t tag{ 1344 };
			};

			// UnderlyingLegMaturityDate(1345): LOCALMKTDATE
			struct UnderlyingLegMaturityDate
			{
				static constexpr uint16_t tag{ 1345 };
			};

			// ApplReqID(1346): STRING
			struct ApplReqID
			{
				static constexpr uint16_t tag{ 1346 };
			};

			// ApplReqType(1347): INT
			struct ApplReqType
			{
				static constexpr uint16_t tag{ 1347 };
				static constexpr int32_t RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICATIONS{ 0 };
				static constexpr int32_t SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS{ 1 };
				static constexpr int32_t REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_APPLICATIONS{ 2 };
				static constexpr int32_t REQUEST_VALID_SET_OF_APPLICATIONS{ 3 };
				static constexpr int32_t UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS{ 4 };
				static constexpr int32_t CANCEL_RETRANSMISSION{ 5 };
				static constexpr int32_t CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS{ 6 };
			};

			// ApplResponseType(1348): INT
			struct ApplResponseType
			{
				static constexpr uint16_t tag{ 1348 };
				static constexpr int32_t REQUEST_SUCCESSFULLY_PROCESSED{ 0 };
				static constexpr int32_t APPLICATION_DOES_NOT_EXIST{ 1 };
				static constexpr int32_t MESSAGES_NOT_AVAILABLE{ 2 };
			};

			// ApplTotalMessageCount(1349): INT
			struct ApplTotalMessageCount
			{
				static constexpr uint16_t tag{ 1349 };
			};

			// ApplLastSeqNum(1350): SEQNUM
			struct ApplLastSeqNum
			{
				static constexpr uint16_t tag{ 1350 };
			};

			// NoApplIDs(1351): NUMINGROUP
			struct NoApplIDs
			{
				static constexpr uint16_t tag{ 1351 };
			};

			// ApplResendFlag(1352): BOOLEAN
			struct ApplResendFlag
			{
				static constexpr uint16_t tag{ 1352 };
			};

			// ApplResponseID(1353): STRING
			struct ApplResponseID
			{
				static constexpr uint16_t tag{ 1353 };
			};

			// ApplResponseError(1354): INT
			struct ApplResponseError
			{
				static constexpr uint16_t tag{ 1354 };
				static constexpr int32_t APPLICATION_DOES_NOT_EXIST{ 0 };
				static constexpr int32_t MESSAGES_REQUESTED_ARE_NOT_AVAILABLE{ 1 };
				static constexpr int32_t USER_NOT_AUTHORIZED_FOR_APPLICATION{ 2 };
			};

			// RefApplID(1355): STRING
			struct RefApplID
			{
				static constexpr uint16_t tag{ 1355 };
			};

			// ApplReportID(1356): STRING
			struct ApplReportID
			{
				static constexpr uint16_t tag{ 1356 };
			};

			// RefApplLastSeqNum(1357): SEQNUM
			struct RefApplLastSeqNum
			{
				static constexpr uint16_t tag{ 1357 };
			};

			// LegPutOrCall(1358): INT
			struct LegPutOrCall
			{
				static constexpr uint16_t tag{ 1358 };
			};

			// EncodedSymbolLen(1359): LENGTH
			struct EncodedSymbolLen
			{
				static constexpr uint16_t tag{ 1359 };
			};

			// EncodedSymbol(1360): DATA
			struct EncodedSymbol
			{
				static constexpr uint16_t tag{ 1360 };
			};

			// TotNoFills(1361): INT
			struct TotNoFills
			{
				static constexpr uint16_t tag{ 1361 };
			};

			// NoFills(1362): NUMINGROUP
			struct NoFills
			{
				static constexpr uint16_t tag{ 1362 };
			};

			// FillExecID(1363): STRING
			struct FillExecID
			{
				static constexpr uint16_t tag{ 1363 };
			};

			// FillPx(1364): PRICE
			struct FillPx
			{
				static constexpr uint16_t tag{ 1364 };
			};

			// FillQty(1365): QTY
			struct FillQty
			{
				static constexpr uint16_t tag{ 1365 };
			};

			// LegAllocID(1366): STRING
			struct LegAllocID
			{
				static constexpr uint16_t tag{ 1366 };
			};

			// LegAllocSettlCurrency(1367): CURRENCY
			struct LegAllocSettlCurrency
			{
				static constexpr uint16_t tag{ 1367 };
			};

			// TradSesEvent(1368): INT
			struct TradSesEvent
			{
				static constexpr uint16_t tag{ 1368 };
				static constexpr int32_t TRADING_RESUMES{ 0 };
				static constexpr int32_t CHANGE_OF_TRADING_SESSION{ 1 };
				static constexpr int32_t CHANGE_OF_TRADING_SUBSESSION{ 2 };
				static constexpr int32_t CHANGE_OF_TRADING_STATUS{ 3 };
			};

			// MassActionReportID(1369): STRING
			struct MassActionReportID
			{
				static constexpr uint16_t tag{ 1369 };
			};

			// NoNotAffectedOrders(1370): NUMINGROUP
			struct NoNotAffectedOrders
			{
				static constexpr uint16_t tag{ 1370 };
			};

			// NotAffectedOrderID(1371): STRING
			struct NotAffectedOrderID
			{
				static constexpr uint16_t tag{ 1371 };
			};

			// NotAffOrigClOrdID(1372): STRING
			struct NotAffOrigClOrdID
			{
				static constexpr uint16_t tag{ 1372 };
			};

			// MassActionType(1373): INT
			struct MassActionType
			{
				static constexpr uint16_t tag{ 1373 };
				static constexpr int32_t SUSPEND_ORDERS{ 1 };
				static constexpr int32_t RELEASE_ORDERS_FROM_SUSPENSION{ 2 };
				static constexpr int32_t CANCEL_ORDERS{ 3 };
			};

			// MassActionScope(1374): INT
			struct MassActionScope
			{
				static constexpr uint16_t tag{ 1374 };
				static constexpr int32_t ALL_ORDERS_FOR_A_SECURITY{ 1 };
				static constexpr int32_t ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY{ 2 };
				static constexpr int32_t ALL_ORDERS_FOR_A_PRODUCT{ 3 };
				static constexpr int32_t ALL_ORDERS_FOR_A_CFICODE{ 4 };
				static constexpr int32_t ALL_ORDERS_FOR_A_SECURITYTYPE{ 5 };
				static constexpr int32_t ALL_ORDERS_FOR_A_TRADING_SESSION{ 6 };
				static constexpr int32_t ALL_ORDERS{ 7 };
				static constexpr int32_t ALL_ORDERS_FOR_A_MARKET{ 8 };
				static constexpr int32_t ALL_ORDERS_FOR_A_MARKET_SEGMENT{ 9 };
				static constexpr int32_t ALL_ORDERS_FOR_A_SECURITY_GROUP{ 10 };
				static constexpr int32_t CANCEL_FOR_SECURITY_ISSUER{ 11 };
				static constexpr int32_t CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY{ 12 };
			};

			// MassActionResponse(1375): INT
			struct MassActionResponse
			{
				static constexpr uint16_t tag{ 1375 };
				static constexpr int32_t REJECTED{ 0 };
				static constexpr int32_t ACCEPTED{ 1 };
			};

			// MassActionRejectReason(1376): INT
			struct MassActionRejectReason
			{
				static constexpr uint16_t tag{ 1376 };
				static constexpr int32_t MASS_ACTION_NOT_SUPPORTED{ 0 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITY{ 1 };
				static constexpr int32_t INVALID_OR_UNKNOWN_UNDERLYING_SECURITY{ 2 };
				static constexpr int32_t INVALID_OR_UNKNOWN_PRODUCT{ 3 };
				static constexpr int32_t INVALID_OR_UNKNOWN_CFICODE{ 4 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITYTYPE{ 5 };
				static constexpr int32_t INVALID_OR_UNKNOWN_TRADING_SESSION{ 6 };
				static constexpr int32_t INVALID_OR_UNKNOWN_MARKET{ 7 };
				static constexpr int32_t INVALID_OR_UNKNOWN_MARKET_SEGMENT{ 8 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITY_GROUP{ 9 };
				static constexpr int32_t OTHER{ 99 };
				static constexpr int32_t INVALID_OR_UNKNOWN_SECURITY_ISSUER{ 10 };
				static constexpr int32_t INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY{ 11 };
			};

			// MultilegModel(1377): INT
			struct MultilegModel
			{
				static constexpr uint16_t tag{ 1377 };
				static constexpr int32_t PREDEFINED_MULTILEG_SECURITY{ 0 };
				static constexpr int32_t USER_DEFINED_MULTLEG_SECURITY{ 1 };
				static constexpr int32_t USER_DEFINED_NON_SECURITIZED_MULTILEG{ 2 };
			};

			// MultilegPriceMethod(1378): INT
			struct MultilegPriceMethod
			{
				static constexpr uint16_t tag{ 1378 };
				static constexpr int32_t NET_PRICE{ 0 };
				static constexpr int32_t REVERSED_NET_PRICE{ 1 };
				static constexpr int32_t YIELD_DIFFERENCE{ 2 };
				static constexpr int32_t INDIVIDUAL{ 3 };
				static constexpr int32_t CONTRACT_WEIGHTED_AVERAGE_PRICE{ 4 };
				static constexpr int32_t MULTIPLIED_PRICE{ 5 };
			};

			// LegVolatility(1379): FLOAT
			struct LegVolatility
			{
				static constexpr uint16_t tag{ 1379 };
			};

			// DividendYield(1380): PERCENTAGE
			struct DividendYield
			{
				static constexpr uint16_t tag{ 1380 };
			};

			// LegDividendYield(1381): PERCENTAGE
			struct LegDividendYield
			{
				static constexpr uint16_t tag{ 1381 };
			};

			// CurrencyRatio(1382): FLOAT
			struct CurrencyRatio
			{
				static constexpr uint16_t tag{ 1382 };
			};

			// LegCurrencyRatio(1383): FLOAT
			struct LegCurrencyRatio
			{
				static constexpr uint16_t tag{ 1383 };
			};

			// LegExecInst(1384): MULTIPLECHARVALUE
			struct LegExecInst
			{
				static constexpr uint16_t tag{ 1384 };
			};

			// ContingencyType(1385): INT
			struct ContingencyType
			{
				static constexpr uint16_t tag{ 1385 };
				static constexpr int32_t ONE_CANCELS_THE_OTHER{ 1 };
				static constexpr int32_t ONE_TRIGGERS_THE_OTHER{ 2 };
				static constexpr int32_t ONE_UPDATES_THE_OTHER_3{ 3 };
				static constexpr int32_t ONE_UPDATES_THE_OTHER_4{ 4 };
			};

			// ListRejectReason(1386): INT
			struct ListRejectReason
			{
				static constexpr uint16_t tag{ 1386 };
				static constexpr int32_t BROKER{ 0 };
				static constexpr int32_t EXCHANGE_CLOSED{ 2 };
				static constexpr int32_t TOO_LATE_TO_ENTER{ 4 };
				static constexpr int32_t UNKNOWN_ORDER{ 5 };
				static constexpr int32_t DUPLICATE_ORDER{ 6 };
				static constexpr int32_t UNSUPPORTED_ORDER_CHARACTERISTIC{ 11 };
				static constexpr int32_t OTHER{ 99 };
			};

			// NoTrdRepIndicators(1387): NUMINGROUP
			struct NoTrdRepIndicators
			{
				static constexpr uint16_t tag{ 1387 };
			};

			// TrdRepPartyRole(1388): INT
			struct TrdRepPartyRole
			{
				static constexpr uint16_t tag{ 1388 };
			};

			// TrdRepIndicator(1389): BOOLEAN
			struct TrdRepIndicator
			{
				static constexpr uint16_t tag{ 1389 };
			};

			// TradePublishIndicator(1390): INT
			struct TradePublishIndicator
			{
				static constexpr uint16_t tag{ 1390 };
				static constexpr int32_t DO_NOT_PUBLISH_TRADE{ 0 };
				static constexpr int32_t PUBLISH_TRADE{ 1 };
				static constexpr int32_t DEFERRED_PUBLICATION{ 2 };
			};

			// UnderlyingLegOptAttribute(1391): CHAR
			struct UnderlyingLegOptAttribute
			{
				static constexpr uint16_t tag{ 1391 };
			};

			// UnderlyingLegSecurityDesc(1392): STRING
			struct UnderlyingLegSecurityDesc
			{
				static constexpr uint16_t tag{ 1392 };
			};

			// MarketReqID(1393): STRING
			struct MarketReqID
			{
				static constexpr uint16_t tag{ 1393 };
			};

			// MarketReportID(1394): STRING
			struct MarketReportID
			{
				static constexpr uint16_t tag{ 1394 };
			};

			// MarketUpdateAction(1395): CHAR
			struct MarketUpdateAction
			{
				static constexpr uint16_t tag{ 1395 };
				static constexpr char ADD{ 'A' };
				static constexpr char DELETE{ 'D' };
				static constexpr char MODIFY{ 'M' };
			};

			// MarketSegmentDesc(1396): STRING
			struct MarketSegmentDesc
			{
				static constexpr uint16_t tag{ 1396 };
			};

			// EncodedMktSegmDescLen(1397): LENGTH
			struct EncodedMktSegmDescLen
			{
				static constexpr uint16_t tag{ 1397 };
			};

			// EncodedMktSegmDesc(1398): DATA
			struct EncodedMktSegmDesc
			{
				static constexpr uint16_t tag{ 1398 };
			};

			// ApplNewSeqNum(1399): SEQNUM
			struct ApplNewSeqNum
			{
				static constexpr uint16_t tag{ 1399 };
			};

			// EncryptedPasswordMethod(1400): INT
			struct EncryptedPasswordMethod
			{
				static constexpr uint16_t tag{ 1400 };
			};

			// EncryptedPasswordLen(1401): LENGTH
			struct EncryptedPasswordLen
			{
				static constexpr uint16_t tag{ 1401 };
			};

			// EncryptedPassword(1402): DATA
			struct EncryptedPassword
			{
				static constexpr uint16_t tag{ 1402 };
			};

			// EncryptedNewPasswordLen(1403): LENGTH
			struct EncryptedNewPasswordLen
			{
				static constexpr uint16_t tag{ 1403 };
			};

			// EncryptedNewPassword(1404): DATA
			struct EncryptedNewPassword
			{
				static constexpr uint16_t tag{ 1404 };
			};

			// UnderlyingLegMaturityTime(1405): TZTIMEONLY
			struct UnderlyingLegMaturityTime
			{
				static constexpr uint16_t tag{ 1405 };
			};

			// RefApplExtID(1406): INT
			struct RefApplExtID
			{
				static constexpr uint16_t tag{ 1406 };
			};

			// DefaultApplExtID(1407): INT
			struct DefaultApplExtID
			{
				static constexpr uint16_t tag{ 1407 };
			};

			// DefaultCstmApplVerID(1408): STRING
			struct DefaultCstmApplVerID
			{
				static constexpr uint16_t tag{ 1408 };
			};

			// SessionStatus(1409): INT
			struct SessionStatus
			{
				static constexpr uint16_t tag{ 1409 };
				static constexpr int32_t SESSION_ACTIVE{ 0 };
				static constexpr int32_t SESSION_PASSWORD_CHANGED{ 1 };
				static constexpr int32_t SESSION_PASSWORD_DUE_TO_EXPIRE{ 2 };
				static constexpr int32_t NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY{ 3 };
				static constexpr int32_t SESSION_LOGOUT_COMPLETE{ 4 };
				static constexpr int32_t INVALID_USERNAME_OR_PASSWORD{ 5 };
				static constexpr int32_t ACCOUNT_LOCKED{ 6 };
				static constexpr int32_t LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME{ 7 };
				static constexpr int32_t PASSWORD_EXPIRED{ 8 };
			};

			// DefaultVerIndicator(1410): BOOLEAN
			struct DefaultVerIndicator
			{
				static constexpr uint16_t tag{ 1410 };
			};

			// Nested4PartySubIDType(1411): INT
			struct Nested4PartySubIDType
			{
				static constexpr uint16_t tag{ 1411 };
			};

			// Nested4PartySubID(1412): STRING
			struct Nested4PartySubID
			{
				static constexpr uint16_t tag{ 1412 };
			};

			// NoNested4PartySubIDs(1413): NUMINGROUP
			struct NoNested4PartySubIDs
			{
				static constexpr uint16_t tag{ 1413 };
			};

			// NoNested4PartyIDs(1414): NUMINGROUP
			struct NoNested4PartyIDs
			{
				static constexpr uint16_t tag{ 1414 };
			};

			// Nested4PartyID(1415): STRING
			struct Nested4PartyID
			{
				static constexpr uint16_t tag{ 1415 };
			};

			// Nested4PartyIDSource(1416): CHAR
			struct Nested4PartyIDSource
			{
				static constexpr uint16_t tag{ 1416 };
			};

			// Nested4PartyRole(1417): INT
			struct Nested4PartyRole
			{
				static constexpr uint16_t tag{ 1417 };
			};

			// LegLastQty(1418): QTY
			struct LegLastQty
			{
				static constexpr uint16_t tag{ 1418 };
			};

			// UnderlyingExerciseStyle(1419): INT
			struct UnderlyingExerciseStyle
			{
				static constexpr uint16_t tag{ 1419 };
			};

			// LegExerciseStyle(1420): INT
			struct LegExerciseStyle
			{
				static constexpr uint16_t tag{ 1420 };
			};

			// LegPriceUnitOfMeasure(1421): STRING
			struct LegPriceUnitOfMeasure
			{
				static constexpr uint16_t tag{ 1421 };
			};

			// LegPriceUnitOfMeasureQty(1422): QTY
			struct LegPriceUnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1422 };
			};

			// UnderlyingUnitOfMeasureQty(1423): QTY
			struct UnderlyingUnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1423 };
			};

			// UnderlyingPriceUnitOfMeasure(1424): STRING
			struct UnderlyingPriceUnitOfMeasure
			{
				static constexpr uint16_t tag{ 1424 };
			};

			// UnderlyingPriceUnitOfMeasureQty(1425): QTY
			struct UnderlyingPriceUnitOfMeasureQty
			{
				static constexpr uint16_t tag{ 1425 };
			};

			// ApplReportType(1426): INT
			struct ApplReportType
			{
				static constexpr uint16_t tag{ 1426 };
				static constexpr int32_t RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM{ 0 };
				static constexpr int32_t REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFER_TO_REFAPPLLASTSEQNUM{ 1 };
				static constexpr int32_t HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFAPPLID{ 2 };
				static constexpr int32_t APPLICATION_MESSAGE_RE_SEND_COMPLETED{ 3 };
			};

			// SideExecID(1427): STRING
			struct SideExecID
			{
				static constexpr uint16_t tag{ 1427 };
			};

			// OrderDelay(1428): INT
			struct OrderDelay
			{
				static constexpr uint16_t tag{ 1428 };
			};

			// OrderDelayUnit(1429): INT
			struct OrderDelayUnit
			{
				static constexpr uint16_t tag{ 1429 };
				static constexpr int32_t SECONDS{ 0 };
				static constexpr int32_t TENTHS_OF_A_SECOND{ 1 };
				static constexpr int32_t HUNDREDTHS_OF_A_SECOND{ 2 };
				static constexpr int32_t MILLISECONDS{ 3 };
				static constexpr int32_t MICROSECONDS{ 4 };
				static constexpr int32_t NANOSECONDS{ 5 };
				static constexpr int32_t MINUTES{ 10 };
				static constexpr int32_t HOURS{ 11 };
				static constexpr int32_t DAYS{ 12 };
				static constexpr int32_t WEEKS{ 13 };
				static constexpr int32_t MONTHS{ 14 };
				static constexpr int32_t YEARS{ 15 };
			};

			// VenueType(1430): CHAR
			struct VenueType
			{
				static constexpr uint16_t tag{ 1430 };
				static constexpr char ELECTRONIC{ 'E' };
				static constexpr char PIT{ 'P' };
				static constexpr char EX_PIT{ 'X' };
			};

			// RefOrdIDReason(1431): INT
			struct RefOrdIDReason
			{
				static constexpr uint16_t tag{ 1431 };
				static constexpr int32_t GTC_FROM_PREVIOUS_DAY{ 0 };
				static constexpr int32_t PARTIAL_FILL_REMAINING{ 1 };
				static constexpr int32_t ORDER_CHANGED{ 2 };
			};

			// OrigCustOrderCapacity(1432): INT
			struct OrigCustOrderCapacity
			{
				static constexpr uint16_t tag{ 1432 };
				static constexpr int32_t MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT{ 1 };
				static constexpr int32_t CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT{ 2 };
				static constexpr int32_t MEMBER_TRADING_FOR_ANOTHER_MEMBER{ 3 };
				static constexpr int32_t ALL_OTHER{ 4 };
			};

			// RefApplReqID(1433): STRING
			struct RefApplReqID
			{
				static constexpr uint16_t tag{ 1433 };
			};

			// ModelType(1434): INT
			struct ModelType
			{
				static constexpr uint16_t tag{ 1434 };
				static constexpr int32_t UTILITY_PROVIDED_STANDARD_MODEL{ 0 };
				static constexpr int32_t PROPRIETARY{ 1 };
			};

			// ContractMultiplierUnit(1435): INT
			struct ContractMultiplierUnit
			{
				static constexpr uint16_t tag{ 1435 };
				static constexpr int32_t SHARES{ 0 };
				static constexpr int32_t HOURS{ 1 };
				static constexpr int32_t DAYS{ 2 };
			};

			// LegContractMultiplierUnit(1436): INT
			struct LegContractMultiplierUnit
			{
				static constexpr uint16_t tag{ 1436 };
			};

			// UnderlyingContractMultiplierUnit(1437): INT
			struct UnderlyingContractMultiplierUnit
			{
				static constexpr uint16_t tag{ 1437 };
			};

			// DerivativeContractMultiplierUnit(1438): INT
			struct DerivativeContractMultiplierUnit
			{
				static constexpr uint16_t tag{ 1438 };
			};

			// FlowScheduleType(1439): INT
			struct FlowScheduleType
			{
				static constexpr uint16_t tag{ 1439 };
				static constexpr int32_t NERC_EASTERN_OFF_PEAK{ 0 };
				static constexpr int32_t NERC_WESTERN_OFF_PEAK{ 1 };
				static constexpr int32_t NERC_CALENDAR_ALL_DAYS_IN_MONTH{ 2 };
				static constexpr int32_t NERC_EASTERN_PEAK{ 3 };
				static constexpr int32_t NERC_WESTERN_PEAK{ 4 };
			};

			// LegFlowScheduleType(1440): INT
			struct LegFlowScheduleType
			{
				static constexpr uint16_t tag{ 1440 };
			};

			// UnderlyingFlowScheduleType(1441): INT
			struct UnderlyingFlowScheduleType
			{
				static constexpr uint16_t tag{ 1441 };
			};

			// DerivativeFlowScheduleType(1442): INT
			struct DerivativeFlowScheduleType
			{
				static constexpr uint16_t tag{ 1442 };
			};

			// FillLiquidityInd(1443): INT
			struct FillLiquidityInd
			{
				static constexpr uint16_t tag{ 1443 };
			};

			// SideLiquidityInd(1444): INT
			struct SideLiquidityInd
			{
				static constexpr uint16_t tag{ 1444 };
			};

			// NoRateSources(1445): NUMINGROUP
			struct NoRateSources
			{
				static constexpr uint16_t tag{ 1445 };
			};

			// RateSource(1446): INT
			struct RateSource
			{
				static constexpr uint16_t tag{ 1446 };
				static constexpr int32_t BLOOMBERG{ 0 };
				static constexpr int32_t REUTERS{ 1 };
				static constexpr int32_t TELERATE{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// RateSourceType(1447): INT
			struct RateSourceType
			{
				static constexpr uint16_t tag{ 1447 };
				static constexpr int32_t PRIMARY{ 0 };
				static constexpr int32_t SECONDARY{ 1 };
			};

			// ReferencePage(1448): STRING
			struct ReferencePage
			{
				static constexpr uint16_t tag{ 1448 };
			};

			// RestructuringType(1449): STRING
			struct RestructuringType
			{
				static constexpr uint16_t tag{ 1449 };
				static inline const std::string FULL_RESTRUCTURING{ "FR" };
				static inline const std::string MODIFIED_RESTRUCTURING{ "MR" };
				static inline const std::string MODIFIED_MOD_RESTRUCTURING{ "MM" };
				static inline const std::string NO_RESTRUCTURING_SPECIFIED{ "XR" };
			};

			// Seniority(1450): STRING
			struct Seniority
			{
				static constexpr uint16_t tag{ 1450 };
				static inline const std::string SENIOR_SECURED{ "SD" };
				static inline const std::string SENIOR{ "SR" };
				static inline const std::string SUBORDINATED{ "SB" };
			};

			// NotionalPercentageOutstanding(1451): PERCENTAGE
			struct NotionalPercentageOutstanding
			{
				static constexpr uint16_t tag{ 1451 };
			};

			// OriginalNotionalPercentageOutstanding(1452): PERCENTAGE
			struct OriginalNotionalPercentageOutstanding
			{
				static constexpr uint16_t tag{ 1452 };
			};

			// UnderlyingRestructuringType(1453): STRING
			struct UnderlyingRestructuringType
			{
				static constexpr uint16_t tag{ 1453 };
			};

			// UnderlyingSeniority(1454): STRING
			struct UnderlyingSeniority
			{
				static constexpr uint16_t tag{ 1454 };
			};

			// UnderlyingNotionalPercentageOutstanding(1455): PERCENTAGE
			struct UnderlyingNotionalPercentageOutstanding
			{
				static constexpr uint16_t tag{ 1455 };
			};

			// UnderlyingOriginalNotionalPercentageOutstanding(1456): PERCENTAGE
			struct UnderlyingOriginalNotionalPercentageOutstanding
			{
				static constexpr uint16_t tag{ 1456 };
			};

			// AttachmentPoint(1457): PERCENTAGE
			struct AttachmentPoint
			{
				static constexpr uint16_t tag{ 1457 };
			};

			// DetachmentPoint(1458): PERCENTAGE
			struct DetachmentPoint
			{
				static constexpr uint16_t tag{ 1458 };
			};

			// UnderlyingAttachmentPoint(1459): PERCENTAGE
			struct UnderlyingAttachmentPoint
			{
				static constexpr uint16_t tag{ 1459 };
			};

			// UnderlyingDetachmentPoint(1460): PERCENTAGE
			struct UnderlyingDetachmentPoint
			{
				static constexpr uint16_t tag{ 1460 };
			};

			// NoTargetPartyIDs(1461): NUMINGROUP
			struct NoTargetPartyIDs
			{
				static constexpr uint16_t tag{ 1461 };
			};

			// TargetPartyID(1462): STRING
			struct TargetPartyID
			{
				static constexpr uint16_t tag{ 1462 };
			};

			// TargetPartyIDSource(1463): CHAR
			struct TargetPartyIDSource
			{
				static constexpr uint16_t tag{ 1463 };
			};

			// TargetPartyRole(1464): INT
			struct TargetPartyRole
			{
				static constexpr uint16_t tag{ 1464 };
			};

			// SecurityListID(1465): STRING
			struct SecurityListID
			{
				static constexpr uint16_t tag{ 1465 };
			};

			// SecurityListRefID(1466): STRING
			struct SecurityListRefID
			{
				static constexpr uint16_t tag{ 1466 };
			};

			// SecurityListDesc(1467): STRING
			struct SecurityListDesc
			{
				static constexpr uint16_t tag{ 1467 };
			};

			// EncodedSecurityListDescLen(1468): LENGTH
			struct EncodedSecurityListDescLen
			{
				static constexpr uint16_t tag{ 1468 };
			};

			// EncodedSecurityListDesc(1469): DATA
			struct EncodedSecurityListDesc
			{
				static constexpr uint16_t tag{ 1469 };
			};

			// SecurityListType(1470): INT
			struct SecurityListType
			{
				static constexpr uint16_t tag{ 1470 };
				static constexpr int32_t INDUSTRY_CLASSIFICATION{ 1 };
				static constexpr int32_t TRADING_LIST{ 2 };
				static constexpr int32_t MARKET{ 3 };
				static constexpr int32_t NEWSPAPER_LIST{ 4 };
			};

			// SecurityListTypeSource(1471): INT
			struct SecurityListTypeSource
			{
				static constexpr uint16_t tag{ 1471 };
				static constexpr int32_t ICB{ 1 };
				static constexpr int32_t NAICS{ 2 };
				static constexpr int32_t GICS{ 3 };
			};

			// NewsID(1472): STRING
			struct NewsID
			{
				static constexpr uint16_t tag{ 1472 };
			};

			// NewsCategory(1473): INT
			struct NewsCategory
			{
				static constexpr uint16_t tag{ 1473 };
				static constexpr int32_t COMPANY_NEWS{ 0 };
				static constexpr int32_t MARKETPLACE_NEWS{ 1 };
				static constexpr int32_t FINANCIAL_MARKET_NEWS{ 2 };
				static constexpr int32_t TECHNICAL_NEWS{ 3 };
				static constexpr int32_t OTHER_NEWS{ 99 };
			};

			// LanguageCode(1474): LANGUAGE
			struct LanguageCode
			{
				static constexpr uint16_t tag{ 1474 };
			};

			// NoNewsRefIDs(1475): NUMINGROUP
			struct NoNewsRefIDs
			{
				static constexpr uint16_t tag{ 1475 };
			};

			// NewsRefID(1476): STRING
			struct NewsRefID
			{
				static constexpr uint16_t tag{ 1476 };
			};

			// NewsRefType(1477): INT
			struct NewsRefType
			{
				static constexpr uint16_t tag{ 1477 };
				static constexpr int32_t REPLACEMENT{ 0 };
				static constexpr int32_t OTHER_LANGUAGE{ 1 };
				static constexpr int32_t COMPLIMENTARY{ 2 };
			};

			// StrikePriceDeterminationMethod(1478): INT
			struct StrikePriceDeterminationMethod
			{
				static constexpr uint16_t tag{ 1478 };
				static constexpr int32_t FIXED_STRIKE{ 1 };
				static constexpr int32_t STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE{ 2 };
				static constexpr int32_t STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_LIFE_OF_THE_OPTION{ 3 };
				static constexpr int32_t STRIKE_SET_TO_OPTIMAL_VALUE{ 4 };
			};

			// StrikePriceBoundaryMethod(1479): INT
			struct StrikePriceBoundaryMethod
			{
				static constexpr uint16_t tag{ 1479 };
				static constexpr int32_t LESS_THAN_UNDERLYING_PRICE_IS_IN_THE_MONEY{ 1 };
				static constexpr int32_t LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY{ 2 };
				static constexpr int32_t EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY{ 3 };
				static constexpr int32_t GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_IN_THE_MONEY{ 4 };
				static constexpr int32_t GREATER_THAN_UNDERLYING_IS_IN_THE_MONEY{ 5 };
			};

			// StrikePriceBoundaryPrecision(1480): PERCENTAGE
			struct StrikePriceBoundaryPrecision
			{
				static constexpr uint16_t tag{ 1480 };
			};

			// UnderlyingPriceDeterminationMethod(1481): INT
			struct UnderlyingPriceDeterminationMethod
			{
				static constexpr uint16_t tag{ 1481 };
				static constexpr int32_t REGULAR{ 1 };
				static constexpr int32_t SPECIAL_REFERENCE{ 2 };
				static constexpr int32_t OPTIMAL_VALUE{ 3 };
				static constexpr int32_t AVERAGE_VALUE{ 4 };
			};

			// OptPayoutType(1482): INT
			struct OptPayoutType
			{
				static constexpr uint16_t tag{ 1482 };
				static constexpr int32_t VANILLA{ 1 };
				static constexpr int32_t CAPPED{ 2 };
				static constexpr int32_t BINARY{ 3 };
			};

			// NoComplexEvents(1483): NUMINGROUP
			struct NoComplexEvents
			{
				static constexpr uint16_t tag{ 1483 };
			};

			// ComplexEventType(1484): INT
			struct ComplexEventType
			{
				static constexpr uint16_t tag{ 1484 };
				static constexpr int32_t CAPPED{ 1 };
				static constexpr int32_t TRIGGER{ 2 };
				static constexpr int32_t KNOCK_IN_UP{ 3 };
				static constexpr int32_t KOCK_IN_DOWN{ 4 };
				static constexpr int32_t KNOCK_OUT_UP{ 5 };
				static constexpr int32_t KNOCK_OUT_DOWN{ 6 };
				static constexpr int32_t UNDERLYING{ 7 };
				static constexpr int32_t RESET_BARRIER{ 8 };
				static constexpr int32_t ROLLING_BARRIER{ 9 };
			};

			// ComplexOptPayoutAmount(1485): AMT
			struct ComplexOptPayoutAmount
			{
				static constexpr uint16_t tag{ 1485 };
			};

			// ComplexEventPrice(1486): PRICE
			struct ComplexEventPrice
			{
				static constexpr uint16_t tag{ 1486 };
			};

			// ComplexEventPriceBoundaryMethod(1487): INT
			struct ComplexEventPriceBoundaryMethod
			{
				static constexpr uint16_t tag{ 1487 };
				static constexpr int32_t LESS_THAN_COMPLEXEVENTPRICE{ 1 };
				static constexpr int32_t LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE{ 2 };
				static constexpr int32_t EQUAL_TO_COMPLEXEVENTPRICE{ 3 };
				static constexpr int32_t GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE{ 4 };
				static constexpr int32_t GREATER_THAN_COMPLEXEVENTPRICE{ 5 };
			};

			// ComplexEventPriceBoundaryPrecision(1488): PERCENTAGE
			struct ComplexEventPriceBoundaryPrecision
			{
				static constexpr uint16_t tag{ 1488 };
			};

			// ComplexEventPriceTimeType(1489): INT
			struct ComplexEventPriceTimeType
			{
				static constexpr uint16_t tag{ 1489 };
				static constexpr int32_t EXPIRATION{ 1 };
				static constexpr int32_t IMMEDIATE{ 2 };
				static constexpr int32_t SPECIFIED_DATE_TIME{ 3 };
			};

			// ComplexEventCondition(1490): INT
			struct ComplexEventCondition
			{
				static constexpr uint16_t tag{ 1490 };
				static constexpr int32_t AND{ 1 };
				static constexpr int32_t OR{ 2 };
			};

			// NoComplexEventDates(1491): NUMINGROUP
			struct NoComplexEventDates
			{
				static constexpr uint16_t tag{ 1491 };
			};

			// ComplexEventStartDate(1492): UTCTIMESTAMP
			struct ComplexEventStartDate
			{
				static constexpr uint16_t tag{ 1492 };
			};

			// ComplexEventEndDate(1493): UTCTIMESTAMP
			struct ComplexEventEndDate
			{
				static constexpr uint16_t tag{ 1493 };
			};

			// NoComplexEventTimes(1494): NUMINGROUP
			struct NoComplexEventTimes
			{
				static constexpr uint16_t tag{ 1494 };
			};

			// ComplexEventStartTime(1495): UTCTIMEONLY
			struct ComplexEventStartTime
			{
				static constexpr uint16_t tag{ 1495 };
			};

			// ComplexEventEndTime(1496): UTCTIMEONLY
			struct ComplexEventEndTime
			{
				static constexpr uint16_t tag{ 1496 };
			};

			// StreamAsgnReqID(1497): STRING
			struct StreamAsgnReqID
			{
				static constexpr uint16_t tag{ 1497 };
			};

			// StreamAsgnReqType(1498): INT
			struct StreamAsgnReqType
			{
				static constexpr uint16_t tag{ 1498 };
				static constexpr int32_t STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER{ 1 };
				static constexpr int32_t STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER{ 2 };
			};

			// NoAsgnReqs(1499): NUMINGROUP
			struct NoAsgnReqs
			{
				static constexpr uint16_t tag{ 1499 };
			};

			// MDStreamID(1500): STRING
			struct MDStreamID
			{
				static constexpr uint16_t tag{ 1500 };
			};

			// StreamAsgnRptID(1501): STRING
			struct StreamAsgnRptID
			{
				static constexpr uint16_t tag{ 1501 };
			};

			// StreamAsgnRejReason(1502): INT
			struct StreamAsgnRejReason
			{
				static constexpr uint16_t tag{ 1502 };
				static constexpr int32_t UNKNOWN_CLIENT{ 0 };
				static constexpr int32_t EXCEEDS_MAXIMUM_SIZE{ 1 };
				static constexpr int32_t UNKNOWN_OR_INVALID_CURRENCY_PAIR{ 2 };
				static constexpr int32_t NO_AVAILABLE_STREAM{ 3 };
				static constexpr int32_t OTHER{ 99 };
			};

			// StreamAsgnAckType(1503): INT
			struct StreamAsgnAckType
			{
				static constexpr uint16_t tag{ 1503 };
				static constexpr int32_t ASSIGNMENT_ACCEPTED{ 0 };
				static constexpr int32_t ASSIGNMENT_REJECTED{ 1 };
			};

			// RelSymTransactTime(1504): UTCTIMESTAMP
			struct RelSymTransactTime
			{
				static constexpr uint16_t tag{ 1504 };
			};

			// PartyDetailsListRequestID(1505): STRING
			struct PartyDetailsListRequestID
			{
				static constexpr uint16_t tag{ 1505 };
			};

			// NoPartyListResponseTypes(1506): NUMINGROUP
			struct NoPartyListResponseTypes
			{
				static constexpr uint16_t tag{ 1506 };
			};

			// PartyListResponseType(1507): INT
			struct PartyListResponseType
			{
				static constexpr uint16_t tag{ 1507 };
				static constexpr int32_t RETURN_ALL_AVAILABLE_INFORMATION_ON_PARTIES_AND_RELATED_PARTIES{ 0 };
				static constexpr int32_t RETURN_ONLY_PARTY_INFORMATION{ 1 };
				static constexpr int32_t INCLUDE_INFORMATION_ON_RELATED_PARTIES{ 2 };
				static constexpr int32_t INCLUDE_RISK_LIMIT_INFORMATION{ 3 };
			};

			// NoRequestedPartyRoles(1508): NUMINGROUP
			struct NoRequestedPartyRoles
			{
				static constexpr uint16_t tag{ 1508 };
			};

			// RequestedPartyRole(1509): INT
			struct RequestedPartyRole
			{
				static constexpr uint16_t tag{ 1509 };
			};

			// PartyDetailsListReportID(1510): STRING
			struct PartyDetailsListReportID
			{
				static constexpr uint16_t tag{ 1510 };
			};

			// PartyDetailsRequestResult(1511): INT
			struct PartyDetailsRequestResult
			{
				static constexpr uint16_t tag{ 1511 };
				static constexpr int32_t VALID_REQUEST{ 0 };
				static constexpr int32_t INVALID_OR_UNSUPPORTED_REQUEST{ 1 };
				static constexpr int32_t NO_PARTIES_OR_PARTY_DETAILS_FOUND_THAT_MATCH_SELECTION_CRITERIA{ 2 };
				static constexpr int32_t UNSUPPORTED_PARTYLISTRESPONSETYPE{ 3 };
				static constexpr int32_t NOT_AUTHORIZED_TO_RETRIEVE_PARTIES_OR_PARTY_DETAILS_DATA{ 4 };
				static constexpr int32_t PARTIES_OR_PARTY_DETAILS_DATA_TEMPORARILY_UNAVAILABLE{ 5 };
				static constexpr int32_t REQUEST_FOR_PARTIES_DATA_NOT_SUPPORTED{ 6 };
				static constexpr int32_t OTHER{ 99 };
			};

			// TotNoPartyList(1512): INT
			struct TotNoPartyList
			{
				static constexpr uint16_t tag{ 1512 };
			};

			// NoPartyList(1513): NUMINGROUP
			struct NoPartyList
			{
				static constexpr uint16_t tag{ 1513 };
			};

			// NoPartyRelationships(1514): NUMINGROUP
			struct NoPartyRelationships
			{
				static constexpr uint16_t tag{ 1514 };
			};

			// PartyRelationship(1515): INT
			struct PartyRelationship
			{
				static constexpr uint16_t tag{ 1515 };
				static constexpr int32_t IS_ALSO{ 0 };
				static constexpr int32_t CLEARS_FOR{ 1 };
				static constexpr int32_t CLEARS_THROUGH{ 2 };
				static constexpr int32_t TRADES_FOR{ 3 };
				static constexpr int32_t TRADES_THROUGH{ 4 };
				static constexpr int32_t SPONSORS{ 5 };
				static constexpr int32_t SPONSORED_THROUGH{ 6 };
				static constexpr int32_t PROVIDES_GUARANTEE_FOR{ 7 };
				static constexpr int32_t IS_GUARANTEED_BY{ 8 };
				static constexpr int32_t MEMBER_OF{ 9 };
				static constexpr int32_t HAS_MEMBERS{ 10 };
				static constexpr int32_t PROVIDES_MARKETPLACE_FOR{ 11 };
				static constexpr int32_t PARTICIPANT_OF_MARKETPLACE{ 12 };
				static constexpr int32_t CARRIES_POSITIONS_FOR{ 13 };
				static constexpr int32_t POSTS_TRADES_TO{ 14 };
				static constexpr int32_t ENTERS_TRADES_FOR{ 15 };
				static constexpr int32_t ENTERS_TRADES_THROUGH{ 16 };
				static constexpr int32_t PROVIDES_QUOTES_TO{ 17 };
				static constexpr int32_t REQUESTS_QUOTES_FROM{ 18 };
				static constexpr int32_t INVESTS_FOR{ 19 };
				static constexpr int32_t INVESTS_THROUGH{ 20 };
				static constexpr int32_t BROKERS_TRADES_FOR{ 21 };
				static constexpr int32_t BROKERS_TRADES_THROUGH{ 22 };
				static constexpr int32_t PROVIDES_TRADING_SERVICES_FOR{ 23 };
				static constexpr int32_t USES_TRADING_SERVICES_OF{ 24 };
				static constexpr int32_t APPROVES_OF{ 25 };
				static constexpr int32_t APPROVED_BY{ 26 };
				static constexpr int32_t PARENT_FIRM_FOR{ 27 };
				static constexpr int32_t SUBSIDIARY_OF{ 28 };
				static constexpr int32_t REGULATORY_OWNER_OF{ 29 };
				static constexpr int32_t OWNED_BY_30{ 30 };
				static constexpr int32_t CONTROLS{ 31 };
				static constexpr int32_t IS_CONTROLLED_BY{ 32 };
				static constexpr int32_t LEGAL{ 33 };
				static constexpr int32_t OWNED_BY_34{ 34 };
				static constexpr int32_t BENEFICIAL_OWNER_OF{ 35 };
				static constexpr int32_t OWNED_BY_36{ 36 };
			};

			// NoPartyAltIDs(1516): NUMINGROUP
			struct NoPartyAltIDs
			{
				static constexpr uint16_t tag{ 1516 };
			};

			// PartyAltID(1517): STRING
			struct PartyAltID
			{
				static constexpr uint16_t tag{ 1517 };
			};

			// PartyAltIDSource(1518): CHAR
			struct PartyAltIDSource
			{
				static constexpr uint16_t tag{ 1518 };
			};

			// NoPartyAltSubIDs(1519): NUMINGROUP
			struct NoPartyAltSubIDs
			{
				static constexpr uint16_t tag{ 1519 };
			};

			// PartyAltSubID(1520): STRING
			struct PartyAltSubID
			{
				static constexpr uint16_t tag{ 1520 };
			};

			// PartyAltSubIDType(1521): INT
			struct PartyAltSubIDType
			{
				static constexpr uint16_t tag{ 1521 };
			};

			// NoContextPartyIDs(1522): NUMINGROUP
			struct NoContextPartyIDs
			{
				static constexpr uint16_t tag{ 1522 };
			};

			// ContextPartyID(1523): STRING
			struct ContextPartyID
			{
				static constexpr uint16_t tag{ 1523 };
			};

			// ContextPartyIDSource(1524): CHAR
			struct ContextPartyIDSource
			{
				static constexpr uint16_t tag{ 1524 };
			};

			// ContextPartyRole(1525): INT
			struct ContextPartyRole
			{
				static constexpr uint16_t tag{ 1525 };
			};

			// NoContextPartySubIDs(1526): NUMINGROUP
			struct NoContextPartySubIDs
			{
				static constexpr uint16_t tag{ 1526 };
			};

			// ContextPartySubID(1527): STRING
			struct ContextPartySubID
			{
				static constexpr uint16_t tag{ 1527 };
			};

			// ContextPartySubIDType(1528): INT
			struct ContextPartySubIDType
			{
				static constexpr uint16_t tag{ 1528 };
			};

			// NoRiskLimits(1529): NUMINGROUP
			struct NoRiskLimits
			{
				static constexpr uint16_t tag{ 1529 };
			};

			// RiskLimitType(1530): INT
			struct RiskLimitType
			{
				static constexpr uint16_t tag{ 1530 };
				static constexpr int32_t GROSS_LIMIT{ 1 };
				static constexpr int32_t NET_LIMIT{ 2 };
				static constexpr int32_t EXPOSURE{ 3 };
				static constexpr int32_t LONG_LIMIT{ 4 };
				static constexpr int32_t SHORT_LIMIT{ 5 };
			};

			// RiskLimitAmount(1531): AMT
			struct RiskLimitAmount
			{
				static constexpr uint16_t tag{ 1531 };
			};

			// RiskLimitCurrency(1532): CURRENCY
			struct RiskLimitCurrency
			{
				static constexpr uint16_t tag{ 1532 };
			};

			// RiskLimitPlatform(1533): STRING
			struct RiskLimitPlatform
			{
				static constexpr uint16_t tag{ 1533 };
			};

			// NoRiskInstruments(1534): NUMINGROUP
			struct NoRiskInstruments
			{
				static constexpr uint16_t tag{ 1534 };
			};

			// RiskInstrumentOperator(1535): INT
			struct RiskInstrumentOperator
			{
				static constexpr uint16_t tag{ 1535 };
				static constexpr int32_t INCLUDE{ 1 };
				static constexpr int32_t EXCLUDE{ 2 };
			};

			// RiskSymbol(1536): STRING
			struct RiskSymbol
			{
				static constexpr uint16_t tag{ 1536 };
			};

			// RiskSymbolSfx(1537): STRING
			struct RiskSymbolSfx
			{
				static constexpr uint16_t tag{ 1537 };
			};

			// RiskSecurityID(1538): STRING
			struct RiskSecurityID
			{
				static constexpr uint16_t tag{ 1538 };
			};

			// RiskSecurityIDSource(1539): STRING
			struct RiskSecurityIDSource
			{
				static constexpr uint16_t tag{ 1539 };
			};

			// NoRiskSecurityAltID(1540): NUMINGROUP
			struct NoRiskSecurityAltID
			{
				static constexpr uint16_t tag{ 1540 };
			};

			// RiskSecurityAltID(1541): STRING
			struct RiskSecurityAltID
			{
				static constexpr uint16_t tag{ 1541 };
			};

			// RiskSecurityAltIDSource(1542): STRING
			struct RiskSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 1542 };
			};

			// RiskProduct(1543): INT
			struct RiskProduct
			{
				static constexpr uint16_t tag{ 1543 };
			};

			// RiskProductComplex(1544): STRING
			struct RiskProductComplex
			{
				static constexpr uint16_t tag{ 1544 };
			};

			// RiskSecurityGroup(1545): STRING
			struct RiskSecurityGroup
			{
				static constexpr uint16_t tag{ 1545 };
			};

			// RiskCFICode(1546): STRING
			struct RiskCFICode
			{
				static constexpr uint16_t tag{ 1546 };
			};

			// RiskSecurityType(1547): STRING
			struct RiskSecurityType
			{
				static constexpr uint16_t tag{ 1547 };
			};

			// RiskSecuritySubType(1548): STRING
			struct RiskSecuritySubType
			{
				static constexpr uint16_t tag{ 1548 };
			};

			// RiskMaturityMonthYear(1549): MONTHYEAR
			struct RiskMaturityMonthYear
			{
				static constexpr uint16_t tag{ 1549 };
			};

			// RiskMaturityTime(1550): TZTIMEONLY
			struct RiskMaturityTime
			{
				static constexpr uint16_t tag{ 1550 };
			};

			// RiskRestructuringType(1551): STRING
			struct RiskRestructuringType
			{
				static constexpr uint16_t tag{ 1551 };
			};

			// RiskSeniority(1552): STRING
			struct RiskSeniority
			{
				static constexpr uint16_t tag{ 1552 };
			};

			// RiskPutOrCall(1553): INT
			struct RiskPutOrCall
			{
				static constexpr uint16_t tag{ 1553 };
			};

			// RiskFlexibleIndicator(1554): BOOLEAN
			struct RiskFlexibleIndicator
			{
				static constexpr uint16_t tag{ 1554 };
			};

			// RiskCouponRate(1555): PERCENTAGE
			struct RiskCouponRate
			{
				static constexpr uint16_t tag{ 1555 };
			};

			// RiskSecurityDesc(1556): STRING
			struct RiskSecurityDesc
			{
				static constexpr uint16_t tag{ 1556 };
			};

			// RiskInstrumentSettlType(1557): STRING
			struct RiskInstrumentSettlType
			{
				static constexpr uint16_t tag{ 1557 };
			};

			// RiskInstrumentMultiplier(1558): FLOAT
			struct RiskInstrumentMultiplier
			{
				static constexpr uint16_t tag{ 1558 };
			};

			// NoRiskWarningLevels(1559): NUMINGROUP
			struct NoRiskWarningLevels
			{
				static constexpr uint16_t tag{ 1559 };
			};

			// RiskWarningLevelPercent(1560): PERCENTAGE
			struct RiskWarningLevelPercent
			{
				static constexpr uint16_t tag{ 1560 };
			};

			// RiskWarningLevelName(1561): STRING
			struct RiskWarningLevelName
			{
				static constexpr uint16_t tag{ 1561 };
			};

			// NoRelatedPartyIDs(1562): NUMINGROUP
			struct NoRelatedPartyIDs
			{
				static constexpr uint16_t tag{ 1562 };
			};

			// RelatedPartyID(1563): STRING
			struct RelatedPartyID
			{
				static constexpr uint16_t tag{ 1563 };
			};

			// RelatedPartyIDSource(1564): CHAR
			struct RelatedPartyIDSource
			{
				static constexpr uint16_t tag{ 1564 };
			};

			// RelatedPartyRole(1565): INT
			struct RelatedPartyRole
			{
				static constexpr uint16_t tag{ 1565 };
			};

			// NoRelatedPartySubIDs(1566): NUMINGROUP
			struct NoRelatedPartySubIDs
			{
				static constexpr uint16_t tag{ 1566 };
			};

			// RelatedPartySubID(1567): STRING
			struct RelatedPartySubID
			{
				static constexpr uint16_t tag{ 1567 };
			};

			// RelatedPartySubIDType(1568): INT
			struct RelatedPartySubIDType
			{
				static constexpr uint16_t tag{ 1568 };
			};

			// NoRelatedPartyAltIDs(1569): NUMINGROUP
			struct NoRelatedPartyAltIDs
			{
				static constexpr uint16_t tag{ 1569 };
			};

			// RelatedPartyAltID(1570): STRING
			struct RelatedPartyAltID
			{
				static constexpr uint16_t tag{ 1570 };
			};

			// RelatedPartyAltIDSource(1571): CHAR
			struct RelatedPartyAltIDSource
			{
				static constexpr uint16_t tag{ 1571 };
			};

			// NoRelatedPartyAltSubIDs(1572): NUMINGROUP
			struct NoRelatedPartyAltSubIDs
			{
				static constexpr uint16_t tag{ 1572 };
			};

			// RelatedPartyAltSubID(1573): STRING
			struct RelatedPartyAltSubID
			{
				static constexpr uint16_t tag{ 1573 };
			};

			// RelatedPartyAltSubIDType(1574): INT
			struct RelatedPartyAltSubIDType
			{
				static constexpr uint16_t tag{ 1574 };
			};

			// NoRelatedContextPartyIDs(1575): NUMINGROUP
			struct NoRelatedContextPartyIDs
			{
				static constexpr uint16_t tag{ 1575 };
			};

			// RelatedContextPartyID(1576): STRING
			struct RelatedContextPartyID
			{
				static constexpr uint16_t tag{ 1576 };
			};

			// RelatedContextPartyIDSource(1577): CHAR
			struct RelatedContextPartyIDSource
			{
				static constexpr uint16_t tag{ 1577 };
			};

			// RelatedContextPartyRole(1578): INT
			struct RelatedContextPartyRole
			{
				static constexpr uint16_t tag{ 1578 };
			};

			// NoRelatedContextPartySubIDs(1579): NUMINGROUP
			struct NoRelatedContextPartySubIDs
			{
				static constexpr uint16_t tag{ 1579 };
			};

			// RelatedContextPartySubID(1580): STRING
			struct RelatedContextPartySubID
			{
				static constexpr uint16_t tag{ 1580 };
			};

			// RelatedContextPartySubIDType(1581): INT
			struct RelatedContextPartySubIDType
			{
				static constexpr uint16_t tag{ 1581 };
			};

			// NoRelationshipRiskLimits(1582): NUMINGROUP
			struct NoRelationshipRiskLimits
			{
				static constexpr uint16_t tag{ 1582 };
			};

			// RelationshipRiskLimitType(1583): INT
			struct RelationshipRiskLimitType
			{
				static constexpr uint16_t tag{ 1583 };
			};

			// RelationshipRiskLimitAmount(1584): AMT
			struct RelationshipRiskLimitAmount
			{
				static constexpr uint16_t tag{ 1584 };
			};

			// RelationshipRiskLimitCurrency(1585): CURRENCY
			struct RelationshipRiskLimitCurrency
			{
				static constexpr uint16_t tag{ 1585 };
			};

			// RelationshipRiskLimitPlatform(1586): STRING
			struct RelationshipRiskLimitPlatform
			{
				static constexpr uint16_t tag{ 1586 };
			};

			// NoRelationshipRiskInstruments(1587): NUMINGROUP
			struct NoRelationshipRiskInstruments
			{
				static constexpr uint16_t tag{ 1587 };
			};

			// RelationshipRiskInstrumentOperator(1588): INT
			struct RelationshipRiskInstrumentOperator
			{
				static constexpr uint16_t tag{ 1588 };
			};

			// RelationshipRiskSymbol(1589): STRING
			struct RelationshipRiskSymbol
			{
				static constexpr uint16_t tag{ 1589 };
			};

			// RelationshipRiskSymbolSfx(1590): STRING
			struct RelationshipRiskSymbolSfx
			{
				static constexpr uint16_t tag{ 1590 };
			};

			// RelationshipRiskSecurityID(1591): STRING
			struct RelationshipRiskSecurityID
			{
				static constexpr uint16_t tag{ 1591 };
			};

			// RelationshipRiskSecurityIDSource(1592): STRING
			struct RelationshipRiskSecurityIDSource
			{
				static constexpr uint16_t tag{ 1592 };
			};

			// NoRelationshipRiskSecurityAltID(1593): NUMINGROUP
			struct NoRelationshipRiskSecurityAltID
			{
				static constexpr uint16_t tag{ 1593 };
			};

			// RelationshipRiskSecurityAltID(1594): STRING
			struct RelationshipRiskSecurityAltID
			{
				static constexpr uint16_t tag{ 1594 };
			};

			// RelationshipRiskSecurityAltIDSource(1595): STRING
			struct RelationshipRiskSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 1595 };
			};

			// RelationshipRiskProduct(1596): INT
			struct RelationshipRiskProduct
			{
				static constexpr uint16_t tag{ 1596 };
			};

			// RelationshipRiskProductComplex(1597): STRING
			struct RelationshipRiskProductComplex
			{
				static constexpr uint16_t tag{ 1597 };
			};

			// RelationshipRiskSecurityGroup(1598): STRING
			struct RelationshipRiskSecurityGroup
			{
				static constexpr uint16_t tag{ 1598 };
			};

			// RelationshipRiskCFICode(1599): STRING
			struct RelationshipRiskCFICode
			{
				static constexpr uint16_t tag{ 1599 };
			};

			// RelationshipRiskSecurityType(1600): STRING
			struct RelationshipRiskSecurityType
			{
				static constexpr uint16_t tag{ 1600 };
			};

			// RelationshipRiskSecuritySubType(1601): STRING
			struct RelationshipRiskSecuritySubType
			{
				static constexpr uint16_t tag{ 1601 };
			};

			// RelationshipRiskMaturityMonthYear(1602): MONTHYEAR
			struct RelationshipRiskMaturityMonthYear
			{
				static constexpr uint16_t tag{ 1602 };
			};

			// RelationshipRiskMaturityTime(1603): TZTIMEONLY
			struct RelationshipRiskMaturityTime
			{
				static constexpr uint16_t tag{ 1603 };
			};

			// RelationshipRiskRestructuringType(1604): STRING
			struct RelationshipRiskRestructuringType
			{
				static constexpr uint16_t tag{ 1604 };
			};

			// RelationshipRiskSeniority(1605): STRING
			struct RelationshipRiskSeniority
			{
				static constexpr uint16_t tag{ 1605 };
			};

			// RelationshipRiskPutOrCall(1606): INT
			struct RelationshipRiskPutOrCall
			{
				static constexpr uint16_t tag{ 1606 };
			};

			// RelationshipRiskFlexibleIndicator(1607): BOOLEAN
			struct RelationshipRiskFlexibleIndicator
			{
				static constexpr uint16_t tag{ 1607 };
			};

			// RelationshipRiskCouponRate(1608): PERCENTAGE
			struct RelationshipRiskCouponRate
			{
				static constexpr uint16_t tag{ 1608 };
			};

			// RelationshipRiskSecurityExchange(1609): EXCHANGE
			struct RelationshipRiskSecurityExchange
			{
				static constexpr uint16_t tag{ 1609 };
			};

			// RelationshipRiskSecurityDesc(1610): STRING
			struct RelationshipRiskSecurityDesc
			{
				static constexpr uint16_t tag{ 1610 };
			};

			// RelationshipRiskInstrumentSettlType(1611): STRING
			struct RelationshipRiskInstrumentSettlType
			{
				static constexpr uint16_t tag{ 1611 };
			};

			// RelationshipRiskInstrumentMultiplier(1612): FLOAT
			struct RelationshipRiskInstrumentMultiplier
			{
				static constexpr uint16_t tag{ 1612 };
			};

			// NoRelationshipRiskWarningLevels(1613): NUMINGROUP
			struct NoRelationshipRiskWarningLevels
			{
				static constexpr uint16_t tag{ 1613 };
			};

			// RelationshipRiskWarningLevelPercent(1614): PERCENTAGE
			struct RelationshipRiskWarningLevelPercent
			{
				static constexpr uint16_t tag{ 1614 };
			};

			// RelationshipRiskWarningLevelName(1615): STRING
			struct RelationshipRiskWarningLevelName
			{
				static constexpr uint16_t tag{ 1615 };
			};

			// RiskSecurityExchange(1616): EXCHANGE
			struct RiskSecurityExchange
			{
				static constexpr uint16_t tag{ 1616 };
			};

			// StreamAsgnType(1617): INT
			struct StreamAsgnType
			{
				static constexpr uint16_t tag{ 1617 };
				static constexpr int32_t ASSIGNMENT{ 1 };
				static constexpr int32_t REJECTED{ 2 };
				static constexpr int32_t TERMINATE_UNASSIGN{ 3 };
			};

			// RelationshipRiskEncodedSecurityDescLen(1618): LENGTH
			struct RelationshipRiskEncodedSecurityDescLen
			{
				static constexpr uint16_t tag{ 1618 };
			};

			// RelationshipRiskEncodedSecurityDesc(1619): DATA
			struct RelationshipRiskEncodedSecurityDesc
			{
				static constexpr uint16_t tag{ 1619 };
			};

			// RiskEncodedSecurityDescLen(1620): LENGTH
			struct RiskEncodedSecurityDescLen
			{
				static constexpr uint16_t tag{ 1620 };
			};

			// RiskEncodedSecurityDesc(1621): DATA
			struct RiskEncodedSecurityDesc
			{
				static constexpr uint16_t tag{ 1621 };
			};

			// SerialTradeQualifier(9001): STRING
			struct SerialTradeQualifier
			{
				static constexpr uint16_t tag{ 9001 };
			};

			// TradeSerialNumber(9002): INT
			struct TradeSerialNumber
			{
				static constexpr uint16_t tag{ 9002 };
			};

			// OnMarketVolume(9003): QTY
			struct OnMarketVolume
			{
				static constexpr uint16_t tag{ 9003 };
			};

			// OnMarketValue(9004): PRICE
			struct OnMarketValue
			{
				static constexpr uint16_t tag{ 9004 };
			};

			// OffMarketVolume(9005): QTY
			struct OffMarketVolume
			{
				static constexpr uint16_t tag{ 9005 };
			};

			// OffMarketValue(9006): PRICE
			struct OffMarketValue
			{
				static constexpr uint16_t tag{ 9006 };
			};
		}
	}
}

#endif // UFECPP_CONSTS_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_