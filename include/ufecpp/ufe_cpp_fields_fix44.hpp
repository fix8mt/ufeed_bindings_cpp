/*
    ____                      __      ____
   /\  _`\   __             /'_ `\   /\  _`\
   \ \ \L\_\/\_\    __  _  /\ \L\ \  \ \ \L\ \ _ __    ___
    \ \  _\/\/\ \  /\ \/'\ \/_> _ <_  \ \ ,__//\`'__\ / __`\
     \ \ \/  \ \ \ \/>  </   /\ \L\ \  \ \ \/ \ \ \/ /\ \L\ \
      \ \_\   \ \_\ /\_/\_\  \ \____/   \ \_\  \ \_\ \ \____/
       \/_/    \/_/ \//\/_/   \/___/     \/_/   \/_/  \/___/

               Fix8Pro FIX Engine and Framework

Copyright (C) 2010-19 Fix8 Market Technologies Pty Ltd (ABN 29 167 027 198)
All Rights Reserved. [http://www.fix8mt.com] <heretohelp@fix8mt.com>

THIS FILE IS PROPRIETARY AND  CONFIDENTIAL. NO PART OF THIS FILE MAY BE REPRODUCED,  STORED
IN A RETRIEVAL SYSTEM,  OR TRANSMITTED, IN ANY FORM OR ANY MEANS,  ELECTRONIC, PHOTOSTATIC,
RECORDED OR OTHERWISE, WITHOUT THE PRIOR AND  EXPRESS WRITTEN  PERMISSION  OF  FIX8  MARKET
TECHNOLOGIES PTY LTD.
*/

// Autogenerated on 2019-09-03 07:52:51.155784
// /home/sergey/src/f8/fix8pro/compiler/py/f8c/f8c.py --template ufe_java_fields ufe_cpp_fields ufe_cs_fields ufe_py_fields ufe_cpp_messages --output-dir ./generated --schema-dir /home/sergey/src/f8/fix8pro/schema/xml FIX50SP2 FIX42 FIX44 FIX40 FIX41 FIX43 FIX50 FIX50SP1
// DO NOT EDIT!

#ifndef UFECPP_FIELDS_FIX44_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_
#define UFECPP_FIELDS_FIX44_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_

#include <string>
#include <ufecpp/ufecppversion.h>

namespace UFECPP
{
	namespace FIX44
	{
		namespace Field
		{

			// Account(1): STRING
			struct Account
			{
				static constexpr uint16_t tag{ 1 };
			};

			// AdvId(2): STRING
			struct AdvId
			{
				static constexpr uint16_t tag{ 2 };
			};

			// AdvRefID(3): STRING
			struct AdvRefID
			{
				static constexpr uint16_t tag{ 3 };
			};

			// AdvSide(4): CHAR
			struct AdvSide
			{
				static constexpr uint16_t tag{ 4 };
				static constexpr char BUY{ 'B' };
				static constexpr char SELL{ 'S' };
				static constexpr char TRADE{ 'T' };
				static constexpr char CROSS{ 'X' };
			};

			// AdvTransType(5): STRING
			struct AdvTransType
			{
				static constexpr uint16_t tag{ 5 };
				static inline const std::string ADVCANCEL{ "C" };
				static inline const std::string ADVNEW{ "N" };
				static inline const std::string ADVREPLACE{ "R" };
			};

			// AvgPx(6): PRICE
			struct AvgPx
			{
				static constexpr uint16_t tag{ 6 };
			};

			// BeginSeqNo(7): SEQNUM
			struct BeginSeqNo
			{
				static constexpr uint16_t tag{ 7 };
			};

			// BeginString(8): STRING
			struct BeginString
			{
				static constexpr uint16_t tag{ 8 };
			};

			// BodyLength(9): LENGTH
			struct BodyLength
			{
				static constexpr uint16_t tag{ 9 };
			};

			// CheckSum(10): STRING
			struct CheckSum
			{
				static constexpr uint16_t tag{ 10 };
			};

			// ClOrdID(11): STRING
			struct ClOrdID
			{
				static constexpr uint16_t tag{ 11 };
			};

			// Commission(12): AMT
			struct Commission
			{
				static constexpr uint16_t tag{ 12 };
			};

			// CommType(13): CHAR
			struct CommType
			{
				static constexpr uint16_t tag{ 13 };
				static constexpr char PER_UNIT{ '1' };
				static constexpr char PERCENT{ '2' };
				static constexpr char ABSOLUTE{ '3' };
				static constexpr char PCTWAIVEDCSHDISC{ '4' };
				static constexpr char PCTWAIVEDENUNITS{ '5' };
				static constexpr char PERBOND{ '6' };
			};

			// CumQty(14): QTY
			struct CumQty
			{
				static constexpr uint16_t tag{ 14 };
			};

			// Currency(15): CURRENCY
			struct Currency
			{
				static constexpr uint16_t tag{ 15 };
			};

			// EndSeqNo(16): SEQNUM
			struct EndSeqNo
			{
				static constexpr uint16_t tag{ 16 };
			};

			// ExecID(17): STRING
			struct ExecID
			{
				static constexpr uint16_t tag{ 17 };
			};

			// ExecInst(18): MULTIPLESTRINGVALUE
			struct ExecInst
			{
				static constexpr uint16_t tag{ 18 };
				static inline const std::string STAYOFFER{ "0" };
				static inline const std::string NOTHELD{ "1" };
				static inline const std::string WORK{ "2" };
				static inline const std::string GOALONG{ "3" };
				static inline const std::string OVERDAY{ "4" };
				static inline const std::string HELD{ "5" };
				static inline const std::string PARTNOTINIT{ "6" };
				static inline const std::string STRICTSCALE{ "7" };
				static inline const std::string TRYTOSCALE{ "8" };
				static inline const std::string STAYBID{ "9" };
				static inline const std::string NOCROSS{ "A" };
				static inline const std::string TRAILSTOPPEG{ "a" };
				static inline const std::string OKCROSS{ "B" };
				static inline const std::string STRICTLIMIT{ "b" };
				static inline const std::string IGNOREPRICECHK{ "c" };
				static inline const std::string CALLFIRST{ "C" };
				static inline const std::string PEGTOLIMIT{ "d" };
				static inline const std::string PERCVOL{ "D" };
				static inline const std::string DNI{ "E" };
				static inline const std::string WORKTOSTRATEGY{ "e" };
				static inline const std::string DNR{ "F" };
				static inline const std::string AON{ "G" };
				static inline const std::string RESTATEONSYSFAIL{ "H" };
				static inline const std::string INSTITONLY{ "I" };
				static inline const std::string RESTATEONTRADINGHALT{ "J" };
				static inline const std::string CANCELONTRADINGHALT{ "K" };
				static inline const std::string LASTPEG{ "L" };
				static inline const std::string MIDPRCPEG{ "M" };
				static inline const std::string NONNEGO{ "N" };
				static inline const std::string OPENPEG{ "O" };
				static inline const std::string MARKPEG{ "P" };
				static inline const std::string CANCELONSYSFAIL{ "Q" };
				static inline const std::string PRIMPEG{ "R" };
				static inline const std::string SUSPEND{ "S" };
				static inline const std::string CUSTDISPINST{ "U" };
				static inline const std::string NETTING{ "V" };
				static inline const std::string PEGVWAP{ "W" };
				static inline const std::string TRADEALONG{ "X" };
				static inline const std::string TRYTOSTOP{ "Y" };
				static inline const std::string CXLIFNOTBEST{ "Z" };
			};

			// ExecRefID(19): STRING
			struct ExecRefID
			{
				static constexpr uint16_t tag{ 19 };
			};

			// ExecTransType(20): CHAR
			struct ExecTransType
			{
				static constexpr uint16_t tag{ 20 };
				static constexpr char NEW{ '0' };
				static constexpr char CANCEL{ '1' };
				static constexpr char CORRECT{ '2' };
				static constexpr char STATUS{ '3' };
			};

			// HandlInst(21): CHAR
			struct HandlInst
			{
				static constexpr uint16_t tag{ 21 };
				static constexpr char AUTOEXECPRIV{ '1' };
				static constexpr char AUTOEXECPUB{ '2' };
				static constexpr char MANUAL{ '3' };
			};

			// SecurityIDSource(22): STRING
			struct SecurityIDSource
			{
				static constexpr uint16_t tag{ 22 };
				static inline const std::string CUSIP{ "1" };
				static inline const std::string SEDOL{ "2" };
				static inline const std::string QUIK{ "3" };
				static inline const std::string ISIN{ "4" };
				static inline const std::string RIC{ "5" };
				static inline const std::string ISOCURR{ "6" };
				static inline const std::string ISOCOUNTRY{ "7" };
				static inline const std::string EXCHSYMB{ "8" };
				static inline const std::string CTA{ "9" };
				static inline const std::string BLMBRG{ "A" };
				static inline const std::string WERTPAPIER{ "B" };
				static inline const std::string DUTCH{ "C" };
				static inline const std::string VALOREN{ "D" };
				static inline const std::string SICOVAM{ "E" };
				static inline const std::string BELGIAN{ "F" };
				static inline const std::string COMMON{ "G" };
				static inline const std::string CLEARINGHOUSE{ "H" };
				static inline const std::string FPML{ "I" };
				static inline const std::string OPTIONPRICEREPORTINGAUTHORITY{ "J" };
			};

			// IOIID(23): STRING
			struct IOIID
			{
				static constexpr uint16_t tag{ 23 };
			};

			// IOIOthSvc(24): CHAR
			struct IOIOthSvc
			{
				static constexpr uint16_t tag{ 24 };
			};

			// IOIQltyInd(25): CHAR
			struct IOIQltyInd
			{
				static constexpr uint16_t tag{ 25 };
				static constexpr char HIGH{ 'H' };
				static constexpr char LOW{ 'L' };
				static constexpr char MEDIUM{ 'M' };
			};

			// IOIRefID(26): STRING
			struct IOIRefID
			{
				static constexpr uint16_t tag{ 26 };
			};

			// IOIQty(27): STRING
			struct IOIQty
			{
				static constexpr uint16_t tag{ 27 };
			};

			// IOITransType(28): CHAR
			struct IOITransType
			{
				static constexpr uint16_t tag{ 28 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
			};

			// LastCapacity(29): CHAR
			struct LastCapacity
			{
				static constexpr uint16_t tag{ 29 };
				static constexpr char A{ '1' };
				static constexpr char XA{ '2' };
				static constexpr char XP{ '3' };
				static constexpr char P{ '4' };
			};

			// LastMkt(30): EXCHANGE
			struct LastMkt
			{
				static constexpr uint16_t tag{ 30 };
			};

			// LastPx(31): PRICE
			struct LastPx
			{
				static constexpr uint16_t tag{ 31 };
			};

			// LastQty(32): QTY
			struct LastQty
			{
				static constexpr uint16_t tag{ 32 };
			};

			// NoLinesOfText(33): NUMINGROUP
			struct NoLinesOfText
			{
				static constexpr uint16_t tag{ 33 };
			};

			// MsgSeqNum(34): SEQNUM
			struct MsgSeqNum
			{
				static constexpr uint16_t tag{ 34 };
			};

			// MsgType(35): STRING
			struct MsgType
			{
				static constexpr uint16_t tag{ 35 };
				static inline const std::string HEARTBEAT{ "0" };
				static inline const std::string TESTREQUEST{ "1" };
				static inline const std::string RESENDREQUEST{ "2" };
				static inline const std::string REJECT{ "3" };
				static inline const std::string SEQUENCERESET{ "4" };
				static inline const std::string LOGOUT{ "5" };
				static inline const std::string IOI{ "6" };
				static inline const std::string ADVERTISEMENT{ "7" };
				static inline const std::string EXECUTIONREPORT{ "8" };
				static inline const std::string ORDERCANCELREJECT{ "9" };
				static inline const std::string QUOTESTATUSREQUEST{ "a" };
				static inline const std::string LOGON{ "A" };
				static inline const std::string DERIVATIVESECURITYLIST{ "AA" };
				static inline const std::string NEWORDERMULTILEG{ "AB" };
				static inline const std::string MULTILEGORDERCANCELREPLACE{ "AC" };
				static inline const std::string TRADECAPTUREREPORTREQUEST{ "AD" };
				static inline const std::string TRADECAPTUREREPORT{ "AE" };
				static inline const std::string ORDERMASSSTATUSREQUEST{ "AF" };
				static inline const std::string QUOTEREQUESTREJECT{ "AG" };
				static inline const std::string RFQREQUEST{ "AH" };
				static inline const std::string QUOTESTATUSREPORT{ "AI" };
				static inline const std::string QUOTERESPONSE{ "AJ" };
				static inline const std::string CONFIRMATION{ "AK" };
				static inline const std::string POSITIONMAINTENANCEREQUEST{ "AL" };
				static inline const std::string POSITIONMAINTENANCEREPORT{ "AM" };
				static inline const std::string REQUESTFORPOSITIONS{ "AN" };
				static inline const std::string REQUESTFORPOSITIONSACK{ "AO" };
				static inline const std::string POSITIONREPORT{ "AP" };
				static inline const std::string TRADECAPTUREREPORTREQUESTACK{ "AQ" };
				static inline const std::string TRADECAPTUREREPORTACK{ "AR" };
				static inline const std::string ALLOCATIONREPORT{ "AS" };
				static inline const std::string ALLOCATIONREPORTACK{ "AT" };
				static inline const std::string CONFIRMATIONACK{ "AU" };
				static inline const std::string SETTLEMENTINSTRUCTIONREQUEST{ "AV" };
				static inline const std::string ASSIGNMENTREPORT{ "AW" };
				static inline const std::string COLLATERALREQUEST{ "AX" };
				static inline const std::string COLLATERALASSIGNMENT{ "AY" };
				static inline const std::string COLLATERALRESPONSE{ "AZ" };
				static inline const std::string NEWS{ "B" };
				static inline const std::string MASSQUOTEACKNOWLEDGEMENT{ "b" };
				static inline const std::string COLLATERALREPORT{ "BA" };
				static inline const std::string COLLATERALINQUIRY{ "BB" };
				static inline const std::string NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST{ "BC" };
				static inline const std::string NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE{ "BD" };
				static inline const std::string USERREQUEST{ "BE" };
				static inline const std::string USERRESPONSE{ "BF" };
				static inline const std::string COLLATERALINQUIRYACK{ "BG" };
				static inline const std::string CONFIRMATIONREQUEST{ "BH" };
				static inline const std::string EMAIL{ "C" };
				static inline const std::string SECURITYDEFINITIONREQUEST{ "c" };
				static inline const std::string SECURITYDEFINITION{ "d" };
				static inline const std::string NEWORDERSINGLE{ "D" };
				static inline const std::string SECURITYSTATUSREQUEST{ "e" };
				static inline const std::string NEWORDERLIST{ "E" };
				static inline const std::string ORDERCANCELREQUEST{ "F" };
				static inline const std::string SECURITYSTATUS{ "f" };
				static inline const std::string ORDERCANCELREPLACEREQUEST{ "G" };
				static inline const std::string TRADINGSESSIONSTATUSREQUEST{ "g" };
				static inline const std::string ORDERSTATUSREQUEST{ "H" };
				static inline const std::string TRADINGSESSIONSTATUS{ "h" };
				static inline const std::string MASSQUOTE{ "i" };
				static inline const std::string BUSINESSMESSAGEREJECT{ "j" };
				static inline const std::string ALLOCATIONINSTRUCTION{ "J" };
				static inline const std::string BIDREQUEST{ "k" };
				static inline const std::string LISTCANCELREQUEST{ "K" };
				static inline const std::string BIDRESPONSE{ "l" };
				static inline const std::string LISTEXECUTE{ "L" };
				static inline const std::string LISTSTRIKEPRICE{ "m" };
				static inline const std::string LISTSTATUSREQUEST{ "M" };
				static inline const std::string XMLNONFIX{ "n" };
				static inline const std::string LISTSTATUS{ "N" };
				static inline const std::string REGISTRATIONINSTRUCTIONS{ "o" };
				static inline const std::string REGISTRATIONINSTRUCTIONSRESPONSE{ "p" };
				static inline const std::string ALLOCATIONINSTRUCTIONACK{ "P" };
				static inline const std::string ORDERMASSCANCELREQUEST{ "q" };
				static inline const std::string DONTKNOWTRADEDK{ "Q" };
				static inline const std::string QUOTEREQUEST{ "R" };
				static inline const std::string ORDERMASSCANCELREPORT{ "r" };
				static inline const std::string QUOTE{ "S" };
				static inline const std::string NEWORDERCROSS{ "s" };
				static inline const std::string SETTLEMENTINSTRUCTIONS{ "T" };
				static inline const std::string CROSSORDERCANCELREPLACEREQUEST{ "t" };
				static inline const std::string CROSSORDERCANCELREQUEST{ "u" };
				static inline const std::string MARKETDATAREQUEST{ "V" };
				static inline const std::string SECURITYTYPEREQUEST{ "v" };
				static inline const std::string SECURITYTYPES{ "w" };
				static inline const std::string MARKETDATASNAPSHOTFULLREFRESH{ "W" };
				static inline const std::string SECURITYLISTREQUEST{ "x" };
				static inline const std::string MARKETDATAINCREMENTALREFRESH{ "X" };
				static inline const std::string MARKETDATAREQUESTREJECT{ "Y" };
				static inline const std::string SECURITYLIST{ "y" };
				static inline const std::string QUOTECANCEL{ "Z" };
				static inline const std::string DERIVATIVESECURITYLISTREQUEST{ "z" };
			};

			// NewSeqNo(36): SEQNUM
			struct NewSeqNo
			{
				static constexpr uint16_t tag{ 36 };
			};

			// OrderID(37): STRING
			struct OrderID
			{
				static constexpr uint16_t tag{ 37 };
			};

			// OrderQty(38): QTY
			struct OrderQty
			{
				static constexpr uint16_t tag{ 38 };
			};

			// OrdStatus(39): CHAR
			struct OrdStatus
			{
				static constexpr uint16_t tag{ 39 };
				static constexpr char NEW{ '0' };
				static constexpr char PARTIAL{ '1' };
				static constexpr char FILLED{ '2' };
				static constexpr char DONE{ '3' };
				static constexpr char CANCELED{ '4' };
				static constexpr char PENDING_CANCEL{ '6' };
				static constexpr char STOPPED{ '7' };
				static constexpr char REJECTED{ '8' };
				static constexpr char SUSPENDED{ '9' };
				static constexpr char PENDINGNEW{ 'A' };
				static constexpr char CALCULATED{ 'B' };
				static constexpr char EXPIRED{ 'C' };
				static constexpr char ACCEPTBIDDING{ 'D' };
				static constexpr char PENDINGREP{ 'E' };
			};

			// OrdType(40): CHAR
			struct OrdType
			{
				static constexpr uint16_t tag{ 40 };
				static constexpr char MARKET{ '1' };
				static constexpr char LIMIT{ '2' };
				static constexpr char STOP{ '3' };
				static constexpr char STOPLIMIT{ '4' };
				static constexpr char MARKETONCLOSE{ '5' };
				static constexpr char WITHORWITHOUT{ '6' };
				static constexpr char LIMITORBETTER{ '7' };
				static constexpr char LIMITWITHORWITHOUT{ '8' };
				static constexpr char ONBASIS{ '9' };
				static constexpr char ONCLOSE{ 'A' };
				static constexpr char LIMITONCLOSE{ 'B' };
				static constexpr char FOREXMARKET{ 'C' };
				static constexpr char PREVIOUSLYQUOTED{ 'D' };
				static constexpr char PREVIOUSLYINDICATED{ 'E' };
				static constexpr char FOREXLIMIT{ 'F' };
				static constexpr char FOREXSWAP{ 'G' };
				static constexpr char FOREXPREVIOUSLYQUOTED{ 'H' };
				static constexpr char FUNARI{ 'I' };
				static constexpr char MARKETIFTOUCHED{ 'J' };
				static constexpr char MARKETWITHLEFTOVERLIMIT{ 'K' };
				static constexpr char PREVIOUSFUNDVALUATIONPOINT{ 'L' };
				static constexpr char NEXTFUNDVALUATIONPOINT{ 'M' };
				static constexpr char PEGGED{ 'P' };
			};

			// OrigClOrdID(41): STRING
			struct OrigClOrdID
			{
				static constexpr uint16_t tag{ 41 };
			};

			// OrigTime(42): UTCTIMESTAMP
			struct OrigTime
			{
				static constexpr uint16_t tag{ 42 };
			};

			// PossDupFlag(43): BOOLEAN
			struct PossDupFlag
			{
				static constexpr uint16_t tag{ 43 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// Price(44): PRICE
			struct Price
			{
				static constexpr uint16_t tag{ 44 };
			};

			// RefSeqNum(45): SEQNUM
			struct RefSeqNum
			{
				static constexpr uint16_t tag{ 45 };
			};

			// RelatdSym(46): STRING
			struct RelatdSym
			{
				static constexpr uint16_t tag{ 46 };
			};

			// Rule80A(47): CHAR
			struct Rule80A
			{
				static constexpr uint16_t tag{ 47 };
				static constexpr char AGENCYSINGLE{ 'A' };
				static constexpr char SHTEXTRANA{ 'B' };
				static constexpr char PRGNONINDEXARBMEM{ 'C' };
				static constexpr char PRGINDEXARBMEM{ 'D' };
				static constexpr char MARKETMAKER{ 'E' };
				static constexpr char SHTEXTRANW{ 'F' };
				static constexpr char SHTEXTRANI{ 'H' };
				static constexpr char INVINESTOR{ 'I' };
				static constexpr char PRGNONINDEXARBINV{ 'J' };
				static constexpr char PRGINDEXARBINV{ 'K' };
				static constexpr char SHTEXTRANMEM{ 'L' };
				static constexpr char PRGNONINDEXARBOTHMEM{ 'M' };
				static constexpr char PRGINDEXARBOTHMEM{ 'N' };
				static constexpr char COMPETINGDEALER{ 'O' };
				static constexpr char PRINCIPAL{ 'P' };
				static constexpr char COMPDEALER1{ 'R' };
				static constexpr char SPECIALIST{ 'S' };
				static constexpr char COMPDEALER2{ 'T' };
				static constexpr char PRGINDEXARBOTHAGN{ 'U' };
				static constexpr char ALLOTHERAGN{ 'W' };
				static constexpr char SHTEXTRANMEMWT{ 'X' };
				static constexpr char PRGNONINDEXARBOTHAGN{ 'Y' };
				static constexpr char SHTEXTRANNONMEM{ 'Z' };
			};

			// SecurityID(48): STRING
			struct SecurityID
			{
				static constexpr uint16_t tag{ 48 };
			};

			// SenderCompID(49): STRING
			struct SenderCompID
			{
				static constexpr uint16_t tag{ 49 };
			};

			// SenderSubID(50): STRING
			struct SenderSubID
			{
				static constexpr uint16_t tag{ 50 };
			};

			// SendingDate(51): LOCALMKTDATE
			struct SendingDate
			{
				static constexpr uint16_t tag{ 51 };
			};

			// SendingTime(52): UTCTIMESTAMP
			struct SendingTime
			{
				static constexpr uint16_t tag{ 52 };
			};

			// Quantity(53): QTY
			struct Quantity
			{
				static constexpr uint16_t tag{ 53 };
			};

			// Side(54): CHAR
			struct Side
			{
				static constexpr uint16_t tag{ 54 };
				static constexpr char BUY{ '1' };
				static constexpr char SELL{ '2' };
				static constexpr char BUYMIN{ '3' };
				static constexpr char SELLPLUS{ '4' };
				static constexpr char SELLSHT{ '5' };
				static constexpr char SELLSHTEX{ '6' };
				static constexpr char UNDISC{ '7' };
				static constexpr char CROSS{ '8' };
				static constexpr char CROSSSHORT{ '9' };
				static constexpr char CROSSSHORTEX{ 'A' };
				static constexpr char ASDEFINED{ 'B' };
				static constexpr char OPPOSITE{ 'C' };
				static constexpr char SUBSCRIBE{ 'D' };
				static constexpr char REDEEM{ 'E' };
				static constexpr char LENDFINANCING{ 'F' };
				static constexpr char BORROWFINANCING{ 'G' };
			};

			// Symbol(55): STRING
			struct Symbol
			{
				static constexpr uint16_t tag{ 55 };
			};

			// TargetCompID(56): STRING
			struct TargetCompID
			{
				static constexpr uint16_t tag{ 56 };
			};

			// TargetSubID(57): STRING
			struct TargetSubID
			{
				static constexpr uint16_t tag{ 57 };
			};

			// Text(58): STRING
			struct Text
			{
				static constexpr uint16_t tag{ 58 };
			};

			// TimeInForce(59): CHAR
			struct TimeInForce
			{
				static constexpr uint16_t tag{ 59 };
				static constexpr char DAY{ '0' };
				static constexpr char GOODTILLCANCEL{ '1' };
				static constexpr char ATTHEOPENING{ '2' };
				static constexpr char IMMEDIATEORCANCEL{ '3' };
				static constexpr char FILLORKILL{ '4' };
				static constexpr char GOODTILLCROSSING{ '5' };
				static constexpr char GOODTILLDATE{ '6' };
				static constexpr char ATTHECLOSE{ '7' };
			};

			// TransactTime(60): UTCTIMESTAMP
			struct TransactTime
			{
				static constexpr uint16_t tag{ 60 };
			};

			// Urgency(61): CHAR
			struct Urgency
			{
				static constexpr uint16_t tag{ 61 };
				static constexpr char NORMAL{ '0' };
				static constexpr char FLASH{ '1' };
				static constexpr char BACKGROUND{ '2' };
			};

			// ValidUntilTime(62): UTCTIMESTAMP
			struct ValidUntilTime
			{
				static constexpr uint16_t tag{ 62 };
			};

			// SettlType(63): CHAR
			struct SettlType
			{
				static constexpr uint16_t tag{ 63 };
				static constexpr char REGULAR{ '0' };
				static constexpr char CASH{ '1' };
				static constexpr char NEXTDAY{ '2' };
				static constexpr char T2{ '3' };
				static constexpr char T3{ '4' };
				static constexpr char T4{ '5' };
				static constexpr char FUTURE{ '6' };
				static constexpr char WHENISSUED{ '7' };
				static constexpr char T5{ '8' };
				static constexpr char T1{ '9' };
			};

			// SettlDate(64): LOCALMKTDATE
			struct SettlDate
			{
				static constexpr uint16_t tag{ 64 };
			};

			// SymbolSfx(65): STRING
			struct SymbolSfx
			{
				static constexpr uint16_t tag{ 65 };
				static inline const std::string EUCPLUMPSUMINTEREST{ "CD" };
				static inline const std::string WHENISSUED{ "WI" };
			};

			// ListID(66): STRING
			struct ListID
			{
				static constexpr uint16_t tag{ 66 };
			};

			// ListSeqNo(67): INT
			struct ListSeqNo
			{
				static constexpr uint16_t tag{ 67 };
			};

			// TotNoOrders(68): INT
			struct TotNoOrders
			{
				static constexpr uint16_t tag{ 68 };
			};

			// ListExecInst(69): STRING
			struct ListExecInst
			{
				static constexpr uint16_t tag{ 69 };
			};

			// AllocID(70): STRING
			struct AllocID
			{
				static constexpr uint16_t tag{ 70 };
			};

			// AllocTransType(71): CHAR
			struct AllocTransType
			{
				static constexpr uint16_t tag{ 71 };
				static constexpr char NEW{ '0' };
				static constexpr char REPLACE{ '1' };
				static constexpr char CANCEL{ '2' };
				static constexpr char PRELIMINARY{ '3' };
				static constexpr char CALCULATED{ '4' };
				static constexpr char CALCULATEDWITHOUTPRELIMINARY{ '5' };
			};

			// RefAllocID(72): STRING
			struct RefAllocID
			{
				static constexpr uint16_t tag{ 72 };
			};

			// NoOrders(73): NUMINGROUP
			struct NoOrders
			{
				static constexpr uint16_t tag{ 73 };
			};

			// AvgPxPrecision(74): INT
			struct AvgPxPrecision
			{
				static constexpr uint16_t tag{ 74 };
			};

			// TradeDate(75): LOCALMKTDATE
			struct TradeDate
			{
				static constexpr uint16_t tag{ 75 };
			};

			// ExecBroker(76): STRING
			struct ExecBroker
			{
				static constexpr uint16_t tag{ 76 };
			};

			// PositionEffect(77): CHAR
			struct PositionEffect
			{
				static constexpr uint16_t tag{ 77 };
				static constexpr char CLOSE{ 'C' };
				static constexpr char FIFO{ 'F' };
				static constexpr char OPEN{ 'O' };
				static constexpr char ROLLED{ 'R' };
			};

			// NoAllocs(78): NUMINGROUP
			struct NoAllocs
			{
				static constexpr uint16_t tag{ 78 };
			};

			// AllocAccount(79): STRING
			struct AllocAccount
			{
				static constexpr uint16_t tag{ 79 };
			};

			// AllocQty(80): QTY
			struct AllocQty
			{
				static constexpr uint16_t tag{ 80 };
			};

			// ProcessCode(81): CHAR
			struct ProcessCode
			{
				static constexpr uint16_t tag{ 81 };
				static constexpr char REGULAR{ '0' };
				static constexpr char SOFTDOLLAR{ '1' };
				static constexpr char STEPIN{ '2' };
				static constexpr char STEPOUT{ '3' };
				static constexpr char STEPINSOFT{ '4' };
				static constexpr char STEPOUTSOFT{ '5' };
				static constexpr char PLANSPONSOR{ '6' };
			};

			// NoRpts(82): INT
			struct NoRpts
			{
				static constexpr uint16_t tag{ 82 };
			};

			// RptSeq(83): INT
			struct RptSeq
			{
				static constexpr uint16_t tag{ 83 };
			};

			// CxlQty(84): QTY
			struct CxlQty
			{
				static constexpr uint16_t tag{ 84 };
			};

			// NoDlvyInst(85): NUMINGROUP
			struct NoDlvyInst
			{
				static constexpr uint16_t tag{ 85 };
			};

			// DlvyInst(86): STRING
			struct DlvyInst
			{
				static constexpr uint16_t tag{ 86 };
			};

			// AllocStatus(87): INT
			struct AllocStatus
			{
				static constexpr uint16_t tag{ 87 };
				static constexpr int32_t ACCEPTEDSUCCESSFULLYPROCESSED{ 0 };
				static constexpr int32_t BLOCKLEVELREJECT{ 1 };
				static constexpr int32_t ACCOUNTLEVELREJECT{ 2 };
				static constexpr int32_t RECEIVEDRECEIVEDNOTYETPROCESSED{ 3 };
				static constexpr int32_t INCOMPLETE{ 4 };
				static constexpr int32_t REJECTEDBYINTERMEDIARY{ 5 };
			};

			// AllocRejCode(88): INT
			struct AllocRejCode
			{
				static constexpr uint16_t tag{ 88 };
				static constexpr int32_t UNKNOWNACCT{ 0 };
				static constexpr int32_t INCORRECTQTY{ 1 };
				static constexpr int32_t UNKNOWNORSTALEEXECID{ 10 };
				static constexpr int32_t MISMATCHEDDATA{ 11 };
				static constexpr int32_t UNKNOWNCLORDID{ 12 };
				static constexpr int32_t WAREHOUSEREQUESTREJECTED{ 13 };
				static constexpr int32_t INCORRECTAVGPRC{ 2 };
				static constexpr int32_t INCORRECTBRKMNC{ 3 };
				static constexpr int32_t COMMDIFF{ 4 };
				static constexpr int32_t UNKNOWNORDID{ 5 };
				static constexpr int32_t UNKNOWNLISTID{ 6 };
				static constexpr int32_t OTHER{ 7 };
				static constexpr int32_t INCORRECTALLOCATEDQUANTITY{ 8 };
				static constexpr int32_t CALCULATIONDIFFERENCE{ 9 };
			};

			// Signature(89): DATA
			struct Signature
			{
				static constexpr uint16_t tag{ 89 };
			};

			// SecureDataLen(90): LENGTH
			struct SecureDataLen
			{
				static constexpr uint16_t tag{ 90 };
			};

			// SecureData(91): DATA
			struct SecureData
			{
				static constexpr uint16_t tag{ 91 };
			};

			// BrokerOfCredit(92): STRING
			struct BrokerOfCredit
			{
				static constexpr uint16_t tag{ 92 };
			};

			// SignatureLength(93): LENGTH
			struct SignatureLength
			{
				static constexpr uint16_t tag{ 93 };
			};

			// EmailType(94): CHAR
			struct EmailType
			{
				static constexpr uint16_t tag{ 94 };
				static constexpr char NEW{ '0' };
				static constexpr char REPLY{ '1' };
				static constexpr char ADMINREPLY{ '2' };
			};

			// RawDataLength(95): LENGTH
			struct RawDataLength
			{
				static constexpr uint16_t tag{ 95 };
			};

			// RawData(96): DATA
			struct RawData
			{
				static constexpr uint16_t tag{ 96 };
			};

			// PossResend(97): BOOLEAN
			struct PossResend
			{
				static constexpr uint16_t tag{ 97 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// EncryptMethod(98): INT
			struct EncryptMethod
			{
				static constexpr uint16_t tag{ 98 };
				static constexpr int32_t NONEOTHER{ 0 };
				static constexpr int32_t PKCSPROPRIETARY{ 1 };
				static constexpr int32_t DESECBMODE{ 2 };
				static constexpr int32_t PKCSDESPROPRIETARY{ 3 };
				static constexpr int32_t PGPDESDEFUNCT{ 4 };
				static constexpr int32_t PGPDESMD5SEEAPPNOTEONFIXWEBSITE{ 5 };
				static constexpr int32_t PEMDESMD5SEEAPPNOTEONFIXWEBSITENAFORFIXMLNOTUSED{ 6 };
			};

			// StopPx(99): PRICE
			struct StopPx
			{
				static constexpr uint16_t tag{ 99 };
			};

			// ExDestination(100): EXCHANGE
			struct ExDestination
			{
				static constexpr uint16_t tag{ 100 };
			};

			// CxlRejReason(102): INT
			struct CxlRejReason
			{
				static constexpr uint16_t tag{ 102 };
				static constexpr int32_t TOOLATE{ 0 };
				static constexpr int32_t UNKNOWN{ 1 };
				static constexpr int32_t BROKEROPT{ 2 };
				static constexpr int32_t ALREADYPENDINGCXL{ 3 };
				static constexpr int32_t UNABLETOPROCESS{ 4 };
				static constexpr int32_t ORIGORDMODTIMEMISMATCH{ 5 };
				static constexpr int32_t DUPCLORDID{ 6 };
				static constexpr int32_t OTHER{ 99 };
			};

			// OrdRejReason(103): INT
			struct OrdRejReason
			{
				static constexpr uint16_t tag{ 103 };
				static constexpr int32_t BROKEROPT{ 0 };
				static constexpr int32_t UNKNOWNSYM{ 1 };
				static constexpr int32_t INVINVID{ 10 };
				static constexpr int32_t UNSUPPORDERCHAR{ 11 };
				static constexpr int32_t SURVEILLENCE{ 12 };
				static constexpr int32_t INCORRECTQUANTITY{ 13 };
				static constexpr int32_t INCORRECTALLOCATEDQUANTITY{ 14 };
				static constexpr int32_t UNKNOWNACCOUNTS{ 15 };
				static constexpr int32_t EXCHCLOSED{ 2 };
				static constexpr int32_t EXCEEDSLIM{ 3 };
				static constexpr int32_t TOOLATE{ 4 };
				static constexpr int32_t UNKNOWN{ 5 };
				static constexpr int32_t DUPLICATE{ 6 };
				static constexpr int32_t DUPLICATEVERBAL{ 7 };
				static constexpr int32_t STALE{ 8 };
				static constexpr int32_t TRADEALONGREQ{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// IOIQualifier(104): CHAR
			struct IOIQualifier
			{
				static constexpr uint16_t tag{ 104 };
				static constexpr char AON{ 'A' };
				static constexpr char MOC{ 'B' };
				static constexpr char ATCLOSE{ 'C' };
				static constexpr char VWAP{ 'D' };
				static constexpr char INTOUCH{ 'I' };
				static constexpr char LIMIT{ 'L' };
				static constexpr char MOREBEHIND{ 'M' };
				static constexpr char ATOPEN{ 'O' };
				static constexpr char TAKEPOSITION{ 'P' };
				static constexpr char ATMARKET{ 'Q' };
				static constexpr char READYTRADE{ 'R' };
				static constexpr char PORTSHOW{ 'S' };
				static constexpr char THROUGHDAY{ 'T' };
				static constexpr char VERSUS{ 'V' };
				static constexpr char INDWRKAWAY{ 'W' };
				static constexpr char CROSSOPP{ 'X' };
				static constexpr char ATMID{ 'Y' };
				static constexpr char PREOPEN{ 'Z' };
			};

			// WaveNo(105): STRING
			struct WaveNo
			{
				static constexpr uint16_t tag{ 105 };
			};

			// Issuer(106): STRING
			struct Issuer
			{
				static constexpr uint16_t tag{ 106 };
			};

			// SecurityDesc(107): STRING
			struct SecurityDesc
			{
				static constexpr uint16_t tag{ 107 };
			};

			// HeartBtInt(108): INT
			struct HeartBtInt
			{
				static constexpr uint16_t tag{ 108 };
			};

			// ClientID(109): STRING
			struct ClientID
			{
				static constexpr uint16_t tag{ 109 };
			};

			// MinQty(110): QTY
			struct MinQty
			{
				static constexpr uint16_t tag{ 110 };
			};

			// MaxFloor(111): QTY
			struct MaxFloor
			{
				static constexpr uint16_t tag{ 111 };
			};

			// TestReqID(112): STRING
			struct TestReqID
			{
				static constexpr uint16_t tag{ 112 };
			};

			// ReportToExch(113): BOOLEAN
			struct ReportToExch
			{
				static constexpr uint16_t tag{ 113 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// LocateReqd(114): BOOLEAN
			struct LocateReqd
			{
				static constexpr uint16_t tag{ 114 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// OnBehalfOfCompID(115): STRING
			struct OnBehalfOfCompID
			{
				static constexpr uint16_t tag{ 115 };
			};

			// OnBehalfOfSubID(116): STRING
			struct OnBehalfOfSubID
			{
				static constexpr uint16_t tag{ 116 };
			};

			// QuoteID(117): STRING
			struct QuoteID
			{
				static constexpr uint16_t tag{ 117 };
			};

			// NetMoney(118): AMT
			struct NetMoney
			{
				static constexpr uint16_t tag{ 118 };
			};

			// SettlCurrAmt(119): AMT
			struct SettlCurrAmt
			{
				static constexpr uint16_t tag{ 119 };
			};

			// SettlCurrency(120): CURRENCY
			struct SettlCurrency
			{
				static constexpr uint16_t tag{ 120 };
			};

			// ForexReq(121): BOOLEAN
			struct ForexReq
			{
				static constexpr uint16_t tag{ 121 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// OrigSendingTime(122): UTCTIMESTAMP
			struct OrigSendingTime
			{
				static constexpr uint16_t tag{ 122 };
			};

			// GapFillFlag(123): BOOLEAN
			struct GapFillFlag
			{
				static constexpr uint16_t tag{ 123 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// NoExecs(124): NUMINGROUP
			struct NoExecs
			{
				static constexpr uint16_t tag{ 124 };
			};

			// CxlType(125): CHAR
			struct CxlType
			{
				static constexpr uint16_t tag{ 125 };
			};

			// ExpireTime(126): UTCTIMESTAMP
			struct ExpireTime
			{
				static constexpr uint16_t tag{ 126 };
			};

			// DKReason(127): CHAR
			struct DKReason
			{
				static constexpr uint16_t tag{ 127 };
				static constexpr char UNKNOWNSYMBOL{ 'A' };
				static constexpr char WRONGSIDE{ 'B' };
				static constexpr char QUANTITYEXCEEDSORDER{ 'C' };
				static constexpr char NOMATCH{ 'D' };
				static constexpr char PRICEEXCEEDSLIMIT{ 'E' };
				static constexpr char CALCULATIONDIFFERENCE{ 'F' };
				static constexpr char OTHER{ 'Z' };
			};

			// DeliverToCompID(128): STRING
			struct DeliverToCompID
			{
				static constexpr uint16_t tag{ 128 };
			};

			// DeliverToSubID(129): STRING
			struct DeliverToSubID
			{
				static constexpr uint16_t tag{ 129 };
			};

			// IOINaturalFlag(130): BOOLEAN
			struct IOINaturalFlag
			{
				static constexpr uint16_t tag{ 130 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// QuoteReqID(131): STRING
			struct QuoteReqID
			{
				static constexpr uint16_t tag{ 131 };
			};

			// BidPx(132): PRICE
			struct BidPx
			{
				static constexpr uint16_t tag{ 132 };
			};

			// OfferPx(133): PRICE
			struct OfferPx
			{
				static constexpr uint16_t tag{ 133 };
			};

			// BidSize(134): QTY
			struct BidSize
			{
				static constexpr uint16_t tag{ 134 };
			};

			// OfferSize(135): QTY
			struct OfferSize
			{
				static constexpr uint16_t tag{ 135 };
			};

			// NoMiscFees(136): NUMINGROUP
			struct NoMiscFees
			{
				static constexpr uint16_t tag{ 136 };
			};

			// MiscFeeAmt(137): AMT
			struct MiscFeeAmt
			{
				static constexpr uint16_t tag{ 137 };
			};

			// MiscFeeCurr(138): CURRENCY
			struct MiscFeeCurr
			{
				static constexpr uint16_t tag{ 138 };
			};

			// MiscFeeType(139): STRING
			struct MiscFeeType
			{
				static constexpr uint16_t tag{ 139 };
				static inline const std::string REG{ "1" };
				static inline const std::string TRANSACTION{ "10" };
				static inline const std::string CONVERSION{ "11" };
				static inline const std::string AGENT{ "12" };
				static inline const std::string TAX{ "2" };
				static inline const std::string LOCALCOMM{ "3" };
				static inline const std::string EXCHFEE{ "4" };
				static inline const std::string STAMP{ "5" };
				static inline const std::string LEVY{ "6" };
				static inline const std::string OTHER{ "7" };
				static inline const std::string MARKUP{ "8" };
				static inline const std::string CONSUMPTION{ "9" };
			};

			// PrevClosePx(140): PRICE
			struct PrevClosePx
			{
				static constexpr uint16_t tag{ 140 };
			};

			// ResetSeqNumFlag(141): BOOLEAN
			struct ResetSeqNumFlag
			{
				static constexpr uint16_t tag{ 141 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// SenderLocationID(142): STRING
			struct SenderLocationID
			{
				static constexpr uint16_t tag{ 142 };
			};

			// TargetLocationID(143): STRING
			struct TargetLocationID
			{
				static constexpr uint16_t tag{ 143 };
			};

			// OnBehalfOfLocationID(144): STRING
			struct OnBehalfOfLocationID
			{
				static constexpr uint16_t tag{ 144 };
			};

			// DeliverToLocationID(145): STRING
			struct DeliverToLocationID
			{
				static constexpr uint16_t tag{ 145 };
			};

			// NoRelatedSym(146): NUMINGROUP
			struct NoRelatedSym
			{
				static constexpr uint16_t tag{ 146 };
			};

			// Subject(147): STRING
			struct Subject
			{
				static constexpr uint16_t tag{ 147 };
			};

			// Headline(148): STRING
			struct Headline
			{
				static constexpr uint16_t tag{ 148 };
			};

			// URLLink(149): STRING
			struct URLLink
			{
				static constexpr uint16_t tag{ 149 };
			};

			// ExecType(150): CHAR
			struct ExecType
			{
				static constexpr uint16_t tag{ 150 };
				static constexpr char NEW{ '0' };
				static constexpr char DONE{ '3' };
				static constexpr char CANCELED{ '4' };
				static constexpr char REPLACED{ '5' };
				static constexpr char PENDINGCXL{ '6' };
				static constexpr char STOPPED{ '7' };
				static constexpr char REJECTED{ '8' };
				static constexpr char SUSPENDED{ '9' };
				static constexpr char PENDINGNEW{ 'A' };
				static constexpr char CALCULATED{ 'B' };
				static constexpr char EXPIRED{ 'C' };
				static constexpr char RESTATED{ 'D' };
				static constexpr char PENDINGREPLACE{ 'E' };
				static constexpr char TRADE{ 'F' };
				static constexpr char TRADECORRECT{ 'G' };
				static constexpr char TRADECANCEL{ 'H' };
				static constexpr char ORDERSTATUS{ 'I' };
			};

			// LeavesQty(151): QTY
			struct LeavesQty
			{
				static constexpr uint16_t tag{ 151 };
			};

			// CashOrderQty(152): QTY
			struct CashOrderQty
			{
				static constexpr uint16_t tag{ 152 };
			};

			// AllocAvgPx(153): PRICE
			struct AllocAvgPx
			{
				static constexpr uint16_t tag{ 153 };
			};

			// AllocNetMoney(154): AMT
			struct AllocNetMoney
			{
				static constexpr uint16_t tag{ 154 };
			};

			// SettlCurrFxRate(155): FLOAT
			struct SettlCurrFxRate
			{
				static constexpr uint16_t tag{ 155 };
			};

			// SettlCurrFxRateCalc(156): CHAR
			struct SettlCurrFxRateCalc
			{
				static constexpr uint16_t tag{ 156 };
				static constexpr char MULTIPLY{ 'M' };
				static constexpr char DIVIDE{ 'D' };
			};

			// NumDaysInterest(157): INT
			struct NumDaysInterest
			{
				static constexpr uint16_t tag{ 157 };
			};

			// AccruedInterestRate(158): PERCENTAGE
			struct AccruedInterestRate
			{
				static constexpr uint16_t tag{ 158 };
			};

			// AccruedInterestAmt(159): AMT
			struct AccruedInterestAmt
			{
				static constexpr uint16_t tag{ 159 };
			};

			// SettlInstMode(160): CHAR
			struct SettlInstMode
			{
				static constexpr uint16_t tag{ 160 };
				static constexpr char DEFAULT{ '0' };
				static constexpr char SIPROVIDED{ '1' };
				static constexpr char ACCOUNTOVERRIDING{ '2' };
				static constexpr char ACCOUNTSTANDING{ '3' };
				static constexpr char CIVORDERSINGLEACCT{ '4' };
				static constexpr char REJECT{ '5' };
			};

			// AllocText(161): STRING
			struct AllocText
			{
				static constexpr uint16_t tag{ 161 };
			};

			// SettlInstID(162): STRING
			struct SettlInstID
			{
				static constexpr uint16_t tag{ 162 };
			};

			// SettlInstTransType(163): CHAR
			struct SettlInstTransType
			{
				static constexpr uint16_t tag{ 163 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NEW{ 'N' };
				static constexpr char REPLACE{ 'R' };
				static constexpr char RESTATE{ 'T' };
			};

			// EmailThreadID(164): STRING
			struct EmailThreadID
			{
				static constexpr uint16_t tag{ 164 };
			};

			// SettlInstSource(165): CHAR
			struct SettlInstSource
			{
				static constexpr uint16_t tag{ 165 };
				static constexpr char BROKERINSTR{ '1' };
				static constexpr char INSTINSTR{ '2' };
				static constexpr char INVESTORCIV{ '3' };
			};

			// SettlLocation(166): STRING
			struct SettlLocation
			{
				static constexpr uint16_t tag{ 166 };
				static inline const std::string CEDEL{ "CED" };
				static inline const std::string DEPOSITORYTRUSTCOMPANY{ "DTC" };
				static inline const std::string EUROCLEAR{ "EUR" };
				static inline const std::string FEDERALBOOKENTRY{ "FED" };
				static inline const std::string LOCALMARKETSETTLELOCATION{ "ISO_Country_Code" };
				static inline const std::string PHYSICAL{ "PNY" };
				static inline const std::string PARTICIPANTTRUSTCOMPANY{ "PTC" };
			};

			// SecurityType(167): STRING
			struct SecurityType
			{
				static constexpr uint16_t tag{ 167 };
				static inline const std::string ASSETBACKEDSECURITIES{ "ABS" };
				static inline const std::string AMENDEDRESTATED{ "AMENDED" };
				static inline const std::string OTHERANTICIPATIONNOTESBANGANETC{ "AN" };
				static inline const std::string BANKERSACCEPTANCE{ "BA" };
				static inline const std::string BANKNOTES{ "BN" };
				static inline const std::string BILLOFEXCHANGES{ "BOX" };
				static inline const std::string BRADYBOND{ "BRADY" };
				static inline const std::string BRIDGELOAN{ "BRIDGE" };
				static inline const std::string BUYSELLBACK{ "BUYSELL" };
				static inline const std::string CONVERTIBLEBOND{ "CB" };
				static inline const std::string CERTIFICATEOFDEPOSIT{ "CD" };
				static inline const std::string CALLLOANS{ "CL" };
				static inline const std::string CORPMORTGAGEBACKEDSECURITIES{ "CMBS" };
				static inline const std::string COLLATERALIZEDMORTGAGEOBLIGATION{ "CMO" };
				static inline const std::string CERTIFICATEOFOBLIGATION{ "COFO" };
				static inline const std::string CERTIFICATEOFPARTICIPATION{ "COFP" };
				static inline const std::string CORPORATEBOND{ "CORP" };
				static inline const std::string COMMERCIALPAPER{ "CP" };
				static inline const std::string CORPORATEPRIVATEPLACEMENT{ "CPP" };
				static inline const std::string COMMONSTOCK{ "CS" };
				static inline const std::string DEFAULTED{ "DEFLTED" };
				static inline const std::string DEBTORINPOSSESSION{ "DINP" };
				static inline const std::string DEPOSITNOTES{ "DN" };
				static inline const std::string DUALCURRENCY{ "DUAL" };
				static inline const std::string EUROCERTIFICATEOFDEPOSIT{ "EUCD" };
				static inline const std::string EUROCORPORATEBOND{ "EUCORP" };
				static inline const std::string EUROCOMMERCIALPAPER{ "EUCP" };
				static inline const std::string EUROSOVEREIGNS{ "EUSOV" };
				static inline const std::string EUROSUPRANATIONALCOUPONS{ "EUSUPRA" };
				static inline const std::string FEDERALAGENCYCOUPON{ "FAC" };
				static inline const std::string FEDERALAGENCYDISCOUNTNOTE{ "FADN" };
				static inline const std::string FOREIGNEXCHANGECONTRACT{ "FOR" };
				static inline const std::string FORWARD{ "FORWARD" };
				static inline const std::string FUTURE{ "FUT" };
				static inline const std::string GENERALOBLIGATIONBONDS{ "GO" };
				static inline const std::string IOETTEMORTGAGE{ "IET" };
				static inline const std::string LETTEROFCREDIT{ "LOFC" };
				static inline const std::string LIQUIDITYNOTE{ "LQN" };
				static inline const std::string MATURED{ "MATURED" };
				static inline const std::string MORTGAGEBACKEDSECURITIES{ "MBS" };
				static inline const std::string MUTUALFUND{ "MF" };
				static inline const std::string MORTGAGEINTERESTONLY{ "MIO" };
				static inline const std::string MULTILEGINSTRUMENT{ "MLEG" };
				static inline const std::string MORTGAGEPRINCIPALONLY{ "MPO" };
				static inline const std::string MORTGAGEPRIVATEPLACEMENT{ "MPP" };
				static inline const std::string MISCELLANEOUSPASSTHROUGH{ "MPT" };
				static inline const std::string MANDATORYTENDER{ "MT" };
				static inline const std::string MEDIUMTERMNOTES{ "MTN" };
				static inline const std::string NOSECURITYTYPE{ "NONE" };
				static inline const std::string OVERNIGHT{ "ONITE" };
				static inline const std::string OPTION{ "OPT" };
				static inline const std::string PRIVATEEXPORTFUNDING{ "PEF" };
				static inline const std::string PFANDBRIEFE{ "PFAND" };
				static inline const std::string PROMISSORYNOTE{ "PN" };
				static inline const std::string PREFERREDSTOCK{ "PS" };
				static inline const std::string PLAZOSFIJOS{ "PZFJ" };
				static inline const std::string REVENUEANTICIPATIONNOTE{ "RAN" };
				static inline const std::string REPLACED{ "REPLACD" };
				static inline const std::string REPURCHASE{ "REPO" };
				static inline const std::string RETIRED{ "RETIRED" };
				static inline const std::string REVENUEBONDS{ "REV" };
				static inline const std::string REVOLVERLOAN{ "RVLV" };
				static inline const std::string REVOLVERTERMLOAN{ "RVLVTRM" };
				static inline const std::string SECURITIESLOAN{ "SECLOAN" };
				static inline const std::string SECURITIESPLEDGE{ "SECPLEDGE" };
				static inline const std::string SPECIALASSESSMENT{ "SPCLA" };
				static inline const std::string SPECIALOBLIGATION{ "SPCLO" };
				static inline const std::string SPECIALTAX{ "SPCLT" };
				static inline const std::string SHORTTERMLOANNOTE{ "STN" };
				static inline const std::string STRUCTUREDNOTES{ "STRUCT" };
				static inline const std::string USDSUPRANATIONALCOUPONS{ "SUPRA" };
				static inline const std::string SWINGLINEFACILITY{ "SWING" };
				static inline const std::string TAXANTICIPATIONNOTE{ "TAN" };
				static inline const std::string TAXALLOCATION{ "TAXA" };
				static inline const std::string TOBEANNOUNCED{ "TBA" };
				static inline const std::string USTREASURYBILL{ "TBILL" };
				static inline const std::string USTREASURYBOND{ "TBOND" };
				static inline const std::string PRINCIPALSTRIPOFACALLABLEBONDORNOTE{ "TCAL" };
				static inline const std::string TIMEDEPOSIT{ "TD" };
				static inline const std::string TAXEXEMPTCOMMERCIALPAPER{ "TECP" };
				static inline const std::string TERMLOAN{ "TERM" };
				static inline const std::string INTERESTSTRIPFROMANYBONDORNOTE{ "TINT" };
				static inline const std::string TREASURYINFLATIONPROTECTEDSECURITIES{ "TIPS" };
				static inline const std::string USTREASURYNOTE{ "TNOTE" };
				static inline const std::string PRINCIPALSTRIPFROMANONCALLABLEBONDORNOTE{ "TPRN" };
				static inline const std::string TAXREVENUEANTICIPATIONNOTE{ "TRAN" };
				static inline const std::string USTREASURYNOTEDEPRECATEDVALUEUSETNOTE{ "UST" };
				static inline const std::string USTREASURYBILLDEPRECATEDVALUEUSETBILL{ "USTB" };
				static inline const std::string VARIABLERATEDEMANDNOTE{ "VRDN" };
				static inline const std::string WARRANT{ "WAR" };
				static inline const std::string WITHDRAWN{ "WITHDRN" };
				static inline const std::string WILDCARDENTRY{ "WLD" };
				static inline const std::string EXTENDEDCOMMNOTE{ "XCN" };
				static inline const std::string INDEXEDLINKED{ "XLINKD" };
				static inline const std::string YANKEECORPORATEBOND{ "YANK" };
				static inline const std::string YANKEECERTIFICATEOFDEPOSIT{ "YCD" };
			};

			// EffectiveTime(168): UTCTIMESTAMP
			struct EffectiveTime
			{
				static constexpr uint16_t tag{ 168 };
			};

			// StandInstDbType(169): INT
			struct StandInstDbType
			{
				static constexpr uint16_t tag{ 169 };
				static constexpr int32_t OTHER{ 0 };
				static constexpr int32_t SID{ 1 };
				static constexpr int32_t ALERT{ 2 };
				static constexpr int32_t CUSTODIAN{ 3 };
				static constexpr int32_t ACCOUNTNET{ 4 };
			};

			// StandInstDbName(170): STRING
			struct StandInstDbName
			{
				static constexpr uint16_t tag{ 170 };
			};

			// StandInstDbID(171): STRING
			struct StandInstDbID
			{
				static constexpr uint16_t tag{ 171 };
			};

			// SettlDeliveryType(172): INT
			struct SettlDeliveryType
			{
				static constexpr uint16_t tag{ 172 };
			};

			// SettlDepositoryCode(173): STRING
			struct SettlDepositoryCode
			{
				static constexpr uint16_t tag{ 173 };
			};

			// SettlBrkrCode(174): STRING
			struct SettlBrkrCode
			{
				static constexpr uint16_t tag{ 174 };
			};

			// SettlInstCode(175): STRING
			struct SettlInstCode
			{
				static constexpr uint16_t tag{ 175 };
			};

			// SecuritySettlAgentName(176): STRING
			struct SecuritySettlAgentName
			{
				static constexpr uint16_t tag{ 176 };
			};

			// SecuritySettlAgentCode(177): STRING
			struct SecuritySettlAgentCode
			{
				static constexpr uint16_t tag{ 177 };
			};

			// SecuritySettlAgentAcctNum(178): STRING
			struct SecuritySettlAgentAcctNum
			{
				static constexpr uint16_t tag{ 178 };
			};

			// SecuritySettlAgentAcctName(179): STRING
			struct SecuritySettlAgentAcctName
			{
				static constexpr uint16_t tag{ 179 };
			};

			// SecuritySettlAgentContactName(180): STRING
			struct SecuritySettlAgentContactName
			{
				static constexpr uint16_t tag{ 180 };
			};

			// SecuritySettlAgentContactPhone(181): STRING
			struct SecuritySettlAgentContactPhone
			{
				static constexpr uint16_t tag{ 181 };
			};

			// CashSettlAgentName(182): STRING
			struct CashSettlAgentName
			{
				static constexpr uint16_t tag{ 182 };
			};

			// CashSettlAgentCode(183): STRING
			struct CashSettlAgentCode
			{
				static constexpr uint16_t tag{ 183 };
			};

			// CashSettlAgentAcctNum(184): STRING
			struct CashSettlAgentAcctNum
			{
				static constexpr uint16_t tag{ 184 };
			};

			// CashSettlAgentAcctName(185): STRING
			struct CashSettlAgentAcctName
			{
				static constexpr uint16_t tag{ 185 };
			};

			// CashSettlAgentContactName(186): STRING
			struct CashSettlAgentContactName
			{
				static constexpr uint16_t tag{ 186 };
			};

			// CashSettlAgentContactPhone(187): STRING
			struct CashSettlAgentContactPhone
			{
				static constexpr uint16_t tag{ 187 };
			};

			// BidSpotRate(188): PRICE
			struct BidSpotRate
			{
				static constexpr uint16_t tag{ 188 };
			};

			// BidForwardPoints(189): PRICEOFFSET
			struct BidForwardPoints
			{
				static constexpr uint16_t tag{ 189 };
			};

			// OfferSpotRate(190): PRICE
			struct OfferSpotRate
			{
				static constexpr uint16_t tag{ 190 };
			};

			// OfferForwardPoints(191): PRICEOFFSET
			struct OfferForwardPoints
			{
				static constexpr uint16_t tag{ 191 };
			};

			// OrderQty2(192): QTY
			struct OrderQty2
			{
				static constexpr uint16_t tag{ 192 };
			};

			// SettlDate2(193): LOCALMKTDATE
			struct SettlDate2
			{
				static constexpr uint16_t tag{ 193 };
			};

			// LastSpotRate(194): PRICE
			struct LastSpotRate
			{
				static constexpr uint16_t tag{ 194 };
			};

			// LastForwardPoints(195): PRICEOFFSET
			struct LastForwardPoints
			{
				static constexpr uint16_t tag{ 195 };
			};

			// AllocLinkID(196): STRING
			struct AllocLinkID
			{
				static constexpr uint16_t tag{ 196 };
			};

			// AllocLinkType(197): INT
			struct AllocLinkType
			{
				static constexpr uint16_t tag{ 197 };
				static constexpr int32_t FXNETTING{ 0 };
				static constexpr int32_t FXSWAP{ 1 };
			};

			// SecondaryOrderID(198): STRING
			struct SecondaryOrderID
			{
				static constexpr uint16_t tag{ 198 };
			};

			// NoIOIQualifiers(199): NUMINGROUP
			struct NoIOIQualifiers
			{
				static constexpr uint16_t tag{ 199 };
			};

			// MaturityMonthYear(200): MONTHYEAR
			struct MaturityMonthYear
			{
				static constexpr uint16_t tag{ 200 };
			};

			// PutOrCall(201): INT
			struct PutOrCall
			{
				static constexpr uint16_t tag{ 201 };
				static constexpr int32_t PUT{ 0 };
				static constexpr int32_t CALL{ 1 };
			};

			// StrikePrice(202): PRICE
			struct StrikePrice
			{
				static constexpr uint16_t tag{ 202 };
			};

			// CoveredOrUncovered(203): INT
			struct CoveredOrUncovered
			{
				static constexpr uint16_t tag{ 203 };
				static constexpr int32_t COVERED{ 0 };
				static constexpr int32_t UNCOVERED{ 1 };
			};

			// CustomerOrFirm(204): INT
			struct CustomerOrFirm
			{
				static constexpr uint16_t tag{ 204 };
				static constexpr int32_t CUSTOMER{ 0 };
				static constexpr int32_t FIRM{ 1 };
			};

			// MaturityDay(205): DAYOFMONTH
			struct MaturityDay
			{
				static constexpr uint16_t tag{ 205 };
			};

			// OptAttribute(206): CHAR
			struct OptAttribute
			{
				static constexpr uint16_t tag{ 206 };
			};

			// SecurityExchange(207): EXCHANGE
			struct SecurityExchange
			{
				static constexpr uint16_t tag{ 207 };
			};

			// NotifyBrokerOfCredit(208): BOOLEAN
			struct NotifyBrokerOfCredit
			{
				static constexpr uint16_t tag{ 208 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// AllocHandlInst(209): INT
			struct AllocHandlInst
			{
				static constexpr uint16_t tag{ 209 };
				static constexpr int32_t MATCH{ 1 };
				static constexpr int32_t FORWARD{ 2 };
				static constexpr int32_t FORWARDMATCH{ 3 };
			};

			// MaxShow(210): QTY
			struct MaxShow
			{
				static constexpr uint16_t tag{ 210 };
			};

			// PegOffsetValue(211): FLOAT
			struct PegOffsetValue
			{
				static constexpr uint16_t tag{ 211 };
			};

			// XmlDataLen(212): LENGTH
			struct XmlDataLen
			{
				static constexpr uint16_t tag{ 212 };
			};

			// XmlData(213): DATA
			struct XmlData
			{
				static constexpr uint16_t tag{ 213 };
			};

			// SettlInstRefID(214): STRING
			struct SettlInstRefID
			{
				static constexpr uint16_t tag{ 214 };
			};

			// NoRoutingIDs(215): NUMINGROUP
			struct NoRoutingIDs
			{
				static constexpr uint16_t tag{ 215 };
			};

			// RoutingType(216): INT
			struct RoutingType
			{
				static constexpr uint16_t tag{ 216 };
				static constexpr int32_t TARGETFIRM{ 1 };
				static constexpr int32_t TARGETLIST{ 2 };
				static constexpr int32_t BLOCKFIRM{ 3 };
				static constexpr int32_t BLOCKLIST{ 4 };
			};

			// RoutingID(217): STRING
			struct RoutingID
			{
				static constexpr uint16_t tag{ 217 };
			};

			// Spread(218): PRICEOFFSET
			struct Spread
			{
				static constexpr uint16_t tag{ 218 };
			};

			// Benchmark(219): CHAR
			struct Benchmark
			{
				static constexpr uint16_t tag{ 219 };
				static constexpr char CURVE{ '1' };
				static constexpr char _5YR{ '2' };
				static constexpr char OLD5{ '3' };
				static constexpr char _10YR{ '4' };
				static constexpr char OLD10{ '5' };
				static constexpr char _30YR{ '6' };
				static constexpr char OLD30{ '7' };
				static constexpr char _3MOLIBOR{ '8' };
				static constexpr char _6MOLIBOR{ '9' };
			};

			// BenchmarkCurveCurrency(220): CURRENCY
			struct BenchmarkCurveCurrency
			{
				static constexpr uint16_t tag{ 220 };
			};

			// BenchmarkCurveName(221): STRING
			struct BenchmarkCurveName
			{
				static constexpr uint16_t tag{ 221 };
				static inline const std::string EONIA{ "EONIA" };
				static inline const std::string EUREPO{ "EUREPO" };
				static inline const std::string EURIBOR{ "Euribor" };
				static inline const std::string FUTURESWAP{ "FutureSWAP" };
				static inline const std::string LIBID{ "LIBID" };
				static inline const std::string LIBOR{ "LIBOR" };
				static inline const std::string MUNIAAA{ "MuniAAA" };
				static inline const std::string OTHER{ "OTHER" };
				static inline const std::string PFANDBRIEFE{ "Pfandbriefe" };
				static inline const std::string SONIA{ "SONIA" };
				static inline const std::string SWAP{ "SWAP" };
				static inline const std::string TREASURY{ "Treasury" };
			};

			// BenchmarkCurvePoint(222): STRING
			struct BenchmarkCurvePoint
			{
				static constexpr uint16_t tag{ 222 };
			};

			// CouponRate(223): PERCENTAGE
			struct CouponRate
			{
				static constexpr uint16_t tag{ 223 };
			};

			// CouponPaymentDate(224): LOCALMKTDATE
			struct CouponPaymentDate
			{
				static constexpr uint16_t tag{ 224 };
			};

			// IssueDate(225): LOCALMKTDATE
			struct IssueDate
			{
				static constexpr uint16_t tag{ 225 };
			};

			// RepurchaseTerm(226): INT
			struct RepurchaseTerm
			{
				static constexpr uint16_t tag{ 226 };
			};

			// RepurchaseRate(227): PERCENTAGE
			struct RepurchaseRate
			{
				static constexpr uint16_t tag{ 227 };
			};

			// Factor(228): FLOAT
			struct Factor
			{
				static constexpr uint16_t tag{ 228 };
			};

			// TradeOriginationDate(229): LOCALMKTDATE
			struct TradeOriginationDate
			{
				static constexpr uint16_t tag{ 229 };
			};

			// ExDate(230): LOCALMKTDATE
			struct ExDate
			{
				static constexpr uint16_t tag{ 230 };
			};

			// ContractMultiplier(231): FLOAT
			struct ContractMultiplier
			{
				static constexpr uint16_t tag{ 231 };
			};

			// NoStipulations(232): NUMINGROUP
			struct NoStipulations
			{
				static constexpr uint16_t tag{ 232 };
			};

			// StipulationType(233): STRING
			struct StipulationType
			{
				static constexpr uint16_t tag{ 233 };
				static inline const std::string ABSOLUTEPREPAYMENTSPEED{ "ABS" };
				static inline const std::string AMT{ "AMT" };
				static inline const std::string AUTOREINVESTMENTATRATEORBETTER{ "AUTOREINV" };
				static inline const std::string BANKQUALIFIED{ "BANKQUAL" };
				static inline const std::string BARGAINCONDITIONS{ "BGNCON" };
				static inline const std::string COUPONRANGE{ "COUPON" };
				static inline const std::string CONSTANTPREPAYMENTPENALTY{ "CPP" };
				static inline const std::string CONSTANTPREPAYMENTRATE{ "CPR" };
				static inline const std::string CONSTANTPREPAYMENTYIELD{ "CPY" };
				static inline const std::string ISOCURRENCYCODE{ "CURRENCY" };
				static inline const std::string CUSTOMSTARTENDDATE{ "CUSTOMDATE" };
				static inline const std::string GEOGRAPHICSANDRANGE{ "GEOG" };
				static inline const std::string VALUATIONDISCOUNT{ "HAIRCUT" };
				static inline const std::string FINALCPROFHOMEEQUITYPREPAYMENTCURVE{ "HEP" };
				static inline const std::string INSURED{ "INSURED" };
				static inline const std::string YEARORYEARMONTHOFISSUE{ "ISSUE" };
				static inline const std::string ISSUERSTICKER{ "ISSUER" };
				static inline const std::string ISSUESIZERANGE{ "ISSUESIZE" };
				static inline const std::string LOOKBACKDAYS{ "LOOKBACK" };
				static inline const std::string EXPLICITLOTIDENTIFIER{ "LOT" };
				static inline const std::string LOTVARIANCEVALUEINPERCENTMAXIMUMOVERORUNDERALLOCATIONALLOWED{ "LOTVAR" };
				static inline const std::string MATURITYYEARANDMONTH{ "MAT" };
				static inline const std::string MATURITYRANGE{ "MATURITY" };
				static inline const std::string MAXIMUMDENOMINATION{ "MAXDNOM" };
				static inline const std::string MAXIMUMSUBSTITUTIONSREPO{ "MAXSUBS" };
				static inline const std::string PERCENTOFMANUFACTUREDHOUSINGPREPAYMENTCURVE{ "MHP" };
				static inline const std::string MINIMUMDENOMINATION{ "MINDNOM" };
				static inline const std::string MINIMUMINCREMENT{ "MININCR" };
				static inline const std::string MINIMUMQUANTITY{ "MINQTY" };
				static inline const std::string MONTHLYPREPAYMENTRATE{ "MPR" };
				static inline const std::string PAYMENTFREQUENCYCALENDAR{ "PAYFREQ" };
				static inline const std::string NUMBEROFPIECES{ "PIECES" };
				static inline const std::string POOLSMAXIMUM{ "PMAX" };
				static inline const std::string POOLSMINIMUM{ "PMIN" };
				static inline const std::string PERCENTOFPROSPECTUSPREPAYMENTCURVE{ "PPC" };
				static inline const std::string POOLSPERLOT{ "PPL" };
				static inline const std::string POOLSPERMILLION{ "PPM" };
				static inline const std::string POOLSPERTRADE{ "PPT" };
				static inline const std::string PRICERANGE{ "PRICE" };
				static inline const std::string PRICINGFREQUENCY{ "PRICEFREQ" };
				static inline const std::string PRODUCTIONYEAR{ "PROD" };
				static inline const std::string CALLPROTECTION{ "PROTECT" };
				static inline const std::string PERCENTOFBMAPREPAYMENTCURVE{ "PSA" };
				static inline const std::string PURPOSE{ "PURPOSE" };
				static inline const std::string BENCHMARKPRICESOURCE{ "PXSOURCE" };
				static inline const std::string RATINGSOURCEANDRANGE{ "RATING" };
				static inline const std::string TYPEOFREDEMPTIONVALUESARE{ "REDEMPTION" };
				static inline const std::string RESTRICTED{ "RESTRICTED" };
				static inline const std::string MARKETSECTOR{ "SECTOR" };
				static inline const std::string SECURITYTYPEINCLUDEDOREXCLUDED{ "SECTYPE" };
				static inline const std::string SINGLEMONTHLYMORTALITY{ "SMM" };
				static inline const std::string STRUCTURE{ "STRUCT" };
				static inline const std::string SUBSTITUTIONSFREQUENCYREPO{ "SUBSFREQ" };
				static inline const std::string SUBSTITUTIONSLEFTREPO{ "SUBSLEFT" };
				static inline const std::string FREEFORMTEXT{ "TEXT" };
				static inline const std::string TRADEVARIANCEVALUEINPERCENTMAXIMUMOVERORUNDERALLOCATIONALLOWED{ "TRDVAR" };
				static inline const std::string WEIGHTEDAVERAGECOUPON{ "WAC" };
				static inline const std::string WEIGHTEDAVERAGELIFECOUPON{ "WAL" };
				static inline const std::string WEIGHTEDAVERAGELOANAGE{ "WALA" };
				static inline const std::string WEIGHTEDAVERAGEMATURITY{ "WAM" };
				static inline const std::string WHOLEPOOL{ "WHOLE" };
				static inline const std::string YIELDRANGE{ "YIELD" };
			};

			// StipulationValue(234): STRING
			struct StipulationValue
			{
				static constexpr uint16_t tag{ 234 };
			};

			// YieldType(235): STRING
			struct YieldType
			{
				static constexpr uint16_t tag{ 235 };
				static inline const std::string AFTERTAXYIELD{ "AFTERTAX" };
				static inline const std::string ANNUALYIELD{ "ANNUAL" };
				static inline const std::string YIELDATISSUE{ "ATISSUE" };
				static inline const std::string YIELDTOAVGMATURITY{ "AVGMATURITY" };
				static inline const std::string BOOKYIELD{ "BOOK" };
				static inline const std::string YIELDTONEXTCALL{ "CALL" };
				static inline const std::string YIELDCHANGESINCECLOSE{ "CHANGE" };
				static inline const std::string CLOSINGYIELD{ "CLOSE" };
				static inline const std::string COMPOUNDYIELD{ "COMPOUND" };
				static inline const std::string CURRENTYIELD{ "CURRENT" };
				static inline const std::string GVNTEQUIVALENTYIELD{ "GOVTEQUIV" };
				static inline const std::string TRUEGROSSYIELD{ "GROSS" };
				static inline const std::string YIELDINFLATIONASSUMPTION{ "INFLATION" };
				static inline const std::string INVFLOATERBONDYIELD{ "INVERSEFLOATER" };
				static inline const std::string MOSTRECENTCLOSINGYIELD{ "LASTCLOSE" };
				static inline const std::string CLOSINGYIELDMOSTRECENTMONTH{ "LASTMONTH" };
				static inline const std::string CLOSINGYIELDMOSTRECENTQUARTER{ "LASTQUARTER" };
				static inline const std::string CLOSINGYIELDMOSTRECENTYEAR{ "LASTYEAR" };
				static inline const std::string YIELDTOLONGESTAVERAGELIFE{ "LONGAVGLIFE" };
				static inline const std::string MARKTOMARKETYIELD{ "MARK" };
				static inline const std::string YIELDTOMATURITY{ "MATURITY" };
				static inline const std::string YIELDTONEXTREFUNDSINKING{ "NEXTREFUND" };
				static inline const std::string OPENAVERAGEYIELD{ "OPENAVG" };
				static inline const std::string PREVIOUSCLOSEYIELD{ "PREVCLOSE" };
				static inline const std::string PROCEEDSYIELD{ "PROCEEDS" };
				static inline const std::string YIELDTONEXTPUT{ "PUT" };
				static inline const std::string SEMI{ "SEMIANNUAL" };
				static inline const std::string YIELDTOSHORTESTAVERAGELIFE{ "SHORTAVGLIFE" };
				static inline const std::string SIMPLEYIELD{ "SIMPLE" };
				static inline const std::string TAXEQUIVALENTYIELD{ "TAXEQUIV" };
				static inline const std::string YIELDTOTENDERDATE{ "TENDER" };
				static inline const std::string TRUEYIELD{ "TRUE" };
				static inline const std::string YIELDVALUEOF132{ "VALUE1_32" };
				static inline const std::string YIELDTOWORSTCONVENTION{ "WORST" };
			};

			// Yield(236): PERCENTAGE
			struct Yield
			{
				static constexpr uint16_t tag{ 236 };
			};

			// TotalTakedown(237): AMT
			struct TotalTakedown
			{
				static constexpr uint16_t tag{ 237 };
			};

			// Concession(238): AMT
			struct Concession
			{
				static constexpr uint16_t tag{ 238 };
			};

			// RepoCollateralSecurityType(239): INT
			struct RepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 239 };
			};

			// RedemptionDate(240): LOCALMKTDATE
			struct RedemptionDate
			{
				static constexpr uint16_t tag{ 240 };
			};

			// UnderlyingCouponPaymentDate(241): LOCALMKTDATE
			struct UnderlyingCouponPaymentDate
			{
				static constexpr uint16_t tag{ 241 };
			};

			// UnderlyingIssueDate(242): LOCALMKTDATE
			struct UnderlyingIssueDate
			{
				static constexpr uint16_t tag{ 242 };
			};

			// UnderlyingRepoCollateralSecurityType(243): INT
			struct UnderlyingRepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 243 };
			};

			// UnderlyingRepurchaseTerm(244): INT
			struct UnderlyingRepurchaseTerm
			{
				static constexpr uint16_t tag{ 244 };
			};

			// UnderlyingRepurchaseRate(245): PERCENTAGE
			struct UnderlyingRepurchaseRate
			{
				static constexpr uint16_t tag{ 245 };
			};

			// UnderlyingFactor(246): FLOAT
			struct UnderlyingFactor
			{
				static constexpr uint16_t tag{ 246 };
			};

			// UnderlyingRedemptionDate(247): LOCALMKTDATE
			struct UnderlyingRedemptionDate
			{
				static constexpr uint16_t tag{ 247 };
			};

			// LegCouponPaymentDate(248): LOCALMKTDATE
			struct LegCouponPaymentDate
			{
				static constexpr uint16_t tag{ 248 };
			};

			// LegIssueDate(249): LOCALMKTDATE
			struct LegIssueDate
			{
				static constexpr uint16_t tag{ 249 };
			};

			// LegRepoCollateralSecurityType(250): INT
			struct LegRepoCollateralSecurityType
			{
				static constexpr uint16_t tag{ 250 };
			};

			// LegRepurchaseTerm(251): INT
			struct LegRepurchaseTerm
			{
				static constexpr uint16_t tag{ 251 };
			};

			// LegRepurchaseRate(252): PERCENTAGE
			struct LegRepurchaseRate
			{
				static constexpr uint16_t tag{ 252 };
			};

			// LegFactor(253): FLOAT
			struct LegFactor
			{
				static constexpr uint16_t tag{ 253 };
			};

			// LegRedemptionDate(254): LOCALMKTDATE
			struct LegRedemptionDate
			{
				static constexpr uint16_t tag{ 254 };
			};

			// CreditRating(255): STRING
			struct CreditRating
			{
				static constexpr uint16_t tag{ 255 };
			};

			// UnderlyingCreditRating(256): STRING
			struct UnderlyingCreditRating
			{
				static constexpr uint16_t tag{ 256 };
			};

			// LegCreditRating(257): STRING
			struct LegCreditRating
			{
				static constexpr uint16_t tag{ 257 };
			};

			// TradedFlatSwitch(258): BOOLEAN
			struct TradedFlatSwitch
			{
				static constexpr uint16_t tag{ 258 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// BasisFeatureDate(259): LOCALMKTDATE
			struct BasisFeatureDate
			{
				static constexpr uint16_t tag{ 259 };
			};

			// BasisFeaturePrice(260): PRICE
			struct BasisFeaturePrice
			{
				static constexpr uint16_t tag{ 260 };
			};

			// MDReqID(262): STRING
			struct MDReqID
			{
				static constexpr uint16_t tag{ 262 };
			};

			// SubscriptionRequestType(263): CHAR
			struct SubscriptionRequestType
			{
				static constexpr uint16_t tag{ 263 };
				static constexpr char SNAPSHOT{ '0' };
				static constexpr char SNAPSHOTUPDATE{ '1' };
				static constexpr char UNSUBSCRIBE{ '2' };
			};

			// MarketDepth(264): INT
			struct MarketDepth
			{
				static constexpr uint16_t tag{ 264 };
			};

			// MDUpdateType(265): INT
			struct MDUpdateType
			{
				static constexpr uint16_t tag{ 265 };
				static constexpr int32_t FULL{ 0 };
				static constexpr int32_t INCREMENTAL{ 1 };
			};

			// AggregatedBook(266): BOOLEAN
			struct AggregatedBook
			{
				static constexpr uint16_t tag{ 266 };
			};

			// NoMDEntryTypes(267): NUMINGROUP
			struct NoMDEntryTypes
			{
				static constexpr uint16_t tag{ 267 };
			};

			// NoMDEntries(268): NUMINGROUP
			struct NoMDEntries
			{
				static constexpr uint16_t tag{ 268 };
			};

			// MDEntryType(269): CHAR
			struct MDEntryType
			{
				static constexpr uint16_t tag{ 269 };
				static constexpr char BID{ '0' };
				static constexpr char OFFER{ '1' };
				static constexpr char TRADE{ '2' };
				static constexpr char INDEXVALUE{ '3' };
				static constexpr char OPENING{ '4' };
				static constexpr char CLOSING{ '5' };
				static constexpr char SETTLEMENT{ '6' };
				static constexpr char TRADINGHIGH{ '7' };
				static constexpr char TRADINGLOW{ '8' };
				static constexpr char TRADINGVWAP{ '9' };
				static constexpr char IMBALANCE{ 'A' };
				static constexpr char TRADEVOLUME{ 'B' };
				static constexpr char OPENINTEREST{ 'C' };
			};

			// MDEntryPx(270): PRICE
			struct MDEntryPx
			{
				static constexpr uint16_t tag{ 270 };
			};

			// MDEntrySize(271): QTY
			struct MDEntrySize
			{
				static constexpr uint16_t tag{ 271 };
			};

			// MDEntryDate(272): UTCDATEONLY
			struct MDEntryDate
			{
				static constexpr uint16_t tag{ 272 };
			};

			// MDEntryTime(273): UTCTIMEONLY
			struct MDEntryTime
			{
				static constexpr uint16_t tag{ 273 };
			};

			// TickDirection(274): CHAR
			struct TickDirection
			{
				static constexpr uint16_t tag{ 274 };
				static constexpr char PLUS{ '0' };
				static constexpr char ZEROPLUS{ '1' };
				static constexpr char MINUS{ '2' };
				static constexpr char ZEROMINUS{ '3' };
			};

			// MDMkt(275): EXCHANGE
			struct MDMkt
			{
				static constexpr uint16_t tag{ 275 };
			};

			// QuoteCondition(276): MULTIPLESTRINGVALUE
			struct QuoteCondition
			{
				static constexpr uint16_t tag{ 276 };
				static inline const std::string OPEN{ "A" };
				static inline const std::string CLOSED{ "B" };
				static inline const std::string EXCHBEST{ "C" };
				static inline const std::string CONSOLBEST{ "D" };
				static inline const std::string LOCKED{ "E" };
				static inline const std::string CROSSED{ "F" };
				static inline const std::string DEPTH{ "G" };
				static inline const std::string FAST{ "H" };
				static inline const std::string NONFIRM{ "I" };
			};

			// TradeCondition(277): MULTIPLESTRINGVALUE
			struct TradeCondition
			{
				static constexpr uint16_t tag{ 277 };
				static inline const std::string CASHMKT{ "A" };
				static inline const std::string AVGPX{ "B" };
				static inline const std::string CASHTRADE{ "C" };
				static inline const std::string NEXTDAY_D{ "D" };
				static inline const std::string OPENING{ "E" };
				static inline const std::string INTRADAY{ "F" };
				static inline const std::string RULE127{ "G" };
				static inline const std::string RULE155{ "H" };
				static inline const std::string SOLDLAST{ "I" };
				static inline const std::string NEXTDAY_J{ "J" };
				static inline const std::string OPENED{ "K" };
				static inline const std::string SELLER{ "L" };
				static inline const std::string SOLD{ "M" };
				static inline const std::string STOPPED{ "N" };
				static inline const std::string IMBALANCEMOREBUYERS{ "P" };
				static inline const std::string IMBALANCEMORESELLERS{ "Q" };
				static inline const std::string OPENINGPRICE{ "R" };
			};

			// MDEntryID(278): STRING
			struct MDEntryID
			{
				static constexpr uint16_t tag{ 278 };
			};

			// MDUpdateAction(279): CHAR
			struct MDUpdateAction
			{
				static constexpr uint16_t tag{ 279 };
				static constexpr char NEW{ '0' };
				static constexpr char CHANGE{ '1' };
				static constexpr char DELETE{ '2' };
			};

			// MDEntryRefID(280): STRING
			struct MDEntryRefID
			{
				static constexpr uint16_t tag{ 280 };
			};

			// MDReqRejReason(281): CHAR
			struct MDReqRejReason
			{
				static constexpr uint16_t tag{ 281 };
				static constexpr char UNKNOWNSYM{ '0' };
				static constexpr char DUPID{ '1' };
				static constexpr char INSBAND{ '2' };
				static constexpr char INSPERM{ '3' };
				static constexpr char UNSUPPSUB{ '4' };
				static constexpr char UNSUPPMKTDEPTH{ '5' };
				static constexpr char UNSUPPMDUPDATE{ '6' };
				static constexpr char UNSUPPAGGBK{ '7' };
				static constexpr char UNSUPPENTRY{ '8' };
				static constexpr char UNSUPPTRDSESSIONID{ '9' };
				static constexpr char UNSUPPSCOPE{ 'A' };
				static constexpr char UNSUPPPOSITIONEFFECTSETTLEFLAG{ 'B' };
				static constexpr char UNSUPPMDIMPLICITDELETE{ 'C' };
			};

			// MDEntryOriginator(282): STRING
			struct MDEntryOriginator
			{
				static constexpr uint16_t tag{ 282 };
			};

			// LocationID(283): STRING
			struct LocationID
			{
				static constexpr uint16_t tag{ 283 };
			};

			// DeskID(284): STRING
			struct DeskID
			{
				static constexpr uint16_t tag{ 284 };
			};

			// DeleteReason(285): CHAR
			struct DeleteReason
			{
				static constexpr uint16_t tag{ 285 };
				static constexpr char CANCELTRADEBUST{ '0' };
				static constexpr char ERROR{ '1' };
			};

			// OpenCloseSettlFlag(286): MULTIPLESTRINGVALUE
			struct OpenCloseSettlFlag
			{
				static constexpr uint16_t tag{ 286 };
				static inline const std::string DAILYOPEN{ "0" };
				static inline const std::string SESSIONOPEN{ "1" };
				static inline const std::string DELIVERYSETTLEMENT{ "2" };
				static inline const std::string EXPECTEDENTRY{ "3" };
				static inline const std::string ENTRYFROMPREVBUSINESSDAY{ "4" };
				static inline const std::string THEORETICALPRICE{ "5" };
			};

			// SellerDays(287): INT
			struct SellerDays
			{
				static constexpr uint16_t tag{ 287 };
			};

			// MDEntryBuyer(288): STRING
			struct MDEntryBuyer
			{
				static constexpr uint16_t tag{ 288 };
			};

			// MDEntrySeller(289): STRING
			struct MDEntrySeller
			{
				static constexpr uint16_t tag{ 289 };
			};

			// MDEntryPositionNo(290): INT
			struct MDEntryPositionNo
			{
				static constexpr uint16_t tag{ 290 };
			};

			// FinancialStatus(291): MULTIPLESTRINGVALUE
			struct FinancialStatus
			{
				static constexpr uint16_t tag{ 291 };
				static inline const std::string BANKRUPT{ "1" };
				static inline const std::string PENDINGDELISTING{ "2" };
			};

			// CorporateAction(292): MULTIPLESTRINGVALUE
			struct CorporateAction
			{
				static constexpr uint16_t tag{ 292 };
				static inline const std::string EXDIVIDEND{ "A" };
				static inline const std::string EXDIST{ "B" };
				static inline const std::string EXRIGHTS{ "C" };
				static inline const std::string NEW{ "D" };
				static inline const std::string EXINTEREST{ "E" };
			};

			// DefBidSize(293): QTY
			struct DefBidSize
			{
				static constexpr uint16_t tag{ 293 };
			};

			// DefOfferSize(294): QTY
			struct DefOfferSize
			{
				static constexpr uint16_t tag{ 294 };
			};

			// NoQuoteEntries(295): NUMINGROUP
			struct NoQuoteEntries
			{
				static constexpr uint16_t tag{ 295 };
			};

			// NoQuoteSets(296): NUMINGROUP
			struct NoQuoteSets
			{
				static constexpr uint16_t tag{ 296 };
			};

			// QuoteStatus(297): INT
			struct QuoteStatus
			{
				static constexpr uint16_t tag{ 297 };
				static constexpr int32_t ACCPT{ 0 };
				static constexpr int32_t CXLSYM{ 1 };
				static constexpr int32_t PENDING{ 10 };
				static constexpr int32_t PASS{ 11 };
				static constexpr int32_t LOCKEDMARKETWARNING{ 12 };
				static constexpr int32_t CROSSMARKETWARNING{ 13 };
				static constexpr int32_t CANCELEDDUETOLOCKMARKET{ 14 };
				static constexpr int32_t CANCELEDDUETOCROSSMARKET{ 15 };
				static constexpr int32_t CXLSECTYPE{ 2 };
				static constexpr int32_t CXLUNDER{ 3 };
				static constexpr int32_t CXLALL{ 4 };
				static constexpr int32_t REJ{ 5 };
				static constexpr int32_t REMOVED{ 6 };
				static constexpr int32_t EXPIRED{ 7 };
				static constexpr int32_t QUERY{ 8 };
				static constexpr int32_t QUOTENOTFOUND{ 9 };
			};

			// QuoteCancelType(298): INT
			struct QuoteCancelType
			{
				static constexpr uint16_t tag{ 298 };
				static constexpr int32_t CXLSYM{ 1 };
				static constexpr int32_t CXLSECTYPE{ 2 };
				static constexpr int32_t CXLUNDER{ 3 };
				static constexpr int32_t CXLALL{ 4 };
			};

			// QuoteEntryID(299): STRING
			struct QuoteEntryID
			{
				static constexpr uint16_t tag{ 299 };
			};

			// QuoteRejectReason(300): INT
			struct QuoteRejectReason
			{
				static constexpr uint16_t tag{ 300 };
				static constexpr int32_t UNKNSYM{ 1 };
				static constexpr int32_t EXCHCLSD{ 2 };
				static constexpr int32_t ORDEXLIM{ 3 };
				static constexpr int32_t TOOLATE{ 4 };
				static constexpr int32_t UNKNORD{ 5 };
				static constexpr int32_t DUPORD{ 6 };
				static constexpr int32_t INVSPREAD{ 7 };
				static constexpr int32_t INVPX{ 8 };
				static constexpr int32_t NOTAUTH{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// QuoteResponseLevel(301): INT
			struct QuoteResponseLevel
			{
				static constexpr uint16_t tag{ 301 };
				static constexpr int32_t NOACK{ 0 };
				static constexpr int32_t ACKNEG{ 1 };
				static constexpr int32_t ACKEACH{ 2 };
			};

			// QuoteSetID(302): STRING
			struct QuoteSetID
			{
				static constexpr uint16_t tag{ 302 };
			};

			// QuoteRequestType(303): INT
			struct QuoteRequestType
			{
				static constexpr uint16_t tag{ 303 };
				static constexpr int32_t MAN{ 1 };
				static constexpr int32_t AUTO{ 2 };
			};

			// TotNoQuoteEntries(304): INT
			struct TotNoQuoteEntries
			{
				static constexpr uint16_t tag{ 304 };
			};

			// UnderlyingSecurityIDSource(305): STRING
			struct UnderlyingSecurityIDSource
			{
				static constexpr uint16_t tag{ 305 };
			};

			// UnderlyingIssuer(306): STRING
			struct UnderlyingIssuer
			{
				static constexpr uint16_t tag{ 306 };
			};

			// UnderlyingSecurityDesc(307): STRING
			struct UnderlyingSecurityDesc
			{
				static constexpr uint16_t tag{ 307 };
			};

			// UnderlyingSecurityExchange(308): EXCHANGE
			struct UnderlyingSecurityExchange
			{
				static constexpr uint16_t tag{ 308 };
			};

			// UnderlyingSecurityID(309): STRING
			struct UnderlyingSecurityID
			{
				static constexpr uint16_t tag{ 309 };
			};

			// UnderlyingSecurityType(310): STRING
			struct UnderlyingSecurityType
			{
				static constexpr uint16_t tag{ 310 };
			};

			// UnderlyingSymbol(311): STRING
			struct UnderlyingSymbol
			{
				static constexpr uint16_t tag{ 311 };
			};

			// UnderlyingSymbolSfx(312): STRING
			struct UnderlyingSymbolSfx
			{
				static constexpr uint16_t tag{ 312 };
			};

			// UnderlyingMaturityMonthYear(313): MONTHYEAR
			struct UnderlyingMaturityMonthYear
			{
				static constexpr uint16_t tag{ 313 };
			};

			// UnderlyingMaturityDay(314): DAYOFMONTH
			struct UnderlyingMaturityDay
			{
				static constexpr uint16_t tag{ 314 };
			};

			// UnderlyingPutOrCall(315): INT
			struct UnderlyingPutOrCall
			{
				static constexpr uint16_t tag{ 315 };
			};

			// UnderlyingStrikePrice(316): PRICE
			struct UnderlyingStrikePrice
			{
				static constexpr uint16_t tag{ 316 };
			};

			// UnderlyingOptAttribute(317): CHAR
			struct UnderlyingOptAttribute
			{
				static constexpr uint16_t tag{ 317 };
			};

			// UnderlyingCurrency(318): CURRENCY
			struct UnderlyingCurrency
			{
				static constexpr uint16_t tag{ 318 };
			};

			// RatioQty(319): QTY
			struct RatioQty
			{
				static constexpr uint16_t tag{ 319 };
			};

			// SecurityReqID(320): STRING
			struct SecurityReqID
			{
				static constexpr uint16_t tag{ 320 };
			};

			// SecurityRequestType(321): INT
			struct SecurityRequestType
			{
				static constexpr uint16_t tag{ 321 };
				static constexpr int32_t REQSECID{ 0 };
				static constexpr int32_t REQSECIDPROV{ 1 };
				static constexpr int32_t REQSECLISTTYPES{ 2 };
				static constexpr int32_t REQSECLIST{ 3 };
			};

			// SecurityResponseID(322): STRING
			struct SecurityResponseID
			{
				static constexpr uint16_t tag{ 322 };
			};

			// SecurityResponseType(323): INT
			struct SecurityResponseType
			{
				static constexpr uint16_t tag{ 323 };
				static constexpr int32_t ACCPTSECPROP{ 1 };
				static constexpr int32_t ACCPTSECPROPREV{ 2 };
				static constexpr int32_t SECLISTTYPESRET{ 3 };
				static constexpr int32_t SECLISTRET{ 4 };
				static constexpr int32_t REJSECPROP{ 5 };
				static constexpr int32_t NOMATCH{ 6 };
			};

			// SecurityStatusReqID(324): STRING
			struct SecurityStatusReqID
			{
				static constexpr uint16_t tag{ 324 };
			};

			// UnsolicitedIndicator(325): BOOLEAN
			struct UnsolicitedIndicator
			{
				static constexpr uint16_t tag{ 325 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// SecurityTradingStatus(326): INT
			struct SecurityTradingStatus
			{
				static constexpr uint16_t tag{ 326 };
				static constexpr int32_t OPENDELAY{ 1 };
				static constexpr int32_t MKTONCLSIMBSELL{ 10 };
				static constexpr int32_t NA{ 11 };
				static constexpr int32_t NOMKTIMB{ 12 };
				static constexpr int32_t NOMKTONCLSIMB{ 13 };
				static constexpr int32_t ITSPREOPN{ 14 };
				static constexpr int32_t NEWPXIND{ 15 };
				static constexpr int32_t TRDDISTIME{ 16 };
				static constexpr int32_t READY{ 17 };
				static constexpr int32_t NOTAVAIL{ 18 };
				static constexpr int32_t NOTTRADED{ 19 };
				static constexpr int32_t TRDHALT{ 2 };
				static constexpr int32_t UNKNOWN{ 20 };
				static constexpr int32_t PRE_OPEN{ 21 };
				static constexpr int32_t OPENINGROTATION{ 22 };
				static constexpr int32_t FASTMARKET{ 23 };
				static constexpr int32_t RESUME{ 3 };
				static constexpr int32_t NOOPEN{ 4 };
				static constexpr int32_t PXIND{ 5 };
				static constexpr int32_t TRDRNGIND{ 6 };
				static constexpr int32_t MKTIMBBUY{ 7 };
				static constexpr int32_t MKTBALSELL{ 8 };
				static constexpr int32_t MKTONCLSIMBBUY{ 9 };
			};

			// HaltReasonChar(327): CHAR
			struct HaltReasonChar
			{
				static constexpr uint16_t tag{ 327 };
				static constexpr char NEWSDISS{ 'D' };
				static constexpr char ORDINFL{ 'E' };
				static constexpr char ORDIMB{ 'I' };
				static constexpr char ADDINFO{ 'M' };
				static constexpr char NEWSPEND{ 'P' };
				static constexpr char EQUIPCHANGE{ 'X' };
			};

			// InViewOfCommon(328): BOOLEAN
			struct InViewOfCommon
			{
				static constexpr uint16_t tag{ 328 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// DueToRelated(329): BOOLEAN
			struct DueToRelated
			{
				static constexpr uint16_t tag{ 329 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// BuyVolume(330): QTY
			struct BuyVolume
			{
				static constexpr uint16_t tag{ 330 };
			};

			// SellVolume(331): QTY
			struct SellVolume
			{
				static constexpr uint16_t tag{ 331 };
			};

			// HighPx(332): PRICE
			struct HighPx
			{
				static constexpr uint16_t tag{ 332 };
			};

			// LowPx(333): PRICE
			struct LowPx
			{
				static constexpr uint16_t tag{ 333 };
			};

			// Adjustment(334): INT
			struct Adjustment
			{
				static constexpr uint16_t tag{ 334 };
				static constexpr int32_t CANCEL{ 1 };
				static constexpr int32_t ERROR{ 2 };
				static constexpr int32_t CORRECTION{ 3 };
			};

			// TradSesReqID(335): STRING
			struct TradSesReqID
			{
				static constexpr uint16_t tag{ 335 };
			};

			// TradingSessionID(336): STRING
			struct TradingSessionID
			{
				static constexpr uint16_t tag{ 336 };
			};

			// ContraTrader(337): STRING
			struct ContraTrader
			{
				static constexpr uint16_t tag{ 337 };
			};

			// TradSesMethod(338): INT
			struct TradSesMethod
			{
				static constexpr uint16_t tag{ 338 };
				static constexpr int32_t ELECTRONIC{ 1 };
				static constexpr int32_t OPENOUTCRY{ 2 };
				static constexpr int32_t TWOPARTY{ 3 };
			};

			// TradSesMode(339): INT
			struct TradSesMode
			{
				static constexpr uint16_t tag{ 339 };
				static constexpr int32_t TESTING{ 1 };
				static constexpr int32_t SIMULATED{ 2 };
				static constexpr int32_t PRODUCTION{ 3 };
			};

			// TradSesStatus(340): INT
			struct TradSesStatus
			{
				static constexpr uint16_t tag{ 340 };
				static constexpr int32_t UNKNOWN{ 0 };
				static constexpr int32_t HALTED{ 1 };
				static constexpr int32_t OPEN{ 2 };
				static constexpr int32_t CLOSED{ 3 };
				static constexpr int32_t PREOPEN{ 4 };
				static constexpr int32_t PRECLOSE{ 5 };
				static constexpr int32_t REQREJ{ 6 };
			};

			// TradSesStartTime(341): UTCTIMESTAMP
			struct TradSesStartTime
			{
				static constexpr uint16_t tag{ 341 };
			};

			// TradSesOpenTime(342): UTCTIMESTAMP
			struct TradSesOpenTime
			{
				static constexpr uint16_t tag{ 342 };
			};

			// TradSesPreCloseTime(343): UTCTIMESTAMP
			struct TradSesPreCloseTime
			{
				static constexpr uint16_t tag{ 343 };
			};

			// TradSesCloseTime(344): UTCTIMESTAMP
			struct TradSesCloseTime
			{
				static constexpr uint16_t tag{ 344 };
			};

			// TradSesEndTime(345): UTCTIMESTAMP
			struct TradSesEndTime
			{
				static constexpr uint16_t tag{ 345 };
			};

			// NumberOfOrders(346): INT
			struct NumberOfOrders
			{
				static constexpr uint16_t tag{ 346 };
			};

			// MessageEncoding(347): STRING
			struct MessageEncoding
			{
				static constexpr uint16_t tag{ 347 };
			};

			// EncodedIssuerLen(348): LENGTH
			struct EncodedIssuerLen
			{
				static constexpr uint16_t tag{ 348 };
			};

			// EncodedIssuer(349): DATA
			struct EncodedIssuer
			{
				static constexpr uint16_t tag{ 349 };
			};

			// EncodedSecurityDescLen(350): LENGTH
			struct EncodedSecurityDescLen
			{
				static constexpr uint16_t tag{ 350 };
			};

			// EncodedSecurityDesc(351): DATA
			struct EncodedSecurityDesc
			{
				static constexpr uint16_t tag{ 351 };
			};

			// EncodedListExecInstLen(352): LENGTH
			struct EncodedListExecInstLen
			{
				static constexpr uint16_t tag{ 352 };
			};

			// EncodedListExecInst(353): DATA
			struct EncodedListExecInst
			{
				static constexpr uint16_t tag{ 353 };
			};

			// EncodedTextLen(354): LENGTH
			struct EncodedTextLen
			{
				static constexpr uint16_t tag{ 354 };
			};

			// EncodedText(355): DATA
			struct EncodedText
			{
				static constexpr uint16_t tag{ 355 };
			};

			// EncodedSubjectLen(356): LENGTH
			struct EncodedSubjectLen
			{
				static constexpr uint16_t tag{ 356 };
			};

			// EncodedSubject(357): DATA
			struct EncodedSubject
			{
				static constexpr uint16_t tag{ 357 };
			};

			// EncodedHeadlineLen(358): LENGTH
			struct EncodedHeadlineLen
			{
				static constexpr uint16_t tag{ 358 };
			};

			// EncodedHeadline(359): DATA
			struct EncodedHeadline
			{
				static constexpr uint16_t tag{ 359 };
			};

			// EncodedAllocTextLen(360): LENGTH
			struct EncodedAllocTextLen
			{
				static constexpr uint16_t tag{ 360 };
			};

			// EncodedAllocText(361): DATA
			struct EncodedAllocText
			{
				static constexpr uint16_t tag{ 361 };
			};

			// EncodedUnderlyingIssuerLen(362): LENGTH
			struct EncodedUnderlyingIssuerLen
			{
				static constexpr uint16_t tag{ 362 };
			};

			// EncodedUnderlyingIssuer(363): DATA
			struct EncodedUnderlyingIssuer
			{
				static constexpr uint16_t tag{ 363 };
			};

			// EncodedUnderlyingSecurityDescLen(364): LENGTH
			struct EncodedUnderlyingSecurityDescLen
			{
				static constexpr uint16_t tag{ 364 };
			};

			// EncodedUnderlyingSecurityDesc(365): DATA
			struct EncodedUnderlyingSecurityDesc
			{
				static constexpr uint16_t tag{ 365 };
			};

			// AllocPrice(366): PRICE
			struct AllocPrice
			{
				static constexpr uint16_t tag{ 366 };
			};

			// QuoteSetValidUntilTime(367): UTCTIMESTAMP
			struct QuoteSetValidUntilTime
			{
				static constexpr uint16_t tag{ 367 };
			};

			// QuoteEntryRejectReason(368): INT
			struct QuoteEntryRejectReason
			{
				static constexpr uint16_t tag{ 368 };
				static constexpr int32_t UNKNWNSYM{ 1 };
				static constexpr int32_t EXCHCLSD{ 2 };
				static constexpr int32_t ORDEXCLIM{ 3 };
				static constexpr int32_t TOOLATE{ 4 };
				static constexpr int32_t UNKNORD{ 5 };
				static constexpr int32_t DUPORD{ 6 };
				static constexpr int32_t INVBIDASK{ 7 };
				static constexpr int32_t INVPX{ 8 };
				static constexpr int32_t NOTAUTH{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// LastMsgSeqNumProcessed(369): SEQNUM
			struct LastMsgSeqNumProcessed
			{
				static constexpr uint16_t tag{ 369 };
			};

			// OnBehalfOfSendingTime(370): UTCTIMESTAMP
			struct OnBehalfOfSendingTime
			{
				static constexpr uint16_t tag{ 370 };
			};

			// RefTagID(371): INT
			struct RefTagID
			{
				static constexpr uint16_t tag{ 371 };
			};

			// RefMsgType(372): STRING
			struct RefMsgType
			{
				static constexpr uint16_t tag{ 372 };
			};

			// SessionRejectReason(373): INT
			struct SessionRejectReason
			{
				static constexpr uint16_t tag{ 373 };
				static constexpr int32_t INVALIDTAGNUMBER{ 0 };
				static constexpr int32_t REQUIREDTAGMISSING{ 1 };
				static constexpr int32_t SENDINGTIMEACCURACYPROBLEM{ 10 };
				static constexpr int32_t INVALIDMSGTYPE{ 11 };
				static constexpr int32_t XMLVALIDATIONERROR{ 12 };
				static constexpr int32_t TAGAPPEARSMORETHANONCE{ 13 };
				static constexpr int32_t TAGSPECIFIEDOUTOFREQUIREDORDER{ 14 };
				static constexpr int32_t REPEATINGGROUPFIELDSOUTOFORDER{ 15 };
				static constexpr int32_t INCORRECTNUMINGROUPCOUNTFORREPEATINGGROUP{ 16 };
				static constexpr int32_t NONDATAVALUEINCLUDESFIELDDELIMITERSOHCHARACTER{ 17 };
				static constexpr int32_t TAGNOTDEFINEDFORTHISMESSAGETYPE{ 2 };
				static constexpr int32_t UNDEFINEDTAG{ 3 };
				static constexpr int32_t TAGSPECIFIEDWITHOUTAVALUE{ 4 };
				static constexpr int32_t VALUEISINCORRECTOUTOFRANGEFORTHISTAG{ 5 };
				static constexpr int32_t INCORRECTDATAFORMATFORVALUE{ 6 };
				static constexpr int32_t DECRYPTIONPROBLEM{ 7 };
				static constexpr int32_t SIGNATUREPROBLEM{ 8 };
				static constexpr int32_t COMPIDPROBLEM{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// BidRequestTransType(374): CHAR
			struct BidRequestTransType
			{
				static constexpr uint16_t tag{ 374 };
				static constexpr char CANCEL{ 'C' };
				static constexpr char NO{ 'N' };
			};

			// ContraBroker(375): STRING
			struct ContraBroker
			{
				static constexpr uint16_t tag{ 375 };
			};

			// ComplianceID(376): STRING
			struct ComplianceID
			{
				static constexpr uint16_t tag{ 376 };
			};

			// SolicitedFlag(377): BOOLEAN
			struct SolicitedFlag
			{
				static constexpr uint16_t tag{ 377 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// ExecRestatementReason(378): INT
			struct ExecRestatementReason
			{
				static constexpr uint16_t tag{ 378 };
				static constexpr int32_t GTCORPACT{ 0 };
				static constexpr int32_t GTRENEW{ 1 };
				static constexpr int32_t WAREHOUSERECAP{ 10 };
				static constexpr int32_t VERBAL{ 2 };
				static constexpr int32_t REPX{ 3 };
				static constexpr int32_t BRKROPT{ 4 };
				static constexpr int32_t PARTDEC{ 5 };
				static constexpr int32_t CXLTRADINGHALT{ 6 };
				static constexpr int32_t CXLSYSTEMFAILURE{ 7 };
				static constexpr int32_t MRKTOPTION{ 8 };
				static constexpr int32_t CANCELEDNOTBEST{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// BusinessRejectRefID(379): STRING
			struct BusinessRejectRefID
			{
				static constexpr uint16_t tag{ 379 };
			};

			// BusinessRejectReason(380): INT
			struct BusinessRejectReason
			{
				static constexpr uint16_t tag{ 380 };
				static constexpr int32_t OTHER{ 0 };
				static constexpr int32_t UNKNID{ 1 };
				static constexpr int32_t UNKNSEC{ 2 };
				static constexpr int32_t UNKNMSGTYPE{ 3 };
				static constexpr int32_t APPNA{ 4 };
				static constexpr int32_t CONDFLDMISS{ 5 };
				static constexpr int32_t NOTAUTH{ 6 };
				static constexpr int32_t NODELIVTOFIRM{ 7 };
			};

			// GrossTradeAmt(381): AMT
			struct GrossTradeAmt
			{
				static constexpr uint16_t tag{ 381 };
			};

			// NoContraBrokers(382): NUMINGROUP
			struct NoContraBrokers
			{
				static constexpr uint16_t tag{ 382 };
			};

			// MaxMessageSize(383): LENGTH
			struct MaxMessageSize
			{
				static constexpr uint16_t tag{ 383 };
			};

			// NoMsgTypes(384): NUMINGROUP
			struct NoMsgTypes
			{
				static constexpr uint16_t tag{ 384 };
			};

			// MsgDirection(385): CHAR
			struct MsgDirection
			{
				static constexpr uint16_t tag{ 385 };
				static constexpr char RECEIVE{ 'R' };
				static constexpr char SEND{ 'S' };
			};

			// NoTradingSessions(386): NUMINGROUP
			struct NoTradingSessions
			{
				static constexpr uint16_t tag{ 386 };
			};

			// TotalVolumeTraded(387): QTY
			struct TotalVolumeTraded
			{
				static constexpr uint16_t tag{ 387 };
			};

			// DiscretionInst(388): CHAR
			struct DiscretionInst
			{
				static constexpr uint16_t tag{ 388 };
				static constexpr char RELDISPPX{ '0' };
				static constexpr char RELMKTPX{ '1' };
				static constexpr char RELPRIMPX{ '2' };
				static constexpr char RELLOCPRIMPX{ '3' };
				static constexpr char RELMIDPX{ '4' };
				static constexpr char RELLSTPX{ '5' };
				static constexpr char RELVWAP{ '6' };
			};

			// DiscretionOffsetValue(389): FLOAT
			struct DiscretionOffsetValue
			{
				static constexpr uint16_t tag{ 389 };
			};

			// BidID(390): STRING
			struct BidID
			{
				static constexpr uint16_t tag{ 390 };
			};

			// ClientBidID(391): STRING
			struct ClientBidID
			{
				static constexpr uint16_t tag{ 391 };
			};

			// ListName(392): STRING
			struct ListName
			{
				static constexpr uint16_t tag{ 392 };
			};

			// TotNoRelatedSym(393): INT
			struct TotNoRelatedSym
			{
				static constexpr uint16_t tag{ 393 };
			};

			// BidType(394): INT
			struct BidType
			{
				static constexpr uint16_t tag{ 394 };
				static constexpr int32_t NONDISC{ 1 };
				static constexpr int32_t DISC{ 2 };
				static constexpr int32_t NOBID{ 3 };
			};

			// NumTickets(395): INT
			struct NumTickets
			{
				static constexpr uint16_t tag{ 395 };
			};

			// SideValue1(396): AMT
			struct SideValue1
			{
				static constexpr uint16_t tag{ 396 };
			};

			// SideValue2(397): AMT
			struct SideValue2
			{
				static constexpr uint16_t tag{ 397 };
			};

			// NoBidDescriptors(398): NUMINGROUP
			struct NoBidDescriptors
			{
				static constexpr uint16_t tag{ 398 };
			};

			// BidDescriptorType(399): INT
			struct BidDescriptorType
			{
				static constexpr uint16_t tag{ 399 };
				static constexpr int32_t SECTOR{ 1 };
				static constexpr int32_t COUNTRY{ 2 };
				static constexpr int32_t INDEX{ 3 };
			};

			// BidDescriptor(400): STRING
			struct BidDescriptor
			{
				static constexpr uint16_t tag{ 400 };
			};

			// SideValueInd(401): INT
			struct SideValueInd
			{
				static constexpr uint16_t tag{ 401 };
				static constexpr int32_t SIDEVALUE1{ 1 };
				static constexpr int32_t SIDEVALUE2{ 2 };
			};

			// LiquidityPctLow(402): PERCENTAGE
			struct LiquidityPctLow
			{
				static constexpr uint16_t tag{ 402 };
			};

			// LiquidityPctHigh(403): PERCENTAGE
			struct LiquidityPctHigh
			{
				static constexpr uint16_t tag{ 403 };
			};

			// LiquidityValue(404): AMT
			struct LiquidityValue
			{
				static constexpr uint16_t tag{ 404 };
			};

			// EFPTrackingError(405): PERCENTAGE
			struct EFPTrackingError
			{
				static constexpr uint16_t tag{ 405 };
			};

			// FairValue(406): AMT
			struct FairValue
			{
				static constexpr uint16_t tag{ 406 };
			};

			// OutsideIndexPct(407): PERCENTAGE
			struct OutsideIndexPct
			{
				static constexpr uint16_t tag{ 407 };
			};

			// ValueOfFutures(408): AMT
			struct ValueOfFutures
			{
				static constexpr uint16_t tag{ 408 };
			};

			// LiquidityIndType(409): INT
			struct LiquidityIndType
			{
				static constexpr uint16_t tag{ 409 };
				static constexpr int32_t _5DAY{ 1 };
				static constexpr int32_t _20DAY{ 2 };
				static constexpr int32_t NORMAL{ 3 };
				static constexpr int32_t OTHER{ 4 };
			};

			// WtAverageLiquidity(410): PERCENTAGE
			struct WtAverageLiquidity
			{
				static constexpr uint16_t tag{ 410 };
			};

			// ExchangeForPhysical(411): BOOLEAN
			struct ExchangeForPhysical
			{
				static constexpr uint16_t tag{ 411 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// OutMainCntryUIndex(412): AMT
			struct OutMainCntryUIndex
			{
				static constexpr uint16_t tag{ 412 };
			};

			// CrossPercent(413): PERCENTAGE
			struct CrossPercent
			{
				static constexpr uint16_t tag{ 413 };
			};

			// ProgRptReqs(414): INT
			struct ProgRptReqs
			{
				static constexpr uint16_t tag{ 414 };
				static constexpr int32_t BUYSIDE{ 1 };
				static constexpr int32_t SELLSIDE{ 2 };
				static constexpr int32_t REALTIME{ 3 };
			};

			// ProgPeriodInterval(415): INT
			struct ProgPeriodInterval
			{
				static constexpr uint16_t tag{ 415 };
			};

			// IncTaxInd(416): INT
			struct IncTaxInd
			{
				static constexpr uint16_t tag{ 416 };
				static constexpr int32_t NET{ 1 };
				static constexpr int32_t GROSS{ 2 };
			};

			// NumBidders(417): INT
			struct NumBidders
			{
				static constexpr uint16_t tag{ 417 };
			};

			// BidTradeType(418): CHAR
			struct BidTradeType
			{
				static constexpr uint16_t tag{ 418 };
				static constexpr char AGENCY{ 'A' };
				static constexpr char VWAPGUARANTEE{ 'G' };
				static constexpr char GUARANTEEDCLOSE{ 'J' };
				static constexpr char RISKTRADE{ 'R' };
			};

			// BasisPxType(419): CHAR
			struct BasisPxType
			{
				static constexpr uint16_t tag{ 419 };
				static constexpr char CLSPXMORN{ '2' };
				static constexpr char CLSPX{ '3' };
				static constexpr char CURRPX{ '4' };
				static constexpr char SQ{ '5' };
				static constexpr char VWAPDAY{ '6' };
				static constexpr char VWAPMORN{ '7' };
				static constexpr char VWAPAFT{ '8' };
				static constexpr char VWAPDAYXYORI{ '9' };
				static constexpr char VWAPMORNXYORI{ 'A' };
				static constexpr char VWAPAFTXYORI{ 'B' };
				static constexpr char STRIKE{ 'C' };
				static constexpr char OPEN{ 'D' };
				static constexpr char OTHERS{ 'Z' };
			};

			// NoBidComponents(420): NUMINGROUP
			struct NoBidComponents
			{
				static constexpr uint16_t tag{ 420 };
			};

			// Country(421): COUNTRY
			struct Country
			{
				static constexpr uint16_t tag{ 421 };
			};

			// TotNoStrikes(422): INT
			struct TotNoStrikes
			{
				static constexpr uint16_t tag{ 422 };
			};

			// PriceType(423): INT
			struct PriceType
			{
				static constexpr uint16_t tag{ 423 };
				static constexpr int32_t PCT{ 1 };
				static constexpr int32_t FIXEDCABINETTRADEPRICE{ 10 };
				static constexpr int32_t VARIABLECABINETTRADEPRICE{ 11 };
				static constexpr int32_t CPS{ 2 };
				static constexpr int32_t ABS{ 3 };
				static constexpr int32_t DISCOUNT{ 4 };
				static constexpr int32_t PREMIUM{ 5 };
				static constexpr int32_t SPREAD{ 6 };
				static constexpr int32_t TEDPRICE{ 7 };
				static constexpr int32_t TEDYIELD{ 8 };
				static constexpr int32_t YIELD{ 9 };
			};

			// DayOrderQty(424): QTY
			struct DayOrderQty
			{
				static constexpr uint16_t tag{ 424 };
			};

			// DayCumQty(425): QTY
			struct DayCumQty
			{
				static constexpr uint16_t tag{ 425 };
			};

			// DayAvgPx(426): PRICE
			struct DayAvgPx
			{
				static constexpr uint16_t tag{ 426 };
			};

			// GTBookingInst(427): INT
			struct GTBookingInst
			{
				static constexpr uint16_t tag{ 427 };
				static constexpr int32_t BOOKALL{ 0 };
				static constexpr int32_t ACCUMUNTILFILL{ 1 };
				static constexpr int32_t ACCUMUNTILNOTIFY{ 2 };
			};

			// NoStrikes(428): NUMINGROUP
			struct NoStrikes
			{
				static constexpr uint16_t tag{ 428 };
			};

			// ListStatusType(429): INT
			struct ListStatusType
			{
				static constexpr uint16_t tag{ 429 };
				static constexpr int32_t ACK{ 1 };
				static constexpr int32_t RESP{ 2 };
				static constexpr int32_t TIMED{ 3 };
				static constexpr int32_t EXECSTART{ 4 };
				static constexpr int32_t ALLDONE{ 5 };
				static constexpr int32_t ALERT{ 6 };
			};

			// NetGrossInd(430): INT
			struct NetGrossInd
			{
				static constexpr uint16_t tag{ 430 };
				static constexpr int32_t NET{ 1 };
				static constexpr int32_t GROSS{ 2 };
			};

			// ListOrderStatus(431): INT
			struct ListOrderStatus
			{
				static constexpr uint16_t tag{ 431 };
				static constexpr int32_t INBIDPROC{ 1 };
				static constexpr int32_t RECVFOREXEC{ 2 };
				static constexpr int32_t EXEC{ 3 };
				static constexpr int32_t CXL{ 4 };
				static constexpr int32_t ALERT{ 5 };
				static constexpr int32_t ALLDONE{ 6 };
				static constexpr int32_t REJ{ 7 };
			};

			// ExpireDate(432): LOCALMKTDATE
			struct ExpireDate
			{
				static constexpr uint16_t tag{ 432 };
			};

			// ListExecInstType(433): CHAR
			struct ListExecInstType
			{
				static constexpr uint16_t tag{ 433 };
				static constexpr char IMMED{ '1' };
				static constexpr char WAIT{ '2' };
				static constexpr char EXCHCIVSELL{ '3' };
				static constexpr char EXCHCIVBUYTOP{ '4' };
				static constexpr char EXCHCIVBUYWD{ '5' };
			};

			// CxlRejResponseTo(434): CHAR
			struct CxlRejResponseTo
			{
				static constexpr uint16_t tag{ 434 };
				static constexpr char ORDCXLREQ{ '1' };
				static constexpr char ORDCXLREPREQ{ '2' };
			};

			// UnderlyingCouponRate(435): PERCENTAGE
			struct UnderlyingCouponRate
			{
				static constexpr uint16_t tag{ 435 };
			};

			// UnderlyingContractMultiplier(436): FLOAT
			struct UnderlyingContractMultiplier
			{
				static constexpr uint16_t tag{ 436 };
			};

			// ContraTradeQty(437): QTY
			struct ContraTradeQty
			{
				static constexpr uint16_t tag{ 437 };
			};

			// ContraTradeTime(438): UTCTIMESTAMP
			struct ContraTradeTime
			{
				static constexpr uint16_t tag{ 438 };
			};

			// ClearingFirm(439): STRING
			struct ClearingFirm
			{
				static constexpr uint16_t tag{ 439 };
			};

			// ClearingAccount(440): STRING
			struct ClearingAccount
			{
				static constexpr uint16_t tag{ 440 };
			};

			// LiquidityNumSecurities(441): INT
			struct LiquidityNumSecurities
			{
				static constexpr uint16_t tag{ 441 };
			};

			// MultiLegReportingType(442): CHAR
			struct MultiLegReportingType
			{
				static constexpr uint16_t tag{ 442 };
				static constexpr char SINGLE{ '1' };
				static constexpr char INDIVLEG{ '2' };
				static constexpr char MULTILEG{ '3' };
			};

			// StrikeTime(443): UTCTIMESTAMP
			struct StrikeTime
			{
				static constexpr uint16_t tag{ 443 };
			};

			// ListStatusText(444): STRING
			struct ListStatusText
			{
				static constexpr uint16_t tag{ 444 };
			};

			// EncodedListStatusTextLen(445): LENGTH
			struct EncodedListStatusTextLen
			{
				static constexpr uint16_t tag{ 445 };
			};

			// EncodedListStatusText(446): DATA
			struct EncodedListStatusText
			{
				static constexpr uint16_t tag{ 446 };
			};

			// PartyIDSource(447): CHAR
			struct PartyIDSource
			{
				static constexpr uint16_t tag{ 447 };
				static constexpr char KOREANINVESTORID{ '1' };
				static constexpr char TAIWANESEQUALIFIED{ '2' };
				static constexpr char TAIWANESETRADINGACCT{ '3' };
				static constexpr char MCDNUMBER{ '4' };
				static constexpr char CHINESEBSHARE{ '5' };
				static constexpr char UKNATIONALINSPENNUMBER{ '6' };
				static constexpr char USSOCIALSECURITY{ '7' };
				static constexpr char USEMPLOYERIDNUMBER{ '8' };
				static constexpr char AUSTRALIANBUSINESSNUMBER{ '9' };
				static constexpr char AUSTRALIANTAXFILENUMBER{ 'A' };
				static constexpr char BIC{ 'B' };
				static constexpr char ACCPTMARKETPART{ 'C' };
				static constexpr char PROPCODE{ 'D' };
				static constexpr char ISOCODE{ 'E' };
				static constexpr char SETTLENTLOC{ 'F' };
				static constexpr char MIC{ 'G' };
				static constexpr char CSDPARTCODE{ 'H' };
				static constexpr char DIRECTEDDEFINEDISITC{ 'I' };
			};

			// PartyID(448): STRING
			struct PartyID
			{
				static constexpr uint16_t tag{ 448 };
			};

			// TotalVolumeTradedDate(449): UTCDATEONLY
			struct TotalVolumeTradedDate
			{
				static constexpr uint16_t tag{ 449 };
			};

			// TotalVolumeTradedTime(450): UTCTIMEONLY
			struct TotalVolumeTradedTime
			{
				static constexpr uint16_t tag{ 450 };
			};

			// NetChgPrevDay(451): PRICEOFFSET
			struct NetChgPrevDay
			{
				static constexpr uint16_t tag{ 451 };
			};

			// PartyRole(452): INT
			struct PartyRole
			{
				static constexpr uint16_t tag{ 452 };
				static constexpr int32_t EXECUTINGFIRM{ 1 };
				static constexpr int32_t SETTLEMENTLOCATION{ 10 };
				static constexpr int32_t INITIATINGTRADER{ 11 };
				static constexpr int32_t EXECUTINGTRADER{ 12 };
				static constexpr int32_t ORDERORIGINATOR{ 13 };
				static constexpr int32_t GIVEUPCLEARINGFIRM{ 14 };
				static constexpr int32_t CORRESPONDANTCLEARINGFIRM{ 15 };
				static constexpr int32_t EXECUTINGSYSTEM{ 16 };
				static constexpr int32_t CONTRAFIRM{ 17 };
				static constexpr int32_t CONTRACLEARINGFIRM{ 18 };
				static constexpr int32_t SPONSORINGFIRM{ 19 };
				static constexpr int32_t BROKEROFCREDIT{ 2 };
				static constexpr int32_t UNDRCONTRAFIRM{ 20 };
				static constexpr int32_t CLEARINGORGANIZATION{ 21 };
				static constexpr int32_t EXCHANGE{ 22 };
				static constexpr int32_t CUSTOMERACCOUNT{ 24 };
				static constexpr int32_t CORRESPONDENTCLEARINGORGANIZATION{ 25 };
				static constexpr int32_t CORRESPONDENTBROKER{ 26 };
				static constexpr int32_t BUYERSELLERRECEIVERDELIVERER{ 27 };
				static constexpr int32_t CUSTODIAN{ 28 };
				static constexpr int32_t INTERMEDIARY{ 29 };
				static constexpr int32_t CLIENTID{ 3 };
				static constexpr int32_t AGENT{ 30 };
				static constexpr int32_t SUBCUSTODIAN{ 31 };
				static constexpr int32_t BENEFICIARY{ 32 };
				static constexpr int32_t INTERESTEDPARTY{ 33 };
				static constexpr int32_t REGULATORYBODY{ 34 };
				static constexpr int32_t LIQUIDITYPROVIDER{ 35 };
				static constexpr int32_t ENTERINGTRADER{ 36 };
				static constexpr int32_t CONTRATRADER{ 37 };
				static constexpr int32_t POSITIONACCOUNT{ 38 };
				static constexpr int32_t ALLOCENTITY{ 39 };
				static constexpr int32_t CLEARINGFIRM{ 4 };
				static constexpr int32_t INVESTORID{ 5 };
				static constexpr int32_t INTRODUCINGFIRM{ 6 };
				static constexpr int32_t ENTERINGFIRM{ 7 };
				static constexpr int32_t LOCATELENDINGFIRM{ 8 };
				static constexpr int32_t FUNDMANAGER{ 9 };
			};

			// NoPartyIDs(453): NUMINGROUP
			struct NoPartyIDs
			{
				static constexpr uint16_t tag{ 453 };
			};

			// NoSecurityAltID(454): NUMINGROUP
			struct NoSecurityAltID
			{
				static constexpr uint16_t tag{ 454 };
			};

			// SecurityAltID(455): STRING
			struct SecurityAltID
			{
				static constexpr uint16_t tag{ 455 };
			};

			// SecurityAltIDSource(456): STRING
			struct SecurityAltIDSource
			{
				static constexpr uint16_t tag{ 456 };
			};

			// NoUnderlyingSecurityAltID(457): NUMINGROUP
			struct NoUnderlyingSecurityAltID
			{
				static constexpr uint16_t tag{ 457 };
			};

			// UnderlyingSecurityAltID(458): STRING
			struct UnderlyingSecurityAltID
			{
				static constexpr uint16_t tag{ 458 };
			};

			// UnderlyingSecurityAltIDSource(459): STRING
			struct UnderlyingSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 459 };
			};

			// Product(460): INT
			struct Product
			{
				static constexpr uint16_t tag{ 460 };
				static constexpr int32_t AGENCY{ 1 };
				static constexpr int32_t MORTGAGE{ 10 };
				static constexpr int32_t MUNICIPAL{ 11 };
				static constexpr int32_t OTHER{ 12 };
				static constexpr int32_t FINANCING{ 13 };
				static constexpr int32_t COMMODITY{ 2 };
				static constexpr int32_t CORPORATE{ 3 };
				static constexpr int32_t CURRENCY{ 4 };
				static constexpr int32_t EQUITY{ 5 };
				static constexpr int32_t GOVERNMENT{ 6 };
				static constexpr int32_t INDEX{ 7 };
				static constexpr int32_t LOAN{ 8 };
				static constexpr int32_t MONEYMARKET{ 9 };
			};

			// CFICode(461): STRING
			struct CFICode
			{
				static constexpr uint16_t tag{ 461 };
			};

			// UnderlyingProduct(462): INT
			struct UnderlyingProduct
			{
				static constexpr uint16_t tag{ 462 };
			};

			// UnderlyingCFICode(463): STRING
			struct UnderlyingCFICode
			{
				static constexpr uint16_t tag{ 463 };
			};

			// TestMessageIndicator(464): BOOLEAN
			struct TestMessageIndicator
			{
				static constexpr uint16_t tag{ 464 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// QuantityType(465): INT
			struct QuantityType
			{
				static constexpr uint16_t tag{ 465 };
				static constexpr int32_t SHARES{ 1 };
				static constexpr int32_t BONDS{ 2 };
				static constexpr int32_t CURRENTFACE{ 3 };
				static constexpr int32_t ORIGINALFACE{ 4 };
				static constexpr int32_t CURRENCY{ 5 };
				static constexpr int32_t CONTRACTS{ 6 };
				static constexpr int32_t OTHER{ 7 };
				static constexpr int32_t PAR{ 8 };
			};

			// BookingRefID(466): STRING
			struct BookingRefID
			{
				static constexpr uint16_t tag{ 466 };
			};

			// IndividualAllocID(467): STRING
			struct IndividualAllocID
			{
				static constexpr uint16_t tag{ 467 };
			};

			// RoundingDirection(468): CHAR
			struct RoundingDirection
			{
				static constexpr uint16_t tag{ 468 };
				static constexpr char ROUNDNEAREST{ '0' };
				static constexpr char ROUNDDOWN{ '1' };
				static constexpr char ROUNDUP{ '2' };
			};

			// RoundingModulus(469): FLOAT
			struct RoundingModulus
			{
				static constexpr uint16_t tag{ 469 };
			};

			// CountryOfIssue(470): COUNTRY
			struct CountryOfIssue
			{
				static constexpr uint16_t tag{ 470 };
			};

			// StateOrProvinceOfIssue(471): STRING
			struct StateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 471 };
			};

			// LocaleOfIssue(472): STRING
			struct LocaleOfIssue
			{
				static constexpr uint16_t tag{ 472 };
			};

			// NoRegistDtls(473): NUMINGROUP
			struct NoRegistDtls
			{
				static constexpr uint16_t tag{ 473 };
			};

			// MailingDtls(474): STRING
			struct MailingDtls
			{
				static constexpr uint16_t tag{ 474 };
			};

			// InvestorCountryOfResidence(475): COUNTRY
			struct InvestorCountryOfResidence
			{
				static constexpr uint16_t tag{ 475 };
			};

			// PaymentRef(476): STRING
			struct PaymentRef
			{
				static constexpr uint16_t tag{ 476 };
			};

			// DistribPaymentMethod(477): INT
			struct DistribPaymentMethod
			{
				static constexpr uint16_t tag{ 477 };
				static constexpr int32_t CREST{ 1 };
				static constexpr int32_t BPAY{ 10 };
				static constexpr int32_t HIGHVALUECLEARINGSYSTEMHVACS{ 11 };
				static constexpr int32_t REINVESTINFUND{ 12 };
				static constexpr int32_t NSCC{ 2 };
				static constexpr int32_t EUROCLEAR{ 3 };
				static constexpr int32_t CLEARSTREAM{ 4 };
				static constexpr int32_t CHEQUE{ 5 };
				static constexpr int32_t TELEGRAPHICTRANSFER{ 6 };
				static constexpr int32_t FEDWIRE{ 7 };
				static constexpr int32_t DIRECTCREDITBECSBACS{ 8 };
				static constexpr int32_t ACHCREDIT{ 9 };
			};

			// CashDistribCurr(478): CURRENCY
			struct CashDistribCurr
			{
				static constexpr uint16_t tag{ 478 };
			};

			// CommCurrency(479): CURRENCY
			struct CommCurrency
			{
				static constexpr uint16_t tag{ 479 };
			};

			// CancellationRights(480): CHAR
			struct CancellationRights
			{
				static constexpr uint16_t tag{ 480 };
				static constexpr char NOWAIVER{ 'M' };
				static constexpr char NOEXECONLY{ 'N' };
				static constexpr char NOINSTIT{ 'O' };
				static constexpr char YES{ 'Y' };
			};

			// MoneyLaunderingStatus(481): CHAR
			struct MoneyLaunderingStatus
			{
				static constexpr uint16_t tag{ 481 };
				static constexpr char EXBELOWLIM{ '1' };
				static constexpr char EXCLIENTMONEYTYPE{ '2' };
				static constexpr char EXAUTHCREDIT{ '3' };
				static constexpr char NOTCHECKED{ 'N' };
				static constexpr char PASSED{ 'Y' };
			};

			// MailingInst(482): STRING
			struct MailingInst
			{
				static constexpr uint16_t tag{ 482 };
			};

			// TransBkdTime(483): UTCTIMESTAMP
			struct TransBkdTime
			{
				static constexpr uint16_t tag{ 483 };
			};

			// ExecPriceType(484): CHAR
			struct ExecPriceType
			{
				static constexpr uint16_t tag{ 484 };
				static constexpr char BIDPRICE{ 'B' };
				static constexpr char CREATIONPRICE{ 'C' };
				static constexpr char CREATIONPRICEADJPCT{ 'D' };
				static constexpr char CREATIONPRICEADJAMT{ 'E' };
				static constexpr char OFFERPRICE{ 'O' };
				static constexpr char OFFERPRICEMINUSADJPCT{ 'P' };
				static constexpr char OFFERPRICEMINUSADJAMT{ 'Q' };
				static constexpr char SINGLEPRICE{ 'S' };
			};

			// ExecPriceAdjustment(485): FLOAT
			struct ExecPriceAdjustment
			{
				static constexpr uint16_t tag{ 485 };
			};

			// DateOfBirth(486): LOCALMKTDATE
			struct DateOfBirth
			{
				static constexpr uint16_t tag{ 486 };
			};

			// TradeReportTransType(487): INT
			struct TradeReportTransType
			{
				static constexpr uint16_t tag{ 487 };
				static constexpr int32_t NEW{ 0 };
				static constexpr int32_t CANCEL{ 1 };
				static constexpr int32_t REPLACE{ 2 };
				static constexpr int32_t RELEASE{ 3 };
				static constexpr int32_t REVERSE{ 4 };
			};

			// CardHolderName(488): STRING
			struct CardHolderName
			{
				static constexpr uint16_t tag{ 488 };
			};

			// CardNumber(489): STRING
			struct CardNumber
			{
				static constexpr uint16_t tag{ 489 };
			};

			// CardExpDate(490): LOCALMKTDATE
			struct CardExpDate
			{
				static constexpr uint16_t tag{ 490 };
			};

			// CardIssNum(491): STRING
			struct CardIssNum
			{
				static constexpr uint16_t tag{ 491 };
			};

			// PaymentMethod(492): INT
			struct PaymentMethod
			{
				static constexpr uint16_t tag{ 492 };
				static constexpr int32_t CREST{ 1 };
				static constexpr int32_t DIRECTCREDITBECS{ 10 };
				static constexpr int32_t CREDITCARD{ 11 };
				static constexpr int32_t ACHDEBIT{ 12 };
				static constexpr int32_t ACHCREDIT{ 13 };
				static constexpr int32_t BPAY{ 14 };
				static constexpr int32_t HIGHVALUECLEARINGSYSTEMHVACS{ 15 };
				static constexpr int32_t NSCC{ 2 };
				static constexpr int32_t EUROCLEAR{ 3 };
				static constexpr int32_t CLEARSTREAM{ 4 };
				static constexpr int32_t CHEQUE{ 5 };
				static constexpr int32_t TELEGRAPHICTRANSFER{ 6 };
				static constexpr int32_t FEDWIRE{ 7 };
				static constexpr int32_t DEBITCARD{ 8 };
				static constexpr int32_t DIRECTDEBITBECS{ 9 };
			};

			// RegistAcctType(493): STRING
			struct RegistAcctType
			{
				static constexpr uint16_t tag{ 493 };
			};

			// Designation(494): STRING
			struct Designation
			{
				static constexpr uint16_t tag{ 494 };
			};

			// TaxAdvantageType(495): INT
			struct TaxAdvantageType
			{
				static constexpr uint16_t tag{ 495 };
				static constexpr int32_t NONE{ 0 };
				static constexpr int32_t MAXIISAUK{ 1 };
				static constexpr int32_t EMPLOYEECURRENTYEARUS{ 10 };
				static constexpr int32_t EMPLOYERPRIORYEARUS{ 11 };
				static constexpr int32_t EMPLOYERCURRENTYEARUS{ 12 };
				static constexpr int32_t NONFUNDPROTOTYPEIRAUS{ 13 };
				static constexpr int32_t NONFUNDQUALIFIEDPLANUS{ 14 };
				static constexpr int32_t DEFINEDCONTRIBUTIONPLANUS{ 15 };
				static constexpr int32_t INDIVIDUALRETIREMENTACCOUNTUS{ 16 };
				static constexpr int32_t INDIVIDUALRETIREMENTACCOUNTROLLOVERUS{ 17 };
				static constexpr int32_t KEOGHUS{ 18 };
				static constexpr int32_t PROFITSHARINGPLANUS{ 19 };
				static constexpr int32_t TESSAUK{ 2 };
				static constexpr int32_t _401KUS{ 20 };
				static constexpr int32_t SELFDIRECTEDIRAUS{ 21 };
				static constexpr int32_t _403BUS{ 22 };
				static constexpr int32_t _457US{ 23 };
				static constexpr int32_t ROTHIRAFUNDPROTOTYPEUS{ 24 };
				static constexpr int32_t ROTHIRANONPROTOTYPEUS{ 25 };
				static constexpr int32_t ROTHCONVERSIONIRAFUNDPROTOTYPEUS{ 26 };
				static constexpr int32_t ROTHCONVERSIONIRANONPROTOTYPEUS{ 27 };
				static constexpr int32_t EDUCATIONIRAFUNDPROTOTYPEUS{ 28 };
				static constexpr int32_t EDUCATIONIRANONPROTOTYPEUS{ 29 };
				static constexpr int32_t MINICASHISAUK{ 3 };
				static constexpr int32_t MINISTOCKSANDSHARESISAUK{ 4 };
				static constexpr int32_t MINIINSURANCEISAUK{ 5 };
				static constexpr int32_t CURRENTYEARPAYMENTUS{ 6 };
				static constexpr int32_t PRIORYEARPAYMENTUS{ 7 };
				static constexpr int32_t ASSETTRANSFERUS{ 8 };
				static constexpr int32_t EMPLOYEEPRIORYEARUS{ 9 };
				static constexpr int32_t OTHER{ 999 };
			};

			// RegistRejReasonText(496): STRING
			struct RegistRejReasonText
			{
				static constexpr uint16_t tag{ 496 };
			};

			// FundRenewWaiv(497): CHAR
			struct FundRenewWaiv
			{
				static constexpr uint16_t tag{ 497 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// CashDistribAgentName(498): STRING
			struct CashDistribAgentName
			{
				static constexpr uint16_t tag{ 498 };
			};

			// CashDistribAgentCode(499): STRING
			struct CashDistribAgentCode
			{
				static constexpr uint16_t tag{ 499 };
			};

			// CashDistribAgentAcctNumber(500): STRING
			struct CashDistribAgentAcctNumber
			{
				static constexpr uint16_t tag{ 500 };
			};

			// CashDistribPayRef(501): STRING
			struct CashDistribPayRef
			{
				static constexpr uint16_t tag{ 501 };
			};

			// CashDistribAgentAcctName(502): STRING
			struct CashDistribAgentAcctName
			{
				static constexpr uint16_t tag{ 502 };
			};

			// CardStartDate(503): LOCALMKTDATE
			struct CardStartDate
			{
				static constexpr uint16_t tag{ 503 };
			};

			// PaymentDate(504): LOCALMKTDATE
			struct PaymentDate
			{
				static constexpr uint16_t tag{ 504 };
			};

			// PaymentRemitterID(505): STRING
			struct PaymentRemitterID
			{
				static constexpr uint16_t tag{ 505 };
			};

			// RegistStatus(506): CHAR
			struct RegistStatus
			{
				static constexpr uint16_t tag{ 506 };
				static constexpr char ACCEPTED{ 'A' };
				static constexpr char HELD{ 'H' };
				static constexpr char REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING{ 'N' };
				static constexpr char REJECTED{ 'R' };
			};

			// RegistRejReasonCode(507): INT
			struct RegistRejReasonCode
			{
				static constexpr uint16_t tag{ 507 };
				static constexpr int32_t INVALIDACCOUNTTYPE{ 1 };
				static constexpr int32_t INVALIDINVESTORIDSOURCE{ 10 };
				static constexpr int32_t INVALIDDATEOFBIRTH{ 11 };
				static constexpr int32_t INVALIDINVESTORCOUNTRYOFRESIDENCE{ 12 };
				static constexpr int32_t INVALIDNODISTRIBINSTNS{ 13 };
				static constexpr int32_t INVALIDDISTRIBPERCENTAGE{ 14 };
				static constexpr int32_t INVALIDDISTRIBPAYMENTMETHOD{ 15 };
				static constexpr int32_t INVALIDCASHDISTRIBAGENTACCTNAME{ 16 };
				static constexpr int32_t INVALIDCASHDISTRIBAGENTCODE{ 17 };
				static constexpr int32_t INVALIDCASHDISTRIBAGENTACCTNUM{ 18 };
				static constexpr int32_t INVALIDTAXEXEMPTTYPE{ 2 };
				static constexpr int32_t INVALIDOWNERSHIPTYPE{ 3 };
				static constexpr int32_t INVALIDNOREGDETLS{ 4 };
				static constexpr int32_t INVALIDREGSEQNO{ 5 };
				static constexpr int32_t INVALIDREGDTLS{ 6 };
				static constexpr int32_t INVALIDMAILINGDTLS{ 7 };
				static constexpr int32_t INVALIDMAILINGINST{ 8 };
				static constexpr int32_t INVALIDINVESTORID{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// RegistRefID(508): STRING
			struct RegistRefID
			{
				static constexpr uint16_t tag{ 508 };
			};

			// RegistDtls(509): STRING
			struct RegistDtls
			{
				static constexpr uint16_t tag{ 509 };
			};

			// NoDistribInsts(510): NUMINGROUP
			struct NoDistribInsts
			{
				static constexpr uint16_t tag{ 510 };
			};

			// RegistEmail(511): STRING
			struct RegistEmail
			{
				static constexpr uint16_t tag{ 511 };
			};

			// DistribPercentage(512): PERCENTAGE
			struct DistribPercentage
			{
				static constexpr uint16_t tag{ 512 };
			};

			// RegistID(513): STRING
			struct RegistID
			{
				static constexpr uint16_t tag{ 513 };
			};

			// RegistTransType(514): CHAR
			struct RegistTransType
			{
				static constexpr uint16_t tag{ 514 };
				static constexpr char NEW{ '0' };
				static constexpr char REPLACE{ '1' };
				static constexpr char CANCEL{ '2' };
			};

			// ExecValuationPoint(515): UTCTIMESTAMP
			struct ExecValuationPoint
			{
				static constexpr uint16_t tag{ 515 };
			};

			// OrderPercent(516): PERCENTAGE
			struct OrderPercent
			{
				static constexpr uint16_t tag{ 516 };
			};

			// OwnershipType(517): CHAR
			struct OwnershipType
			{
				static constexpr uint16_t tag{ 517 };
				static constexpr char JOINT_TRUSTEES{ '2' };
				static constexpr char JOINT_INVESTORS{ 'J' };
				static constexpr char TENANTS_IN_COMMON{ 'T' };
			};

			// NoContAmts(518): NUMINGROUP
			struct NoContAmts
			{
				static constexpr uint16_t tag{ 518 };
			};

			// ContAmtType(519): INT
			struct ContAmtType
			{
				static constexpr uint16_t tag{ 519 };
				static constexpr int32_t COMMISSIONAMT{ 1 };
				static constexpr int32_t EXITCHARGEPCT{ 10 };
				static constexpr int32_t FUNDBASEDRENEWALCOMM{ 11 };
				static constexpr int32_t PROJECTEDFUNDVALUE{ 12 };
				static constexpr int32_t FUNDBASEDRENEWALCOMMAMTORD{ 13 };
				static constexpr int32_t FUNDBASEDRENEWALCOMMAMTPROJ{ 14 };
				static constexpr int32_t NETSETTLEMENTAMOUNT{ 15 };
				static constexpr int32_t COMMISSIONPCT{ 2 };
				static constexpr int32_t INITIALCHARGEAMT{ 3 };
				static constexpr int32_t INITIALCHARGEPCT{ 4 };
				static constexpr int32_t DISCOUNTAMT{ 5 };
				static constexpr int32_t DISCOUNTPCT{ 6 };
				static constexpr int32_t DILUTIONLEVYAMT{ 7 };
				static constexpr int32_t DILUTIONLEVYPCT{ 8 };
				static constexpr int32_t EXITCHARGEAMT{ 9 };
			};

			// ContAmtValue(520): FLOAT
			struct ContAmtValue
			{
				static constexpr uint16_t tag{ 520 };
			};

			// ContAmtCurr(521): CURRENCY
			struct ContAmtCurr
			{
				static constexpr uint16_t tag{ 521 };
			};

			// OwnerType(522): INT
			struct OwnerType
			{
				static constexpr uint16_t tag{ 522 };
				static constexpr int32_t INDIVINVESTOR{ 1 };
				static constexpr int32_t NETWORKINGSUBACCT{ 10 };
				static constexpr int32_t NON_PROFITORG{ 11 };
				static constexpr int32_t CORPBODY{ 12 };
				static constexpr int32_t NOMINEE{ 13 };
				static constexpr int32_t PUBLICCOMPANY{ 2 };
				static constexpr int32_t PRIVATECOMPANY{ 3 };
				static constexpr int32_t INDIVTRUSTEE{ 4 };
				static constexpr int32_t COMPANYTRUSTEE{ 5 };
				static constexpr int32_t PENSIONPLAN{ 6 };
				static constexpr int32_t CUSTODIANMINORSACT{ 7 };
				static constexpr int32_t TRUSTS{ 8 };
				static constexpr int32_t FIDUCIARIES{ 9 };
			};

			// PartySubID(523): STRING
			struct PartySubID
			{
				static constexpr uint16_t tag{ 523 };
			};

			// NestedPartyID(524): STRING
			struct NestedPartyID
			{
				static constexpr uint16_t tag{ 524 };
			};

			// NestedPartyIDSource(525): CHAR
			struct NestedPartyIDSource
			{
				static constexpr uint16_t tag{ 525 };
			};

			// SecondaryClOrdID(526): STRING
			struct SecondaryClOrdID
			{
				static constexpr uint16_t tag{ 526 };
			};

			// SecondaryExecID(527): STRING
			struct SecondaryExecID
			{
				static constexpr uint16_t tag{ 527 };
			};

			// OrderCapacity(528): CHAR
			struct OrderCapacity
			{
				static constexpr uint16_t tag{ 528 };
				static constexpr char AGENCY{ 'A' };
				static constexpr char PROPRIETARY{ 'G' };
				static constexpr char INDIVIDUAL{ 'I' };
				static constexpr char PRINCIPAL{ 'P' };
				static constexpr char RISKLESSPRINCIPAL{ 'R' };
				static constexpr char AGENTOTHERMEMBER{ 'W' };
			};

			// OrderRestrictions(529): MULTIPLESTRINGVALUE
			struct OrderRestrictions
			{
				static constexpr uint16_t tag{ 529 };
				static inline const std::string PROGRAMTRADE{ "1" };
				static inline const std::string INDEXARBITRAGE{ "2" };
				static inline const std::string NON_INDEXARBITRAGE{ "3" };
				static inline const std::string COMPETINGMARKETMAKER{ "4" };
				static inline const std::string ACTMM{ "5" };
				static inline const std::string ACTMMDERIV{ "6" };
				static inline const std::string FORENTITY{ "7" };
				static inline const std::string EXMRKTPART{ "8" };
				static inline const std::string EXINTMRKTLINK{ "9" };
				static inline const std::string RISKARB{ "A" };
			};

			// MassCancelRequestType(530): CHAR
			struct MassCancelRequestType
			{
				static constexpr uint16_t tag{ 530 };
				static constexpr char CXLORDERSSECURITY{ '1' };
				static constexpr char CXLORDERSUNDERLYINGSECURITY{ '2' };
				static constexpr char CXLORDERSPRODUCT{ '3' };
				static constexpr char CXLORDERSCFICODE{ '4' };
				static constexpr char CXLORDERSSECURITYTYPE{ '5' };
				static constexpr char CXLORDERSTRDSESSION{ '6' };
				static constexpr char CXLALLORDERS{ '7' };
			};

			// MassCancelResponse(531): CHAR
			struct MassCancelResponse
			{
				static constexpr uint16_t tag{ 531 };
				static constexpr char CXLREQREJ{ '0' };
				static constexpr char CXLORDERSSECURITY{ '1' };
				static constexpr char CXLORDERSUNDERLYINGSECURITY{ '2' };
				static constexpr char CXLORDERSPRODUCT{ '3' };
				static constexpr char CXLORDERSCFICODE{ '4' };
				static constexpr char CXLORDERSSECURITYTYPE{ '5' };
				static constexpr char CXLORDERSTRDSESSION{ '6' };
				static constexpr char CXLALLORDERS{ '7' };
			};

			// MassCancelRejectReason(532): STRING
			struct MassCancelRejectReason
			{
				static constexpr uint16_t tag{ 532 };
				static inline const std::string MASSCXLNOTSUPPORTED{ "0" };
				static inline const std::string INVALIDSECURITY{ "1" };
				static inline const std::string INVALIDUNDERLYING{ "2" };
				static inline const std::string INVALIDPRODUCT{ "3" };
				static inline const std::string INVALIDCFICODE{ "4" };
				static inline const std::string INVALIDSECURITYTYPE{ "5" };
				static inline const std::string INVALIDTRDSESSION{ "6" };
				static inline const std::string OTHER{ "99" };
			};

			// TotalAffectedOrders(533): INT
			struct TotalAffectedOrders
			{
				static constexpr uint16_t tag{ 533 };
			};

			// NoAffectedOrders(534): INT
			struct NoAffectedOrders
			{
				static constexpr uint16_t tag{ 534 };
			};

			// AffectedOrderID(535): STRING
			struct AffectedOrderID
			{
				static constexpr uint16_t tag{ 535 };
			};

			// AffectedSecondaryOrderID(536): STRING
			struct AffectedSecondaryOrderID
			{
				static constexpr uint16_t tag{ 536 };
			};

			// QuoteType(537): INT
			struct QuoteType
			{
				static constexpr uint16_t tag{ 537 };
				static constexpr int32_t INDICATIVE{ 0 };
				static constexpr int32_t TRADEABLE{ 1 };
				static constexpr int32_t RESTRICTEDTRADEABLE{ 2 };
				static constexpr int32_t COUNTER{ 3 };
			};

			// NestedPartyRole(538): INT
			struct NestedPartyRole
			{
				static constexpr uint16_t tag{ 538 };
			};

			// NoNestedPartyIDs(539): NUMINGROUP
			struct NoNestedPartyIDs
			{
				static constexpr uint16_t tag{ 539 };
			};

			// TotalAccruedInterestAmt(540): AMT
			struct TotalAccruedInterestAmt
			{
				static constexpr uint16_t tag{ 540 };
			};

			// MaturityDate(541): LOCALMKTDATE
			struct MaturityDate
			{
				static constexpr uint16_t tag{ 541 };
			};

			// UnderlyingMaturityDate(542): LOCALMKTDATE
			struct UnderlyingMaturityDate
			{
				static constexpr uint16_t tag{ 542 };
			};

			// InstrRegistry(543): STRING
			struct InstrRegistry
			{
				static constexpr uint16_t tag{ 543 };
				static inline const std::string CUSTODIAN{ "BIC" };
				static inline const std::string COUNTRY{ "ISO" };
				static inline const std::string PHYSICAL{ "ZZ" };
			};

			// CashMargin(544): CHAR
			struct CashMargin
			{
				static constexpr uint16_t tag{ 544 };
				static constexpr char CASH{ '1' };
				static constexpr char MARGINOPEN{ '2' };
				static constexpr char MARGINCLOSE{ '3' };
			};

			// NestedPartySubID(545): STRING
			struct NestedPartySubID
			{
				static constexpr uint16_t tag{ 545 };
			};

			// Scope(546): MULTIPLESTRINGVALUE
			struct Scope
			{
				static constexpr uint16_t tag{ 546 };
				static inline const std::string LOCALMARKET{ "1" };
				static inline const std::string NATIONAL{ "2" };
				static inline const std::string GLOBAL{ "3" };
			};

			// MDImplicitDelete(547): BOOLEAN
			struct MDImplicitDelete
			{
				static constexpr uint16_t tag{ 547 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// CrossID(548): STRING
			struct CrossID
			{
				static constexpr uint16_t tag{ 548 };
			};

			// CrossType(549): INT
			struct CrossType
			{
				static constexpr uint16_t tag{ 549 };
				static constexpr int32_t CROSSAON{ 1 };
				static constexpr int32_t CROSSIOC{ 2 };
				static constexpr int32_t CROSSONESIDE{ 3 };
				static constexpr int32_t CROSSSAMEPRICE{ 4 };
			};

			// CrossPrioritization(550): INT
			struct CrossPrioritization
			{
				static constexpr uint16_t tag{ 550 };
				static constexpr int32_t NONE{ 0 };
				static constexpr int32_t BUY_SIDE_PRIORITIZED{ 1 };
				static constexpr int32_t SELL_SIDE_PRIORITIZED{ 2 };
			};

			// OrigCrossID(551): STRING
			struct OrigCrossID
			{
				static constexpr uint16_t tag{ 551 };
			};

			// NoSides(552): NUMINGROUP
			struct NoSides
			{
				static constexpr uint16_t tag{ 552 };
				static inline const std::string ONESIDE{ "1" };
				static inline const std::string BOTHSIDES{ "2" };
			};

			// Username(553): STRING
			struct Username
			{
				static constexpr uint16_t tag{ 553 };
			};

			// Password(554): STRING
			struct Password
			{
				static constexpr uint16_t tag{ 554 };
			};

			// NoLegs(555): NUMINGROUP
			struct NoLegs
			{
				static constexpr uint16_t tag{ 555 };
			};

			// LegCurrency(556): CURRENCY
			struct LegCurrency
			{
				static constexpr uint16_t tag{ 556 };
			};

			// TotNoSecurityTypes(557): INT
			struct TotNoSecurityTypes
			{
				static constexpr uint16_t tag{ 557 };
			};

			// NoSecurityTypes(558): NUMINGROUP
			struct NoSecurityTypes
			{
				static constexpr uint16_t tag{ 558 };
			};

			// SecurityListRequestType(559): INT
			struct SecurityListRequestType
			{
				static constexpr uint16_t tag{ 559 };
				static constexpr int32_t SYMBOL{ 0 };
				static constexpr int32_t SECURITYTYPECFICODE{ 1 };
				static constexpr int32_t PRODUCT{ 2 };
				static constexpr int32_t TRADINGSESSIONID{ 3 };
				static constexpr int32_t ALLSECURITIES{ 4 };
			};

			// SecurityRequestResult(560): INT
			struct SecurityRequestResult
			{
				static constexpr uint16_t tag{ 560 };
				static constexpr int32_t VALIDREQ{ 0 };
				static constexpr int32_t INVALIDREQ{ 1 };
				static constexpr int32_t NOINSTRUMENTSFOUND{ 2 };
				static constexpr int32_t NOTAUTHORIZED{ 3 };
				static constexpr int32_t INSTRUMENTUNAVAILABLE{ 4 };
				static constexpr int32_t NOTSUPPORTED{ 5 };
			};

			// RoundLot(561): QTY
			struct RoundLot
			{
				static constexpr uint16_t tag{ 561 };
			};

			// MinTradeVol(562): QTY
			struct MinTradeVol
			{
				static constexpr uint16_t tag{ 562 };
			};

			// MultiLegRptTypeReq(563): INT
			struct MultiLegRptTypeReq
			{
				static constexpr uint16_t tag{ 563 };
				static constexpr int32_t REPORT_BY_MULITLEG_SECURITY_ONLY{ 0 };
				static constexpr int32_t REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY{ 1 };
				static constexpr int32_t REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY{ 2 };
			};

			// LegPositionEffect(564): CHAR
			struct LegPositionEffect
			{
				static constexpr uint16_t tag{ 564 };
			};

			// LegCoveredOrUncovered(565): INT
			struct LegCoveredOrUncovered
			{
				static constexpr uint16_t tag{ 565 };
			};

			// LegPrice(566): PRICE
			struct LegPrice
			{
				static constexpr uint16_t tag{ 566 };
			};

			// TradSesStatusRejReason(567): INT
			struct TradSesStatusRejReason
			{
				static constexpr uint16_t tag{ 567 };
				static constexpr int32_t UNKNOWNTRADINGSESSIONID{ 1 };
				static constexpr int32_t OTHER{ 99 };
			};

			// TradeRequestID(568): STRING
			struct TradeRequestID
			{
				static constexpr uint16_t tag{ 568 };
			};

			// TradeRequestType(569): INT
			struct TradeRequestType
			{
				static constexpr uint16_t tag{ 569 };
				static constexpr int32_t ALLTRADES{ 0 };
				static constexpr int32_t MATCHEDTRADES{ 1 };
				static constexpr int32_t UNMATCHEDTRADES{ 2 };
				static constexpr int32_t UNREPORTEDTRADES{ 3 };
				static constexpr int32_t ADVISORIESMATCH{ 4 };
			};

			// PreviouslyReported(570): BOOLEAN
			struct PreviouslyReported
			{
				static constexpr uint16_t tag{ 570 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// TradeReportID(571): STRING
			struct TradeReportID
			{
				static constexpr uint16_t tag{ 571 };
			};

			// TradeReportRefID(572): STRING
			struct TradeReportRefID
			{
				static constexpr uint16_t tag{ 572 };
			};

			// MatchStatus(573): CHAR
			struct MatchStatus
			{
				static constexpr uint16_t tag{ 573 };
				static constexpr char COMPMATAFF{ '0' };
				static constexpr char UNCOMPUNMATUNAFF{ '1' };
				static constexpr char ADVALERT{ '2' };
			};

			// MatchType(574): STRING
			struct MatchType
			{
				static constexpr uint16_t tag{ 574 };
				static inline const std::string EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSFOURBADGESANDEXECUTIONTIME{ "A1" };
				static inline const std::string EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSFOURBADGES{ "A2" };
				static inline const std::string EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSTWOBADGESANDEXECUTIONTIME{ "A3" };
				static inline const std::string EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSTWOBADGES{ "A4" };
				static inline const std::string EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORPLUSEXECUTIONTIME{ "A5" };
				static inline const std::string NASDAQACTM1MATCH{ "ACTM1" };
				static inline const std::string NASDAQACTM2MATCH{ "ACTM2" };
				static inline const std::string NASDAQACTACCEPTEDTRADE{ "ACTM3" };
				static inline const std::string NASDAQACTDEFAULTTRADE{ "ACTM4" };
				static inline const std::string NASDAQACTDEFAULTAFTERM2{ "ACTM5" };
				static inline const std::string NASDAQACTM6MATCH{ "ACTM6" };
				static inline const std::string NASDAQNONACT{ "ACTMT" };
				static inline const std::string COMPAREDRECORDSRESULTINGFROMSTAMPEDADVISORIESORSPECIALISTACCEPTSPAIROFFS{ "AQ" };
				static inline const std::string EXACTMATCHONTRADEDATESTOCKSYMBOLQUANTITYPRICETRADETYPEANDSPECIALTRADEINDICATORMINUSBADGESANDTIMES{ "M1" };
				static inline const std::string SUMMARIZEDMATCHMINUSBADGESANDTIMES{ "M2" };
				static inline const std::string OCSLOCKEDIN{ "MT" };
				static inline const std::string SUMMARIZEDMATCHUSINGA1{ "S1" };
				static inline const std::string SUMMARIZEDMATCHUSINGA2{ "S2" };
				static inline const std::string SUMMARIZEDMATCHUSINGA3{ "S3" };
				static inline const std::string SUMMARIZEDMATCHUSINGA4{ "S4" };
				static inline const std::string SUMMARIZEDMATCHUSINGA5{ "S5" };
			};

			// OddLot(575): BOOLEAN
			struct OddLot
			{
				static constexpr uint16_t tag{ 575 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// NoClearingInstructions(576): NUMINGROUP
			struct NoClearingInstructions
			{
				static constexpr uint16_t tag{ 576 };
			};

			// ClearingInstruction(577): INT
			struct ClearingInstruction
			{
				static constexpr uint16_t tag{ 577 };
				static constexpr int32_t PROCESSNORMALLY{ 0 };
				static constexpr int32_t EXCLUDEFROMALLNETTING{ 1 };
				static constexpr int32_t AUTOMATICGIVEUPMODETRADEGIVEUPTOTHEGIVEUPDESTINATIONNUMBERSPECIFIED{ 10 };
				static constexpr int32_t QUALIFIEDSERVICEREPRESENTATIVEQSR{ 11 };
				static constexpr int32_t CUSTOMERTRADE{ 12 };
				static constexpr int32_t SELFCLEARING{ 13 };
				static constexpr int32_t BILATERALNETTINGONLY{ 2 };
				static constexpr int32_t EXCLEARING{ 3 };
				static constexpr int32_t SPECIALTRADE{ 4 };
				static constexpr int32_t MULTILATERALNETTING{ 5 };
				static constexpr int32_t CLEARAGAINSTCENTRALCOUNTERPARTY{ 6 };
				static constexpr int32_t EXCLUDEFROMCENTRALCOUNTERPARTY{ 7 };
				static constexpr int32_t MANUALMODEPREPOSTINGANDORPREGIVEUP{ 8 };
				static constexpr int32_t AUTOMATICPOSTINGMODETRADEPOSTINGTOTHEPOSITIONACCOUNTNUMBERSPECIFIED{ 9 };
			};

			// TradeInputSource(578): STRING
			struct TradeInputSource
			{
				static constexpr uint16_t tag{ 578 };
			};

			// TradeInputDevice(579): STRING
			struct TradeInputDevice
			{
				static constexpr uint16_t tag{ 579 };
			};

			// NoDates(580): INT
			struct NoDates
			{
				static constexpr uint16_t tag{ 580 };
			};

			// AccountType(581): INT
			struct AccountType
			{
				static constexpr uint16_t tag{ 581 };
				static constexpr int32_t ACCOUNTCUSTOMER{ 1 };
				static constexpr int32_t ACCOUNTNONCUSTOMER{ 2 };
				static constexpr int32_t HOUSETRADER{ 3 };
				static constexpr int32_t FLOORTRADER{ 4 };
				static constexpr int32_t ACCOUNTNONCUSTOMERCROSS{ 6 };
				static constexpr int32_t HOUSETRADERCROSS{ 7 };
				static constexpr int32_t JOINTBOACCT{ 8 };
			};

			// CustOrderCapacity(582): INT
			struct CustOrderCapacity
			{
				static constexpr uint16_t tag{ 582 };
				static constexpr int32_t MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT{ 1 };
				static constexpr int32_t CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT{ 2 };
				static constexpr int32_t MEMBER_TRADING_FOR_ANOTHER_MEMBER{ 3 };
				static constexpr int32_t ALL_OTHER{ 4 };
			};

			// ClOrdLinkID(583): STRING
			struct ClOrdLinkID
			{
				static constexpr uint16_t tag{ 583 };
			};

			// MassStatusReqID(584): STRING
			struct MassStatusReqID
			{
				static constexpr uint16_t tag{ 584 };
			};

			// MassStatusReqType(585): INT
			struct MassStatusReqType
			{
				static constexpr uint16_t tag{ 585 };
				static constexpr int32_t STATUSSECURITY{ 1 };
				static constexpr int32_t STATUSUNDERLYINGSECURITY{ 2 };
				static constexpr int32_t STATUSPRODUCT{ 3 };
				static constexpr int32_t STATUSCFICODE{ 4 };
				static constexpr int32_t STATUSSECURITYTYPE{ 5 };
				static constexpr int32_t STATUSTRDSESSION{ 6 };
				static constexpr int32_t STATUSALLORDERS{ 7 };
				static constexpr int32_t STATUSPARTYID{ 8 };
			};

			// OrigOrdModTime(586): UTCTIMESTAMP
			struct OrigOrdModTime
			{
				static constexpr uint16_t tag{ 586 };
			};

			// LegSettlType(587): CHAR
			struct LegSettlType
			{
				static constexpr uint16_t tag{ 587 };
			};

			// LegSettlDate(588): LOCALMKTDATE
			struct LegSettlDate
			{
				static constexpr uint16_t tag{ 588 };
			};

			// DayBookingInst(589): CHAR
			struct DayBookingInst
			{
				static constexpr uint16_t tag{ 589 };
				static constexpr char CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_AUTO{ '0' };
				static constexpr char SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_SPEAK_FIRST{ '1' };
				static constexpr char ACCUMULATE{ '2' };
			};

			// BookingUnit(590): CHAR
			struct BookingUnit
			{
				static constexpr uint16_t tag{ 590 };
				static constexpr char EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT{ '0' };
				static constexpr char AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER{ '1' };
				static constexpr char AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE{ '2' };
			};

			// PreallocMethod(591): CHAR
			struct PreallocMethod
			{
				static constexpr uint16_t tag{ 591 };
				static constexpr char PRORATA{ '0' };
				static constexpr char DO_NOT_PRORATA_DISCUSS_FIRST{ '1' };
			};

			// UnderlyingCountryOfIssue(592): COUNTRY
			struct UnderlyingCountryOfIssue
			{
				static constexpr uint16_t tag{ 592 };
			};

			// UnderlyingStateOrProvinceOfIssue(593): STRING
			struct UnderlyingStateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 593 };
			};

			// UnderlyingLocaleOfIssue(594): STRING
			struct UnderlyingLocaleOfIssue
			{
				static constexpr uint16_t tag{ 594 };
			};

			// UnderlyingInstrRegistry(595): STRING
			struct UnderlyingInstrRegistry
			{
				static constexpr uint16_t tag{ 595 };
			};

			// LegCountryOfIssue(596): COUNTRY
			struct LegCountryOfIssue
			{
				static constexpr uint16_t tag{ 596 };
			};

			// LegStateOrProvinceOfIssue(597): STRING
			struct LegStateOrProvinceOfIssue
			{
				static constexpr uint16_t tag{ 597 };
			};

			// LegLocaleOfIssue(598): STRING
			struct LegLocaleOfIssue
			{
				static constexpr uint16_t tag{ 598 };
			};

			// LegInstrRegistry(599): STRING
			struct LegInstrRegistry
			{
				static constexpr uint16_t tag{ 599 };
			};

			// LegSymbol(600): STRING
			struct LegSymbol
			{
				static constexpr uint16_t tag{ 600 };
			};

			// LegSymbolSfx(601): STRING
			struct LegSymbolSfx
			{
				static constexpr uint16_t tag{ 601 };
			};

			// LegSecurityID(602): STRING
			struct LegSecurityID
			{
				static constexpr uint16_t tag{ 602 };
			};

			// LegSecurityIDSource(603): STRING
			struct LegSecurityIDSource
			{
				static constexpr uint16_t tag{ 603 };
			};

			// NoLegSecurityAltID(604): STRING
			struct NoLegSecurityAltID
			{
				static constexpr uint16_t tag{ 604 };
			};

			// LegSecurityAltID(605): STRING
			struct LegSecurityAltID
			{
				static constexpr uint16_t tag{ 605 };
			};

			// LegSecurityAltIDSource(606): STRING
			struct LegSecurityAltIDSource
			{
				static constexpr uint16_t tag{ 606 };
			};

			// LegProduct(607): INT
			struct LegProduct
			{
				static constexpr uint16_t tag{ 607 };
			};

			// LegCFICode(608): STRING
			struct LegCFICode
			{
				static constexpr uint16_t tag{ 608 };
			};

			// LegSecurityType(609): STRING
			struct LegSecurityType
			{
				static constexpr uint16_t tag{ 609 };
			};

			// LegMaturityMonthYear(610): MONTHYEAR
			struct LegMaturityMonthYear
			{
				static constexpr uint16_t tag{ 610 };
			};

			// LegMaturityDate(611): LOCALMKTDATE
			struct LegMaturityDate
			{
				static constexpr uint16_t tag{ 611 };
			};

			// LegStrikePrice(612): PRICE
			struct LegStrikePrice
			{
				static constexpr uint16_t tag{ 612 };
			};

			// LegOptAttribute(613): CHAR
			struct LegOptAttribute
			{
				static constexpr uint16_t tag{ 613 };
			};

			// LegContractMultiplier(614): FLOAT
			struct LegContractMultiplier
			{
				static constexpr uint16_t tag{ 614 };
			};

			// LegCouponRate(615): PERCENTAGE
			struct LegCouponRate
			{
				static constexpr uint16_t tag{ 615 };
			};

			// LegSecurityExchange(616): EXCHANGE
			struct LegSecurityExchange
			{
				static constexpr uint16_t tag{ 616 };
			};

			// LegIssuer(617): STRING
			struct LegIssuer
			{
				static constexpr uint16_t tag{ 617 };
			};

			// EncodedLegIssuerLen(618): LENGTH
			struct EncodedLegIssuerLen
			{
				static constexpr uint16_t tag{ 618 };
			};

			// EncodedLegIssuer(619): DATA
			struct EncodedLegIssuer
			{
				static constexpr uint16_t tag{ 619 };
			};

			// LegSecurityDesc(620): STRING
			struct LegSecurityDesc
			{
				static constexpr uint16_t tag{ 620 };
			};

			// EncodedLegSecurityDescLen(621): LENGTH
			struct EncodedLegSecurityDescLen
			{
				static constexpr uint16_t tag{ 621 };
			};

			// EncodedLegSecurityDesc(622): DATA
			struct EncodedLegSecurityDesc
			{
				static constexpr uint16_t tag{ 622 };
			};

			// LegRatioQty(623): FLOAT
			struct LegRatioQty
			{
				static constexpr uint16_t tag{ 623 };
			};

			// LegSide(624): CHAR
			struct LegSide
			{
				static constexpr uint16_t tag{ 624 };
			};

			// TradingSessionSubID(625): STRING
			struct TradingSessionSubID
			{
				static constexpr uint16_t tag{ 625 };
			};

			// AllocType(626): INT
			struct AllocType
			{
				static constexpr uint16_t tag{ 626 };
				static constexpr int32_t BUYSIDECALC{ 1 };
				static constexpr int32_t BUYSIDEPRELIM{ 2 };
				static constexpr int32_t SELLSIDECALC{ 3 };
				static constexpr int32_t SELLSIDECALCWITHOUTPRELIM{ 4 };
				static constexpr int32_t BUYSIDEREADYTOBOOKSINGLE{ 5 };
				static constexpr int32_t BUYSIDEREADYTOBOOKCOMBINED{ 6 };
				static constexpr int32_t WAREHOUSEINSTRUCTION{ 7 };
				static constexpr int32_t REQUESTTOINTERMEDIARY{ 8 };
			};

			// NoHops(627): NUMINGROUP
			struct NoHops
			{
				static constexpr uint16_t tag{ 627 };
			};

			// HopCompID(628): STRING
			struct HopCompID
			{
				static constexpr uint16_t tag{ 628 };
			};

			// HopSendingTime(629): UTCTIMESTAMP
			struct HopSendingTime
			{
				static constexpr uint16_t tag{ 629 };
			};

			// HopRefID(630): SEQNUM
			struct HopRefID
			{
				static constexpr uint16_t tag{ 630 };
			};

			// MidPx(631): PRICE
			struct MidPx
			{
				static constexpr uint16_t tag{ 631 };
			};

			// BidYield(632): PERCENTAGE
			struct BidYield
			{
				static constexpr uint16_t tag{ 632 };
			};

			// MidYield(633): PERCENTAGE
			struct MidYield
			{
				static constexpr uint16_t tag{ 633 };
			};

			// OfferYield(634): PERCENTAGE
			struct OfferYield
			{
				static constexpr uint16_t tag{ 634 };
			};

			// ClearingFeeIndicator(635): STRING
			struct ClearingFeeIndicator
			{
				static constexpr uint16_t tag{ 635 };
				static inline const std::string _1STYEARDELEGATE{ "1" };
				static inline const std::string _2NDYEARDELEGATE{ "2" };
				static inline const std::string _3RDYEARDELEGATE{ "3" };
				static inline const std::string _4THYEARDELEGATE{ "4" };
				static inline const std::string _5THYEARDELEGATE{ "5" };
				static inline const std::string _6THYEARDELEGATE{ "9" };
				static inline const std::string CBOEMEMBER{ "B" };
				static inline const std::string NONMEMBERCUSTOMER{ "C" };
				static inline const std::string EQUITYCLEARINGMEMBER{ "E" };
				static inline const std::string FULLASSOCIATEMEMBER{ "F" };
				static inline const std::string _106H106J{ "H" };
				static inline const std::string GIMIDEMCOMMEMBERSHIP{ "I" };
				static inline const std::string LESSEE106F{ "L" };
				static inline const std::string ALLOTHERS{ "M" };
			};

			// WorkingIndicator(636): BOOLEAN
			struct WorkingIndicator
			{
				static constexpr uint16_t tag{ 636 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// LegLastPx(637): PRICE
			struct LegLastPx
			{
				static constexpr uint16_t tag{ 637 };
			};

			// PriorityIndicator(638): INT
			struct PriorityIndicator
			{
				static constexpr uint16_t tag{ 638 };
				static constexpr int32_t PRIORITYUNCHANGED{ 0 };
				static constexpr int32_t LOSTPRIORITY{ 1 };
			};

			// PriceImprovement(639): PRICEOFFSET
			struct PriceImprovement
			{
				static constexpr uint16_t tag{ 639 };
			};

			// Price2(640): PRICE
			struct Price2
			{
				static constexpr uint16_t tag{ 640 };
			};

			// LastForwardPoints2(641): PRICEOFFSET
			struct LastForwardPoints2
			{
				static constexpr uint16_t tag{ 641 };
			};

			// BidForwardPoints2(642): PRICEOFFSET
			struct BidForwardPoints2
			{
				static constexpr uint16_t tag{ 642 };
			};

			// OfferForwardPoints2(643): PRICEOFFSET
			struct OfferForwardPoints2
			{
				static constexpr uint16_t tag{ 643 };
			};

			// RFQReqID(644): STRING
			struct RFQReqID
			{
				static constexpr uint16_t tag{ 644 };
			};

			// MktBidPx(645): PRICE
			struct MktBidPx
			{
				static constexpr uint16_t tag{ 645 };
			};

			// MktOfferPx(646): PRICE
			struct MktOfferPx
			{
				static constexpr uint16_t tag{ 646 };
			};

			// MinBidSize(647): QTY
			struct MinBidSize
			{
				static constexpr uint16_t tag{ 647 };
			};

			// MinOfferSize(648): QTY
			struct MinOfferSize
			{
				static constexpr uint16_t tag{ 648 };
			};

			// QuoteStatusReqID(649): STRING
			struct QuoteStatusReqID
			{
				static constexpr uint16_t tag{ 649 };
			};

			// LegalConfirm(650): BOOLEAN
			struct LegalConfirm
			{
				static constexpr uint16_t tag{ 650 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// UnderlyingLastPx(651): PRICE
			struct UnderlyingLastPx
			{
				static constexpr uint16_t tag{ 651 };
			};

			// UnderlyingLastQty(652): QTY
			struct UnderlyingLastQty
			{
				static constexpr uint16_t tag{ 652 };
			};

			// SecDefStatus(653): INT
			struct SecDefStatus
			{
				static constexpr uint16_t tag{ 653 };
				static constexpr int32_t PENDINGAPPROVAL{ 0 };
				static constexpr int32_t APPROVEDACCEPTED{ 1 };
				static constexpr int32_t REJECTED{ 2 };
				static constexpr int32_t UNAUTHORIZEDREQUEST{ 3 };
				static constexpr int32_t INVALIDDEFINITIONREQUEST{ 4 };
			};

			// LegRefID(654): STRING
			struct LegRefID
			{
				static constexpr uint16_t tag{ 654 };
			};

			// ContraLegRefID(655): STRING
			struct ContraLegRefID
			{
				static constexpr uint16_t tag{ 655 };
			};

			// SettlCurrBidFxRate(656): FLOAT
			struct SettlCurrBidFxRate
			{
				static constexpr uint16_t tag{ 656 };
			};

			// SettlCurrOfferFxRate(657): FLOAT
			struct SettlCurrOfferFxRate
			{
				static constexpr uint16_t tag{ 657 };
			};

			// QuoteRequestRejectReason(658): INT
			struct QuoteRequestRejectReason
			{
				static constexpr uint16_t tag{ 658 };
				static constexpr int32_t UNKNOWNSYM{ 1 };
				static constexpr int32_t PASS{ 10 };
				static constexpr int32_t EXCHANGECLOSED{ 2 };
				static constexpr int32_t QUOTEREQUESTEXLIMIT{ 3 };
				static constexpr int32_t TOOLATE{ 4 };
				static constexpr int32_t INVPRICE{ 5 };
				static constexpr int32_t NOTAUTHTOREQQUOTE{ 6 };
				static constexpr int32_t NOMATCHFORINQUIRY{ 7 };
				static constexpr int32_t NOMARKETFORINSTRUMENT{ 8 };
				static constexpr int32_t NOINVENTORY{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// SideComplianceID(659): STRING
			struct SideComplianceID
			{
				static constexpr uint16_t tag{ 659 };
			};

			// AcctIDSource(660): INT
			struct AcctIDSource
			{
				static constexpr uint16_t tag{ 660 };
				static constexpr int32_t BIC{ 1 };
				static constexpr int32_t SIDCODE{ 2 };
				static constexpr int32_t TFMGSPTA{ 3 };
				static constexpr int32_t OMGEOALERTID{ 4 };
				static constexpr int32_t DTCCCODE{ 5 };
				static constexpr int32_t OTHER{ 99 };
			};

			// AllocAcctIDSource(661): INT
			struct AllocAcctIDSource
			{
				static constexpr uint16_t tag{ 661 };
			};

			// BenchmarkPrice(662): PRICE
			struct BenchmarkPrice
			{
				static constexpr uint16_t tag{ 662 };
			};

			// BenchmarkPriceType(663): INT
			struct BenchmarkPriceType
			{
				static constexpr uint16_t tag{ 663 };
			};

			// ConfirmID(664): STRING
			struct ConfirmID
			{
				static constexpr uint16_t tag{ 664 };
			};

			// ConfirmStatus(665): INT
			struct ConfirmStatus
			{
				static constexpr uint16_t tag{ 665 };
				static constexpr int32_t RECEIVED{ 1 };
				static constexpr int32_t MISMATCHEDACCOUNT{ 2 };
				static constexpr int32_t MISSINGSETTLEMENTINSTRUCTIONS{ 3 };
				static constexpr int32_t CONFIRMED{ 4 };
				static constexpr int32_t REQUESTREJECTED{ 5 };
			};

			// ConfirmTransType(666): INT
			struct ConfirmTransType
			{
				static constexpr uint16_t tag{ 666 };
				static constexpr int32_t NEW{ 0 };
				static constexpr int32_t REPLACE{ 1 };
				static constexpr int32_t CANCEL{ 2 };
			};

			// ContractSettlMonth(667): MONTHYEAR
			struct ContractSettlMonth
			{
				static constexpr uint16_t tag{ 667 };
			};

			// DeliveryForm(668): INT
			struct DeliveryForm
			{
				static constexpr uint16_t tag{ 668 };
				static constexpr int32_t BOOKENTRY{ 1 };
				static constexpr int32_t BEARER{ 2 };
			};

			// LastParPx(669): PRICE
			struct LastParPx
			{
				static constexpr uint16_t tag{ 669 };
			};

			// NoLegAllocs(670): NUMINGROUP
			struct NoLegAllocs
			{
				static constexpr uint16_t tag{ 670 };
			};

			// LegAllocAccount(671): STRING
			struct LegAllocAccount
			{
				static constexpr uint16_t tag{ 671 };
			};

			// LegIndividualAllocID(672): STRING
			struct LegIndividualAllocID
			{
				static constexpr uint16_t tag{ 672 };
			};

			// LegAllocQty(673): QTY
			struct LegAllocQty
			{
				static constexpr uint16_t tag{ 673 };
			};

			// LegAllocAcctIDSource(674): STRING
			struct LegAllocAcctIDSource
			{
				static constexpr uint16_t tag{ 674 };
			};

			// LegSettlCurrency(675): CURRENCY
			struct LegSettlCurrency
			{
				static constexpr uint16_t tag{ 675 };
			};

			// LegBenchmarkCurveCurrency(676): CURRENCY
			struct LegBenchmarkCurveCurrency
			{
				static constexpr uint16_t tag{ 676 };
			};

			// LegBenchmarkCurveName(677): STRING
			struct LegBenchmarkCurveName
			{
				static constexpr uint16_t tag{ 677 };
			};

			// LegBenchmarkCurvePoint(678): STRING
			struct LegBenchmarkCurvePoint
			{
				static constexpr uint16_t tag{ 678 };
			};

			// LegBenchmarkPrice(679): PRICE
			struct LegBenchmarkPrice
			{
				static constexpr uint16_t tag{ 679 };
			};

			// LegBenchmarkPriceType(680): INT
			struct LegBenchmarkPriceType
			{
				static constexpr uint16_t tag{ 680 };
			};

			// LegBidPx(681): PRICE
			struct LegBidPx
			{
				static constexpr uint16_t tag{ 681 };
			};

			// LegIOIQty(682): STRING
			struct LegIOIQty
			{
				static constexpr uint16_t tag{ 682 };
			};

			// NoLegStipulations(683): NUMINGROUP
			struct NoLegStipulations
			{
				static constexpr uint16_t tag{ 683 };
			};

			// LegOfferPx(684): PRICE
			struct LegOfferPx
			{
				static constexpr uint16_t tag{ 684 };
			};

			// LegOrderQty(685): QTY
			struct LegOrderQty
			{
				static constexpr uint16_t tag{ 685 };
			};

			// LegPriceType(686): INT
			struct LegPriceType
			{
				static constexpr uint16_t tag{ 686 };
			};

			// LegQty(687): QTY
			struct LegQty
			{
				static constexpr uint16_t tag{ 687 };
			};

			// LegStipulationType(688): STRING
			struct LegStipulationType
			{
				static constexpr uint16_t tag{ 688 };
			};

			// LegStipulationValue(689): STRING
			struct LegStipulationValue
			{
				static constexpr uint16_t tag{ 689 };
			};

			// LegSwapType(690): INT
			struct LegSwapType
			{
				static constexpr uint16_t tag{ 690 };
				static constexpr int32_t PARFORPAR{ 1 };
				static constexpr int32_t MODIFIEDDURATION{ 2 };
				static constexpr int32_t RISK{ 4 };
				static constexpr int32_t PROCEEDS{ 5 };
			};

			// Pool(691): STRING
			struct Pool
			{
				static constexpr uint16_t tag{ 691 };
			};

			// QuotePriceType(692): INT
			struct QuotePriceType
			{
				static constexpr uint16_t tag{ 692 };
				static constexpr int32_t PERCENT{ 1 };
				static constexpr int32_t YIELD{ 10 };
				static constexpr int32_t PERSHARE{ 2 };
				static constexpr int32_t FIXEDAMOUNT{ 3 };
				static constexpr int32_t DISCOUNT{ 4 };
				static constexpr int32_t PREMIUM{ 5 };
				static constexpr int32_t BASISPOINTSRELATIVETOBENCHMARK{ 6 };
				static constexpr int32_t TEDPRICE{ 7 };
				static constexpr int32_t TEDYIELD{ 8 };
				static constexpr int32_t YIELDSPREADSWAPS{ 9 };
			};

			// QuoteRespID(693): STRING
			struct QuoteRespID
			{
				static constexpr uint16_t tag{ 693 };
			};

			// QuoteRespType(694): INT
			struct QuoteRespType
			{
				static constexpr uint16_t tag{ 694 };
				static constexpr int32_t HITLIFT{ 1 };
				static constexpr int32_t COUNTER{ 2 };
				static constexpr int32_t EXPIRED{ 3 };
				static constexpr int32_t COVER{ 4 };
				static constexpr int32_t DONEAWAY{ 5 };
				static constexpr int32_t PASS{ 6 };
			};

			// QuoteQualifier(695): CHAR
			struct QuoteQualifier
			{
				static constexpr uint16_t tag{ 695 };
			};

			// YieldRedemptionDate(696): LOCALMKTDATE
			struct YieldRedemptionDate
			{
				static constexpr uint16_t tag{ 696 };
			};

			// YieldRedemptionPrice(697): PRICE
			struct YieldRedemptionPrice
			{
				static constexpr uint16_t tag{ 697 };
			};

			// YieldRedemptionPriceType(698): INT
			struct YieldRedemptionPriceType
			{
				static constexpr uint16_t tag{ 698 };
			};

			// BenchmarkSecurityID(699): STRING
			struct BenchmarkSecurityID
			{
				static constexpr uint16_t tag{ 699 };
			};

			// ReversalIndicator(700): BOOLEAN
			struct ReversalIndicator
			{
				static constexpr uint16_t tag{ 700 };
			};

			// YieldCalcDate(701): LOCALMKTDATE
			struct YieldCalcDate
			{
				static constexpr uint16_t tag{ 701 };
			};

			// NoPositions(702): NUMINGROUP
			struct NoPositions
			{
				static constexpr uint16_t tag{ 702 };
			};

			// PosType(703): STRING
			struct PosType
			{
				static constexpr uint16_t tag{ 703 };
				static inline const std::string ALLOCATIONTRADEQTY{ "ALC" };
				static inline const std::string OPTIONASSIGNMENT{ "AS" };
				static inline const std::string ASOFTRADEQTY{ "ASF" };
				static inline const std::string DELIVERYQTY{ "DLV" };
				static inline const std::string ELECTRONICTRADEQTY{ "ETR" };
				static inline const std::string OPTIONEXERCISEQTY{ "EX" };
				static inline const std::string ENDOFDAYQTY{ "FIN" };
				static inline const std::string INTRASPREADQTY{ "IAS" };
				static inline const std::string INTERSPREADQTY{ "IES" };
				static inline const std::string ADJUSTMENTQTY{ "PA" };
				static inline const std::string PITTRADEQTY{ "PIT" };
				static inline const std::string STARTOFDAYQTY{ "SOD" };
				static inline const std::string INTEGRALSPLIT{ "SPL" };
				static inline const std::string TRANSACTIONFROMASSIGNMENT{ "TA" };
				static inline const std::string TOTALTRANSACTIONQTY{ "TOT" };
				static inline const std::string TRANSACTIONQUANTITY{ "TQ" };
				static inline const std::string TRANSFERTRADEQTY{ "TRF" };
				static inline const std::string TRANSACTIONFROMEXERCISE{ "TX" };
				static inline const std::string CROSSMARGINQTY{ "XM" };
			};

			// LongQty(704): QTY
			struct LongQty
			{
				static constexpr uint16_t tag{ 704 };
			};

			// ShortQty(705): QTY
			struct ShortQty
			{
				static constexpr uint16_t tag{ 705 };
			};

			// PosQtyStatus(706): INT
			struct PosQtyStatus
			{
				static constexpr uint16_t tag{ 706 };
				static constexpr int32_t SUBMITTED{ 0 };
				static constexpr int32_t ACCEPTED{ 1 };
				static constexpr int32_t REJECTED{ 2 };
			};

			// PosAmtType(707): STRING
			struct PosAmtType
			{
				static constexpr uint16_t tag{ 707 };
				static inline const std::string CASHAMOUNTCORPORATEEVENT{ "CASH" };
				static inline const std::string CASHRESIDUALAMOUNT{ "CRES" };
				static inline const std::string FINALMARKTOMARKETAMOUNT{ "FMTM" };
				static inline const std::string INCREMENTALMARKTOMARKETAMOUNT{ "IMTM" };
				static inline const std::string PREMIUMAMOUNT{ "PREM" };
				static inline const std::string STARTOFDAYMARKTOMARKETAMOUNT{ "SMTM" };
				static inline const std::string TRADEVARIATIONAMOUNT{ "TVAR" };
				static inline const std::string VALUEADJUSTEDAMOUNT{ "VADJ" };
			};

			// PosAmt(708): AMT
			struct PosAmt
			{
				static constexpr uint16_t tag{ 708 };
			};

			// PosTransType(709): INT
			struct PosTransType
			{
				static constexpr uint16_t tag{ 709 };
				static constexpr int32_t EXERCISE{ 1 };
				static constexpr int32_t DONOTEXERCISE{ 2 };
				static constexpr int32_t POSITIONADJUSTMENT{ 3 };
				static constexpr int32_t POSITIONCHANGESUBMISSIONMARGINDISPOSITION{ 4 };
				static constexpr int32_t PLEDGE{ 5 };
			};

			// PosReqID(710): STRING
			struct PosReqID
			{
				static constexpr uint16_t tag{ 710 };
			};

			// NoUnderlyings(711): NUMINGROUP
			struct NoUnderlyings
			{
				static constexpr uint16_t tag{ 711 };
			};

			// PosMaintAction(712): INT
			struct PosMaintAction
			{
				static constexpr uint16_t tag{ 712 };
				static constexpr int32_t NEW{ 1 };
				static constexpr int32_t REPLACE{ 2 };
				static constexpr int32_t CANCEL{ 3 };
			};

			// OrigPosReqRefID(713): STRING
			struct OrigPosReqRefID
			{
				static constexpr uint16_t tag{ 713 };
			};

			// PosMaintRptRefID(714): STRING
			struct PosMaintRptRefID
			{
				static constexpr uint16_t tag{ 714 };
			};

			// ClearingBusinessDate(715): LOCALMKTDATE
			struct ClearingBusinessDate
			{
				static constexpr uint16_t tag{ 715 };
			};

			// SettlSessID(716): STRING
			struct SettlSessID
			{
				static constexpr uint16_t tag{ 716 };
			};

			// SettlSessSubID(717): STRING
			struct SettlSessSubID
			{
				static constexpr uint16_t tag{ 717 };
			};

			// AdjustmentType(718): INT
			struct AdjustmentType
			{
				static constexpr uint16_t tag{ 718 };
				static constexpr int32_t PROCESSREQUESTASMARGINDISPOSITION{ 0 };
				static constexpr int32_t DELTAPLUS{ 1 };
				static constexpr int32_t DELTAMINUS{ 2 };
				static constexpr int32_t FINAL{ 3 };
			};

			// ContraryInstructionIndicator(719): BOOLEAN
			struct ContraryInstructionIndicator
			{
				static constexpr uint16_t tag{ 719 };
			};

			// PriorSpreadIndicator(720): BOOLEAN
			struct PriorSpreadIndicator
			{
				static constexpr uint16_t tag{ 720 };
			};

			// PosMaintRptID(721): STRING
			struct PosMaintRptID
			{
				static constexpr uint16_t tag{ 721 };
			};

			// PosMaintStatus(722): INT
			struct PosMaintStatus
			{
				static constexpr uint16_t tag{ 722 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t ACCEPTEDWITHWARNINGS{ 1 };
				static constexpr int32_t REJECTED{ 2 };
				static constexpr int32_t COMPLETED{ 3 };
				static constexpr int32_t COMPLETEDWITHWARNINGS{ 4 };
			};

			// PosMaintResult(723): INT
			struct PosMaintResult
			{
				static constexpr uint16_t tag{ 723 };
				static constexpr int32_t SUCCESSFULCOMPLETION{ 0 };
				static constexpr int32_t REJECTED{ 1 };
				static constexpr int32_t OTHER{ 99 };
			};

			// PosReqType(724): INT
			struct PosReqType
			{
				static constexpr uint16_t tag{ 724 };
				static constexpr int32_t POSITIONS{ 0 };
				static constexpr int32_t TRADES{ 1 };
				static constexpr int32_t EXERCISES{ 2 };
				static constexpr int32_t ASSIGNMENTS{ 3 };
			};

			// ResponseTransportType(725): INT
			struct ResponseTransportType
			{
				static constexpr uint16_t tag{ 725 };
				static constexpr int32_t INBAND{ 0 };
				static constexpr int32_t OUTOFBAND{ 1 };
			};

			// ResponseDestination(726): STRING
			struct ResponseDestination
			{
				static constexpr uint16_t tag{ 726 };
			};

			// TotalNumPosReports(727): INT
			struct TotalNumPosReports
			{
				static constexpr uint16_t tag{ 727 };
			};

			// PosReqResult(728): INT
			struct PosReqResult
			{
				static constexpr uint16_t tag{ 728 };
				static constexpr int32_t VALIDREQUEST{ 0 };
				static constexpr int32_t INVALIDORUNSUPPORTEDREQUEST{ 1 };
				static constexpr int32_t NOPOSITIONSFOUNDTHATMATCHCRITERIA{ 2 };
				static constexpr int32_t NOTAUTHORIZEDTOREQUESTPOSITIONS{ 3 };
				static constexpr int32_t REQUESTFORPOSITIONNOTSUPPORTED{ 4 };
				static constexpr int32_t OTHER{ 99 };
			};

			// PosReqStatus(729): INT
			struct PosReqStatus
			{
				static constexpr uint16_t tag{ 729 };
				static constexpr int32_t COMPLETED{ 0 };
				static constexpr int32_t COMPLETEDWITHWARNINGS{ 1 };
				static constexpr int32_t REJECTED{ 2 };
			};

			// SettlPrice(730): PRICE
			struct SettlPrice
			{
				static constexpr uint16_t tag{ 730 };
			};

			// SettlPriceType(731): INT
			struct SettlPriceType
			{
				static constexpr uint16_t tag{ 731 };
				static constexpr int32_t FINAL{ 1 };
				static constexpr int32_t THEORETICAL{ 2 };
			};

			// UnderlyingSettlPrice(732): PRICE
			struct UnderlyingSettlPrice
			{
				static constexpr uint16_t tag{ 732 };
			};

			// UnderlyingSettlPriceType(733): INT
			struct UnderlyingSettlPriceType
			{
				static constexpr uint16_t tag{ 733 };
			};

			// PriorSettlPrice(734): PRICE
			struct PriorSettlPrice
			{
				static constexpr uint16_t tag{ 734 };
			};

			// NoQuoteQualifiers(735): NUMINGROUP
			struct NoQuoteQualifiers
			{
				static constexpr uint16_t tag{ 735 };
			};

			// AllocSettlCurrency(736): CURRENCY
			struct AllocSettlCurrency
			{
				static constexpr uint16_t tag{ 736 };
			};

			// AllocSettlCurrAmt(737): AMT
			struct AllocSettlCurrAmt
			{
				static constexpr uint16_t tag{ 737 };
			};

			// InterestAtMaturity(738): AMT
			struct InterestAtMaturity
			{
				static constexpr uint16_t tag{ 738 };
			};

			// LegDatedDate(739): LOCALMKTDATE
			struct LegDatedDate
			{
				static constexpr uint16_t tag{ 739 };
			};

			// LegPool(740): STRING
			struct LegPool
			{
				static constexpr uint16_t tag{ 740 };
			};

			// AllocInterestAtMaturity(741): AMT
			struct AllocInterestAtMaturity
			{
				static constexpr uint16_t tag{ 741 };
			};

			// AllocAccruedInterestAmt(742): AMT
			struct AllocAccruedInterestAmt
			{
				static constexpr uint16_t tag{ 742 };
			};

			// DeliveryDate(743): LOCALMKTDATE
			struct DeliveryDate
			{
				static constexpr uint16_t tag{ 743 };
			};

			// AssignmentMethod(744): CHAR
			struct AssignmentMethod
			{
				static constexpr uint16_t tag{ 744 };
				static constexpr char PRORATA{ 'P' };
				static constexpr char RANDOM{ 'R' };
			};

			// AssignmentUnit(745): QTY
			struct AssignmentUnit
			{
				static constexpr uint16_t tag{ 745 };
			};

			// OpenInterest(746): AMT
			struct OpenInterest
			{
				static constexpr uint16_t tag{ 746 };
			};

			// ExerciseMethod(747): CHAR
			struct ExerciseMethod
			{
				static constexpr uint16_t tag{ 747 };
				static constexpr char AUTOMATIC{ 'A' };
				static constexpr char MANUAL{ 'M' };
			};

			// TotNumTradeReports(748): INT
			struct TotNumTradeReports
			{
				static constexpr uint16_t tag{ 748 };
			};

			// TradeRequestResult(749): INT
			struct TradeRequestResult
			{
				static constexpr uint16_t tag{ 749 };
				static constexpr int32_t SUCCESSFUL{ 0 };
				static constexpr int32_t INVALIDORUNKNOWNINSTRUMENT{ 1 };
				static constexpr int32_t INVALIDTYPEOFTRADEREQUESTED{ 2 };
				static constexpr int32_t INVALIDPARTIES{ 3 };
				static constexpr int32_t INVALIDTRANSPORTTYPEREQUESTED{ 4 };
				static constexpr int32_t INVALIDDESTINATIONREQUESTED{ 5 };
				static constexpr int32_t TRADEREQUESTTYPENOTSUPPORTED{ 8 };
				static constexpr int32_t UNAUTHORIZEDFORTRADECAPTUREREPORTREQUEST{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// TradeRequestStatus(750): INT
			struct TradeRequestStatus
			{
				static constexpr uint16_t tag{ 750 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t COMPLETED{ 1 };
				static constexpr int32_t REJECTED{ 2 };
			};

			// TradeReportRejectReason(751): INT
			struct TradeReportRejectReason
			{
				static constexpr uint16_t tag{ 751 };
				static constexpr int32_t SUCCESSFULDEFAULT{ 0 };
				static constexpr int32_t INVALIDPARTYINFORMATION{ 1 };
				static constexpr int32_t UNKNOWNINSTRUMENT{ 2 };
				static constexpr int32_t UNAUTHORIZEDTOREPORTTRADES{ 3 };
				static constexpr int32_t INVALIDTRADETYPE{ 4 };
				static constexpr int32_t OTHER{ 99 };
			};

			// SideMultiLegReportingType(752): INT
			struct SideMultiLegReportingType
			{
				static constexpr uint16_t tag{ 752 };
				static constexpr int32_t SINGLESECURITY{ 1 };
				static constexpr int32_t INDIVIDUALLEGOFAMULTILEGSECURITY{ 2 };
				static constexpr int32_t MULTILEGSECURITY{ 3 };
			};

			// NoPosAmt(753): NUMINGROUP
			struct NoPosAmt
			{
				static constexpr uint16_t tag{ 753 };
			};

			// AutoAcceptIndicator(754): BOOLEAN
			struct AutoAcceptIndicator
			{
				static constexpr uint16_t tag{ 754 };
			};

			// AllocReportID(755): STRING
			struct AllocReportID
			{
				static constexpr uint16_t tag{ 755 };
			};

			// NoNested2PartyIDs(756): NUMINGROUP
			struct NoNested2PartyIDs
			{
				static constexpr uint16_t tag{ 756 };
			};

			// Nested2PartyID(757): STRING
			struct Nested2PartyID
			{
				static constexpr uint16_t tag{ 757 };
			};

			// Nested2PartyIDSource(758): CHAR
			struct Nested2PartyIDSource
			{
				static constexpr uint16_t tag{ 758 };
			};

			// Nested2PartyRole(759): INT
			struct Nested2PartyRole
			{
				static constexpr uint16_t tag{ 759 };
			};

			// Nested2PartySubID(760): STRING
			struct Nested2PartySubID
			{
				static constexpr uint16_t tag{ 760 };
			};

			// BenchmarkSecurityIDSource(761): STRING
			struct BenchmarkSecurityIDSource
			{
				static constexpr uint16_t tag{ 761 };
			};

			// SecuritySubType(762): STRING
			struct SecuritySubType
			{
				static constexpr uint16_t tag{ 762 };
			};

			// UnderlyingSecuritySubType(763): STRING
			struct UnderlyingSecuritySubType
			{
				static constexpr uint16_t tag{ 763 };
			};

			// LegSecuritySubType(764): STRING
			struct LegSecuritySubType
			{
				static constexpr uint16_t tag{ 764 };
			};

			// AllowableOneSidednessPct(765): PERCENTAGE
			struct AllowableOneSidednessPct
			{
				static constexpr uint16_t tag{ 765 };
			};

			// AllowableOneSidednessValue(766): AMT
			struct AllowableOneSidednessValue
			{
				static constexpr uint16_t tag{ 766 };
			};

			// AllowableOneSidednessCurr(767): CURRENCY
			struct AllowableOneSidednessCurr
			{
				static constexpr uint16_t tag{ 767 };
			};

			// NoTrdRegTimestamps(768): NUMINGROUP
			struct NoTrdRegTimestamps
			{
				static constexpr uint16_t tag{ 768 };
			};

			// TrdRegTimestamp(769): UTCTIMESTAMP
			struct TrdRegTimestamp
			{
				static constexpr uint16_t tag{ 769 };
			};

			// TrdRegTimestampType(770): INT
			struct TrdRegTimestampType
			{
				static constexpr uint16_t tag{ 770 };
				static constexpr int32_t EXECUTIONTIME{ 1 };
				static constexpr int32_t TIMEIN{ 2 };
				static constexpr int32_t TIMEOUT{ 3 };
				static constexpr int32_t BROKERRECEIPT{ 4 };
				static constexpr int32_t BROKEREXECUTION{ 5 };
			};

			// TrdRegTimestampOrigin(771): STRING
			struct TrdRegTimestampOrigin
			{
				static constexpr uint16_t tag{ 771 };
			};

			// ConfirmRefID(772): STRING
			struct ConfirmRefID
			{
				static constexpr uint16_t tag{ 772 };
			};

			// ConfirmType(773): INT
			struct ConfirmType
			{
				static constexpr uint16_t tag{ 773 };
				static constexpr int32_t STATUS{ 1 };
				static constexpr int32_t CONFIRMATION{ 2 };
				static constexpr int32_t CONFIRMATIONREQUESTREJECTED{ 3 };
			};

			// ConfirmRejReason(774): INT
			struct ConfirmRejReason
			{
				static constexpr uint16_t tag{ 774 };
				static constexpr int32_t MISMATCHEDACCOUNT{ 1 };
				static constexpr int32_t MISSINGSETTLEMENTINSTRUCTIONS{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// BookingType(775): INT
			struct BookingType
			{
				static constexpr uint16_t tag{ 775 };
				static constexpr int32_t REGULARBOOKING{ 0 };
				static constexpr int32_t CFDCONTRACTFORDIFFERENCE{ 1 };
				static constexpr int32_t TOTALRETURNSWAP{ 2 };
			};

			// IndividualAllocRejCode(776): INT
			struct IndividualAllocRejCode
			{
				static constexpr uint16_t tag{ 776 };
			};

			// SettlInstMsgID(777): STRING
			struct SettlInstMsgID
			{
				static constexpr uint16_t tag{ 777 };
			};

			// NoSettlInst(778): NUMINGROUP
			struct NoSettlInst
			{
				static constexpr uint16_t tag{ 778 };
			};

			// LastUpdateTime(779): UTCTIMESTAMP
			struct LastUpdateTime
			{
				static constexpr uint16_t tag{ 779 };
			};

			// AllocSettlInstType(780): INT
			struct AllocSettlInstType
			{
				static constexpr uint16_t tag{ 780 };
				static constexpr int32_t USEDEFAULTINSTRUCTIONS{ 0 };
				static constexpr int32_t DERIVEFROMPARAMETERSPROVIDED{ 1 };
				static constexpr int32_t FULLDETAILSPROVIDED{ 2 };
				static constexpr int32_t SSIDBIDSPROVIDED{ 3 };
				static constexpr int32_t PHONEFORINSTRUCTIONS{ 4 };
			};

			// NoSettlPartyIDs(781): NUMINGROUP
			struct NoSettlPartyIDs
			{
				static constexpr uint16_t tag{ 781 };
			};

			// SettlPartyID(782): STRING
			struct SettlPartyID
			{
				static constexpr uint16_t tag{ 782 };
			};

			// SettlPartyIDSource(783): CHAR
			struct SettlPartyIDSource
			{
				static constexpr uint16_t tag{ 783 };
			};

			// SettlPartyRole(784): INT
			struct SettlPartyRole
			{
				static constexpr uint16_t tag{ 784 };
			};

			// SettlPartySubID(785): STRING
			struct SettlPartySubID
			{
				static constexpr uint16_t tag{ 785 };
			};

			// SettlPartySubIDType(786): INT
			struct SettlPartySubIDType
			{
				static constexpr uint16_t tag{ 786 };
			};

			// DlvyInstType(787): CHAR
			struct DlvyInstType
			{
				static constexpr uint16_t tag{ 787 };
				static constexpr char CASH{ 'C' };
				static constexpr char SECURITIES{ 'S' };
			};

			// TerminationType(788): INT
			struct TerminationType
			{
				static constexpr uint16_t tag{ 788 };
				static constexpr int32_t OVERNIGHT{ 1 };
				static constexpr int32_t TERM{ 2 };
				static constexpr int32_t FLEXIBLE{ 3 };
				static constexpr int32_t OPEN{ 4 };
			};

			// NextExpectedMsgSeqNum(789): SEQNUM
			struct NextExpectedMsgSeqNum
			{
				static constexpr uint16_t tag{ 789 };
			};

			// OrdStatusReqID(790): STRING
			struct OrdStatusReqID
			{
				static constexpr uint16_t tag{ 790 };
			};

			// SettlInstReqID(791): STRING
			struct SettlInstReqID
			{
				static constexpr uint16_t tag{ 791 };
			};

			// SettlInstReqRejCode(792): INT
			struct SettlInstReqRejCode
			{
				static constexpr uint16_t tag{ 792 };
				static constexpr int32_t UNABLETOPROCESSREQUEST{ 0 };
				static constexpr int32_t UNKNOWNACCOUNT{ 1 };
				static constexpr int32_t NOMATCHINGSETTLEMENTINSTRUCTIONSFOUND{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// SecondaryAllocID(793): STRING
			struct SecondaryAllocID
			{
				static constexpr uint16_t tag{ 793 };
			};

			// AllocReportType(794): INT
			struct AllocReportType
			{
				static constexpr uint16_t tag{ 794 };
				static constexpr int32_t SELLSIDECALCULATEDUSINGPRELIMINARY{ 3 };
				static constexpr int32_t SELLSIDECALCULATEDWITHOUTPRELIMINARY{ 4 };
				static constexpr int32_t WAREHOUSERECAP{ 5 };
				static constexpr int32_t REQUESTTOINTERMEDIARY{ 8 };
			};

			// AllocReportRefID(795): STRING
			struct AllocReportRefID
			{
				static constexpr uint16_t tag{ 795 };
			};

			// AllocCancReplaceReason(796): INT
			struct AllocCancReplaceReason
			{
				static constexpr uint16_t tag{ 796 };
				static constexpr int32_t ORIGINALDETAILSINCORRECT{ 1 };
				static constexpr int32_t CHANGEINUNDERLYINGORDERDETAILS{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// CopyMsgIndicator(797): BOOLEAN
			struct CopyMsgIndicator
			{
				static constexpr uint16_t tag{ 797 };
			};

			// AllocAccountType(798): INT
			struct AllocAccountType
			{
				static constexpr uint16_t tag{ 798 };
				static constexpr int32_t ACCOUNTISCARRIEDONCUSTOMERSIDEOFBOOKS{ 1 };
				static constexpr int32_t ACCOUNTISCARRIEDONNONCUSTOMERSIDEOFBOOKS{ 2 };
				static constexpr int32_t HOUSETRADER{ 3 };
				static constexpr int32_t FLOORTRADER{ 4 };
				static constexpr int32_t ACCOUNTISCARRIEDONNONCUSTOMERSIDEOFBOOKSANDISCROSSMARGINED{ 6 };
				static constexpr int32_t ACCOUNTISHOUSETRADERANDISCROSSMARGINED{ 7 };
				static constexpr int32_t JBO{ 8 };
			};

			// OrderAvgPx(799): PRICE
			struct OrderAvgPx
			{
				static constexpr uint16_t tag{ 799 };
			};

			// OrderBookingQty(800): QTY
			struct OrderBookingQty
			{
				static constexpr uint16_t tag{ 800 };
			};

			// NoSettlPartySubIDs(801): NUMINGROUP
			struct NoSettlPartySubIDs
			{
				static constexpr uint16_t tag{ 801 };
			};

			// NoPartySubIDs(802): NUMINGROUP
			struct NoPartySubIDs
			{
				static constexpr uint16_t tag{ 802 };
			};

			// PartySubIDType(803): INT
			struct PartySubIDType
			{
				static constexpr uint16_t tag{ 803 };
				static constexpr int32_t FIRM{ 1 };
				static constexpr int32_t SECURITIESACCOUNTNUMBER{ 10 };
				static constexpr int32_t REGISTRATIONNUMBER{ 11 };
				static constexpr int32_t REGISTEREDADDRESS_12{ 12 };
				static constexpr int32_t REGULATORYSTATUS{ 13 };
				static constexpr int32_t REGISTRATIONNAME{ 14 };
				static constexpr int32_t CASHACCOUNT{ 15 };
				static constexpr int32_t BIC{ 16 };
				static constexpr int32_t CSDPARTICIPANTMEMBERCODE{ 17 };
				static constexpr int32_t REGISTEREDADDRESS_18{ 18 };
				static constexpr int32_t FUNDACCOUNTNAME{ 19 };
				static constexpr int32_t PERSON{ 2 };
				static constexpr int32_t TELEXNUMBER{ 20 };
				static constexpr int32_t FAXNUMBER{ 21 };
				static constexpr int32_t SECURITIESACCOUNTNAME{ 22 };
				static constexpr int32_t CASHACCOUNTNAME{ 23 };
				static constexpr int32_t DEPARTMENT{ 24 };
				static constexpr int32_t LOCATIONDESK{ 25 };
				static constexpr int32_t POSITIONACCOUNTTYPE{ 26 };
				static constexpr int32_t SYSTEM{ 3 };
				static constexpr int32_t APPLICATION{ 4 };
				static constexpr int32_t RESERVEDANDAVAILABLEFORBILATERALLYAGREEDUPONUSERDEFINEDVALUES{ 4000 };
				static constexpr int32_t FULLLEGALNAMEOFFIRM{ 5 };
				static constexpr int32_t POSTALADDRESS{ 6 };
				static constexpr int32_t PHONENUMBER{ 7 };
				static constexpr int32_t EMAILADDRESS{ 8 };
				static constexpr int32_t CONTACTNAME{ 9 };
			};

			// NoNestedPartySubIDs(804): NUMINGROUP
			struct NoNestedPartySubIDs
			{
				static constexpr uint16_t tag{ 804 };
			};

			// NestedPartySubIDType(805): INT
			struct NestedPartySubIDType
			{
				static constexpr uint16_t tag{ 805 };
			};

			// NoNested2PartySubIDs(806): NUMINGROUP
			struct NoNested2PartySubIDs
			{
				static constexpr uint16_t tag{ 806 };
			};

			// Nested2PartySubIDType(807): INT
			struct Nested2PartySubIDType
			{
				static constexpr uint16_t tag{ 807 };
			};

			// AllocIntermedReqType(808): INT
			struct AllocIntermedReqType
			{
				static constexpr uint16_t tag{ 808 };
				static constexpr int32_t PENDINGACCEPT{ 1 };
				static constexpr int32_t PENDINGRELEASE{ 2 };
				static constexpr int32_t PENDINGREVERSAL{ 3 };
				static constexpr int32_t ACCEPT{ 4 };
				static constexpr int32_t BLOCKLEVELREJECT{ 5 };
				static constexpr int32_t ACCOUNTLEVELREJECT{ 6 };
			};

			// UnderlyingPx(810): PRICE
			struct UnderlyingPx
			{
				static constexpr uint16_t tag{ 810 };
			};

			// PriceDelta(811): FLOAT
			struct PriceDelta
			{
				static constexpr uint16_t tag{ 811 };
			};

			// ApplQueueMax(812): INT
			struct ApplQueueMax
			{
				static constexpr uint16_t tag{ 812 };
			};

			// ApplQueueDepth(813): INT
			struct ApplQueueDepth
			{
				static constexpr uint16_t tag{ 813 };
			};

			// ApplQueueResolution(814): INT
			struct ApplQueueResolution
			{
				static constexpr uint16_t tag{ 814 };
				static constexpr int32_t NOACTIONTAKEN{ 0 };
				static constexpr int32_t QUEUEFLUSHED{ 1 };
				static constexpr int32_t OVERLAYLAST{ 2 };
				static constexpr int32_t ENDSESSION{ 3 };
			};

			// ApplQueueAction(815): INT
			struct ApplQueueAction
			{
				static constexpr uint16_t tag{ 815 };
				static constexpr int32_t NOACTIONTAKEN{ 0 };
				static constexpr int32_t QUEUEFLUSHED{ 1 };
				static constexpr int32_t OVERLAYLAST{ 2 };
				static constexpr int32_t ENDSESSION{ 3 };
			};

			// NoAltMDSource(816): NUMINGROUP
			struct NoAltMDSource
			{
				static constexpr uint16_t tag{ 816 };
			};

			// AltMDSourceID(817): STRING
			struct AltMDSourceID
			{
				static constexpr uint16_t tag{ 817 };
			};

			// SecondaryTradeReportID(818): STRING
			struct SecondaryTradeReportID
			{
				static constexpr uint16_t tag{ 818 };
			};

			// AvgPxIndicator(819): INT
			struct AvgPxIndicator
			{
				static constexpr uint16_t tag{ 819 };
				static constexpr int32_t NOAVERAGEPRICING{ 0 };
				static constexpr int32_t TRADEAVERAGEPRICEGROUP{ 1 };
				static constexpr int32_t LASTTRADEAVERAGEPRICEGROUP{ 2 };
			};

			// TradeLinkID(820): STRING
			struct TradeLinkID
			{
				static constexpr uint16_t tag{ 820 };
			};

			// OrderInputDevice(821): STRING
			struct OrderInputDevice
			{
				static constexpr uint16_t tag{ 821 };
			};

			// UnderlyingTradingSessionID(822): STRING
			struct UnderlyingTradingSessionID
			{
				static constexpr uint16_t tag{ 822 };
			};

			// UnderlyingTradingSessionSubID(823): STRING
			struct UnderlyingTradingSessionSubID
			{
				static constexpr uint16_t tag{ 823 };
			};

			// TradeLegRefID(824): STRING
			struct TradeLegRefID
			{
				static constexpr uint16_t tag{ 824 };
			};

			// ExchangeRule(825): STRING
			struct ExchangeRule
			{
				static constexpr uint16_t tag{ 825 };
			};

			// TradeAllocIndicator(826): INT
			struct TradeAllocIndicator
			{
				static constexpr uint16_t tag{ 826 };
				static constexpr int32_t ALLOCATIONNOTREQUIRED{ 0 };
				static constexpr int32_t ALLOCATIONREQUIREDALLOCATIONINFORMATIONNOTPROVIDED{ 1 };
				static constexpr int32_t USEALLOCATIONPROVIDEDWITHTHETRADE{ 2 };
			};

			// ExpirationCycle(827): INT
			struct ExpirationCycle
			{
				static constexpr uint16_t tag{ 827 };
				static constexpr int32_t EXPIREONTRADINGSESSIONCLOSE{ 0 };
				static constexpr int32_t EXPIREONTRADINGSESSIONOPEN{ 1 };
			};

			// TrdType(828): INT
			struct TrdType
			{
				static constexpr uint16_t tag{ 828 };
				static constexpr int32_t REGULARTRADE{ 0 };
				static constexpr int32_t BLOCKTRADE{ 1 };
				static constexpr int32_t AFTERHOURSTRADE{ 10 };
				static constexpr int32_t EFP{ 2 };
				static constexpr int32_t TRANSFER{ 3 };
				static constexpr int32_t LATETRADE{ 4 };
				static constexpr int32_t TTRADE{ 5 };
				static constexpr int32_t WEIGHTEDAVERAGEPRICETRADE{ 6 };
				static constexpr int32_t BUNCHEDTRADE{ 7 };
				static constexpr int32_t LATEBUNCHEDTRADE{ 8 };
				static constexpr int32_t PRIORREFERENCEPRICETRADE{ 9 };
			};

			// TrdSubType(829): INT
			struct TrdSubType
			{
				static constexpr uint16_t tag{ 829 };
			};

			// TransferReason(830): STRING
			struct TransferReason
			{
				static constexpr uint16_t tag{ 830 };
			};

			// AsgnReqID(831): STRING
			struct AsgnReqID
			{
				static constexpr uint16_t tag{ 831 };
			};

			// TotNumAssignmentReports(832): INT
			struct TotNumAssignmentReports
			{
				static constexpr uint16_t tag{ 832 };
			};

			// AsgnRptID(833): STRING
			struct AsgnRptID
			{
				static constexpr uint16_t tag{ 833 };
			};

			// ThresholdAmount(834): PRICEOFFSET
			struct ThresholdAmount
			{
				static constexpr uint16_t tag{ 834 };
			};

			// PegMoveType(835): INT
			struct PegMoveType
			{
				static constexpr uint16_t tag{ 835 };
				static constexpr int32_t FLOATING{ 0 };
				static constexpr int32_t FIXED{ 1 };
			};

			// PegOffsetType(836): INT
			struct PegOffsetType
			{
				static constexpr uint16_t tag{ 836 };
				static constexpr int32_t PRICE{ 0 };
				static constexpr int32_t BASISPOINTS{ 1 };
				static constexpr int32_t TICKS{ 2 };
				static constexpr int32_t PRICETIERLEVEL{ 3 };
			};

			// PegLimitType(837): INT
			struct PegLimitType
			{
				static constexpr uint16_t tag{ 837 };
				static constexpr int32_t ORBETTER{ 0 };
				static constexpr int32_t STRICT{ 1 };
				static constexpr int32_t ORWORSE{ 2 };
			};

			// PegRoundDirection(838): INT
			struct PegRoundDirection
			{
				static constexpr uint16_t tag{ 838 };
				static constexpr int32_t MOREAGGRESSIVE{ 1 };
				static constexpr int32_t MOREPASSIVE{ 2 };
			};

			// PeggedPrice(839): PRICE
			struct PeggedPrice
			{
				static constexpr uint16_t tag{ 839 };
			};

			// PegScope(840): INT
			struct PegScope
			{
				static constexpr uint16_t tag{ 840 };
				static constexpr int32_t LOCALEXCHANGEECNATS{ 1 };
				static constexpr int32_t NATIONAL{ 2 };
				static constexpr int32_t GLOBAL{ 3 };
				static constexpr int32_t NATIONALEXCLUDINGLOCAL{ 4 };
			};

			// DiscretionMoveType(841): INT
			struct DiscretionMoveType
			{
				static constexpr uint16_t tag{ 841 };
				static constexpr int32_t FLOATING{ 0 };
				static constexpr int32_t FIXED{ 1 };
			};

			// DiscretionOffsetType(842): INT
			struct DiscretionOffsetType
			{
				static constexpr uint16_t tag{ 842 };
				static constexpr int32_t PRICE{ 0 };
				static constexpr int32_t BASISPOINTS{ 1 };
				static constexpr int32_t TICKS{ 2 };
				static constexpr int32_t PRICETIERLEVEL{ 3 };
			};

			// DiscretionLimitType(843): INT
			struct DiscretionLimitType
			{
				static constexpr uint16_t tag{ 843 };
				static constexpr int32_t ORBETTER{ 0 };
				static constexpr int32_t STRICT{ 1 };
				static constexpr int32_t ORWORSE{ 2 };
			};

			// DiscretionRoundDirection(844): INT
			struct DiscretionRoundDirection
			{
				static constexpr uint16_t tag{ 844 };
				static constexpr int32_t MOREAGGRESSIVE{ 1 };
				static constexpr int32_t MOREPASSIVE{ 2 };
			};

			// DiscretionPrice(845): PRICE
			struct DiscretionPrice
			{
				static constexpr uint16_t tag{ 845 };
			};

			// DiscretionScope(846): INT
			struct DiscretionScope
			{
				static constexpr uint16_t tag{ 846 };
				static constexpr int32_t LOCALEXCHANGEECNATS{ 1 };
				static constexpr int32_t NATIONAL{ 2 };
				static constexpr int32_t GLOBAL{ 3 };
				static constexpr int32_t NATIONALEXCLUDINGLOCAL{ 4 };
			};

			// TargetStrategy(847): INT
			struct TargetStrategy
			{
				static constexpr uint16_t tag{ 847 };
				static constexpr int32_t VWAP{ 1 };
				static constexpr int32_t RESERVEDANDAVAILABLEFORBILATERALLYAGREEDUPONUSERDEFINEDVALUES{ 1000 };
				static constexpr int32_t PARTICIPATE{ 2 };
				static constexpr int32_t MININIZEMARKETIMPACT{ 3 };
			};

			// TargetStrategyParameters(848): STRING
			struct TargetStrategyParameters
			{
				static constexpr uint16_t tag{ 848 };
			};

			// ParticipationRate(849): PERCENTAGE
			struct ParticipationRate
			{
				static constexpr uint16_t tag{ 849 };
			};

			// TargetStrategyPerformance(850): FLOAT
			struct TargetStrategyPerformance
			{
				static constexpr uint16_t tag{ 850 };
			};

			// LastLiquidityInd(851): INT
			struct LastLiquidityInd
			{
				static constexpr uint16_t tag{ 851 };
				static constexpr int32_t ADDEDLIQUIDITY{ 1 };
				static constexpr int32_t REMOVEDLIQUIDITY{ 2 };
				static constexpr int32_t LIQUIDITYROUTEDOUT{ 3 };
			};

			// PublishTrdIndicator(852): BOOLEAN
			struct PublishTrdIndicator
			{
				static constexpr uint16_t tag{ 852 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// ShortSaleReason(853): INT
			struct ShortSaleReason
			{
				static constexpr uint16_t tag{ 853 };
				static constexpr int32_t DEALERSOLDSHORT{ 0 };
				static constexpr int32_t DEALERSOLDSHORTEXEMPT{ 1 };
				static constexpr int32_t SELLINGCUSTOMERSOLDSHORT{ 2 };
				static constexpr int32_t SELLINGCUSTOMERSOLDSHORTEXEMPT{ 3 };
				static constexpr int32_t QSRORAGUCONTRASIDESOLDSHORT{ 4 };
				static constexpr int32_t QSRORAGUCONTRASIDESOLDSHORTEXEMPT{ 5 };
			};

			// QtyType(854): INT
			struct QtyType
			{
				static constexpr uint16_t tag{ 854 };
				static constexpr int32_t UNITS{ 0 };
				static constexpr int32_t CONTRACTS{ 1 };
			};

			// SecondaryTrdType(855): INT
			struct SecondaryTrdType
			{
				static constexpr uint16_t tag{ 855 };
			};

			// TradeReportType(856): INT
			struct TradeReportType
			{
				static constexpr uint16_t tag{ 856 };
				static constexpr int32_t SUBMIT{ 0 };
				static constexpr int32_t ALLEGED{ 1 };
				static constexpr int32_t ACCEPT{ 2 };
				static constexpr int32_t DECLINE{ 3 };
				static constexpr int32_t ADDENDUM{ 4 };
				static constexpr int32_t NOWAS{ 5 };
				static constexpr int32_t TRADEREPORTCANCEL{ 6 };
				static constexpr int32_t LOCKEDINTRADEBREAK{ 7 };
			};

			// AllocNoOrdersType(857): INT
			struct AllocNoOrdersType
			{
				static constexpr uint16_t tag{ 857 };
				static constexpr int32_t NOTSPECIFIED{ 0 };
				static constexpr int32_t EXPLICITLISTPROVIDED{ 1 };
			};

			// SharedCommission(858): AMT
			struct SharedCommission
			{
				static constexpr uint16_t tag{ 858 };
			};

			// ConfirmReqID(859): STRING
			struct ConfirmReqID
			{
				static constexpr uint16_t tag{ 859 };
			};

			// AvgParPx(860): PRICE
			struct AvgParPx
			{
				static constexpr uint16_t tag{ 860 };
			};

			// ReportedPx(861): PRICE
			struct ReportedPx
			{
				static constexpr uint16_t tag{ 861 };
			};

			// NoCapacities(862): NUMINGROUP
			struct NoCapacities
			{
				static constexpr uint16_t tag{ 862 };
			};

			// OrderCapacityQty(863): QTY
			struct OrderCapacityQty
			{
				static constexpr uint16_t tag{ 863 };
			};

			// NoEvents(864): NUMINGROUP
			struct NoEvents
			{
				static constexpr uint16_t tag{ 864 };
			};

			// EventType(865): INT
			struct EventType
			{
				static constexpr uint16_t tag{ 865 };
				static constexpr int32_t PUT{ 1 };
				static constexpr int32_t CALL{ 2 };
				static constexpr int32_t TENDER{ 3 };
				static constexpr int32_t SINKINGFUNDCALL{ 4 };
				static constexpr int32_t OTHER{ 99 };
			};

			// EventDate(866): LOCALMKTDATE
			struct EventDate
			{
				static constexpr uint16_t tag{ 866 };
			};

			// EventPx(867): PRICE
			struct EventPx
			{
				static constexpr uint16_t tag{ 867 };
			};

			// EventText(868): STRING
			struct EventText
			{
				static constexpr uint16_t tag{ 868 };
			};

			// PctAtRisk(869): PERCENTAGE
			struct PctAtRisk
			{
				static constexpr uint16_t tag{ 869 };
			};

			// NoInstrAttrib(870): NUMINGROUP
			struct NoInstrAttrib
			{
				static constexpr uint16_t tag{ 870 };
			};

			// InstrAttribType(871): INT
			struct InstrAttribType
			{
				static constexpr uint16_t tag{ 871 };
				static constexpr int32_t FLAT{ 1 };
				static constexpr int32_t ORIGINALISSUEDISCOUNT{ 10 };
				static constexpr int32_t CALLABLEPUTTABLE{ 11 };
				static constexpr int32_t ESCROWEDTOMATURITY{ 12 };
				static constexpr int32_t ESCROWEDTOREDEMPTIONDATE{ 13 };
				static constexpr int32_t PREREFUNDED{ 14 };
				static constexpr int32_t INDEFAULT{ 15 };
				static constexpr int32_t UNRATED{ 16 };
				static constexpr int32_t TAXABLE{ 17 };
				static constexpr int32_t INDEXED{ 18 };
				static constexpr int32_t SUBJECTTOALTERNATIVEMINIMUMTAX{ 19 };
				static constexpr int32_t ZEROCOUPON{ 2 };
				static constexpr int32_t ORIGINALISSUEDISCOUNTPRICE{ 20 };
				static constexpr int32_t CALLABLEBELOWMATURITYVALUE{ 21 };
				static constexpr int32_t CALLABLEWITHOUTNOTICEBYMAILTOHOLDERUNLESSREGISTERED{ 22 };
				static constexpr int32_t INTERESTBEARING{ 3 };
				static constexpr int32_t NOPERIODICPAYMENTS{ 4 };
				static constexpr int32_t VARIABLERATE{ 5 };
				static constexpr int32_t LESSFEEFORPUT{ 6 };
				static constexpr int32_t STEPPEDCOUPON{ 7 };
				static constexpr int32_t COUPONPERIOD{ 8 };
				static constexpr int32_t WHENISSUED{ 9 };
				static constexpr int32_t TEXT{ 99 };
			};

			// InstrAttribValue(872): STRING
			struct InstrAttribValue
			{
				static constexpr uint16_t tag{ 872 };
			};

			// DatedDate(873): LOCALMKTDATE
			struct DatedDate
			{
				static constexpr uint16_t tag{ 873 };
			};

			// InterestAccrualDate(874): LOCALMKTDATE
			struct InterestAccrualDate
			{
				static constexpr uint16_t tag{ 874 };
			};

			// CPProgram(875): INT
			struct CPProgram
			{
				static constexpr uint16_t tag{ 875 };
				static constexpr int32_t _3A3{ 1 };
				static constexpr int32_t _42{ 2 };
				static constexpr int32_t OTHER{ 99 };
			};

			// CPRegType(876): STRING
			struct CPRegType
			{
				static constexpr uint16_t tag{ 876 };
			};

			// UnderlyingCPProgram(877): STRING
			struct UnderlyingCPProgram
			{
				static constexpr uint16_t tag{ 877 };
			};

			// UnderlyingCPRegType(878): STRING
			struct UnderlyingCPRegType
			{
				static constexpr uint16_t tag{ 878 };
			};

			// UnderlyingQty(879): QTY
			struct UnderlyingQty
			{
				static constexpr uint16_t tag{ 879 };
			};

			// TrdMatchID(880): STRING
			struct TrdMatchID
			{
				static constexpr uint16_t tag{ 880 };
			};

			// SecondaryTradeReportRefID(881): STRING
			struct SecondaryTradeReportRefID
			{
				static constexpr uint16_t tag{ 881 };
			};

			// UnderlyingDirtyPrice(882): PRICE
			struct UnderlyingDirtyPrice
			{
				static constexpr uint16_t tag{ 882 };
			};

			// UnderlyingEndPrice(883): PRICE
			struct UnderlyingEndPrice
			{
				static constexpr uint16_t tag{ 883 };
			};

			// UnderlyingStartValue(884): AMT
			struct UnderlyingStartValue
			{
				static constexpr uint16_t tag{ 884 };
			};

			// UnderlyingCurrentValue(885): AMT
			struct UnderlyingCurrentValue
			{
				static constexpr uint16_t tag{ 885 };
			};

			// UnderlyingEndValue(886): AMT
			struct UnderlyingEndValue
			{
				static constexpr uint16_t tag{ 886 };
			};

			// NoUnderlyingStips(887): NUMINGROUP
			struct NoUnderlyingStips
			{
				static constexpr uint16_t tag{ 887 };
			};

			// UnderlyingStipType(888): STRING
			struct UnderlyingStipType
			{
				static constexpr uint16_t tag{ 888 };
			};

			// UnderlyingStipValue(889): STRING
			struct UnderlyingStipValue
			{
				static constexpr uint16_t tag{ 889 };
			};

			// MaturityNetMoney(890): AMT
			struct MaturityNetMoney
			{
				static constexpr uint16_t tag{ 890 };
			};

			// MiscFeeBasis(891): INT
			struct MiscFeeBasis
			{
				static constexpr uint16_t tag{ 891 };
				static constexpr int32_t ABSOLUTE{ 0 };
				static constexpr int32_t PERUNIT{ 1 };
				static constexpr int32_t PERCENTAGE{ 2 };
			};

			// TotNoAllocs(892): INT
			struct TotNoAllocs
			{
				static constexpr uint16_t tag{ 892 };
			};

			// LastFragment(893): BOOLEAN
			struct LastFragment
			{
				static constexpr uint16_t tag{ 893 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// CollReqID(894): STRING
			struct CollReqID
			{
				static constexpr uint16_t tag{ 894 };
			};

			// CollAsgnReason(895): INT
			struct CollAsgnReason
			{
				static constexpr uint16_t tag{ 895 };
				static constexpr int32_t INITIAL{ 0 };
				static constexpr int32_t SCHEDULED{ 1 };
				static constexpr int32_t TIMEWARNING{ 2 };
				static constexpr int32_t MARGINDEFICIENCY{ 3 };
				static constexpr int32_t MARGINEXCESS{ 4 };
				static constexpr int32_t FORWARDCOLLATERALDEMAND{ 5 };
				static constexpr int32_t EVENTOFDEFAULT{ 6 };
				static constexpr int32_t ADVERSETAXEVENT{ 7 };
			};

			// CollInquiryQualifier(896): INT
			struct CollInquiryQualifier
			{
				static constexpr uint16_t tag{ 896 };
				static constexpr int32_t TRADEDATE{ 0 };
				static constexpr int32_t GCINSTRUMENT{ 1 };
				static constexpr int32_t COLLATERALINSTRUMENT{ 2 };
				static constexpr int32_t SUBSTITUTIONELIGIBLE{ 3 };
				static constexpr int32_t NOTASSIGNED{ 4 };
				static constexpr int32_t PARTIALLYASSIGNED{ 5 };
				static constexpr int32_t FULLYASSIGNED{ 6 };
				static constexpr int32_t OUTSTANDINGTRADES{ 7 };
			};

			// NoTrades(897): NUMINGROUP
			struct NoTrades
			{
				static constexpr uint16_t tag{ 897 };
			};

			// MarginRatio(898): PERCENTAGE
			struct MarginRatio
			{
				static constexpr uint16_t tag{ 898 };
			};

			// MarginExcess(899): AMT
			struct MarginExcess
			{
				static constexpr uint16_t tag{ 899 };
			};

			// TotalNetValue(900): AMT
			struct TotalNetValue
			{
				static constexpr uint16_t tag{ 900 };
			};

			// CashOutstanding(901): AMT
			struct CashOutstanding
			{
				static constexpr uint16_t tag{ 901 };
			};

			// CollAsgnID(902): STRING
			struct CollAsgnID
			{
				static constexpr uint16_t tag{ 902 };
			};

			// CollAsgnTransType(903): INT
			struct CollAsgnTransType
			{
				static constexpr uint16_t tag{ 903 };
				static constexpr int32_t NEW{ 0 };
				static constexpr int32_t REPLACE{ 1 };
				static constexpr int32_t CANCEL{ 2 };
				static constexpr int32_t RELEASE{ 3 };
				static constexpr int32_t REVERSE{ 4 };
			};

			// CollRespID(904): STRING
			struct CollRespID
			{
				static constexpr uint16_t tag{ 904 };
			};

			// CollAsgnRespType(905): INT
			struct CollAsgnRespType
			{
				static constexpr uint16_t tag{ 905 };
				static constexpr int32_t RECEIVED{ 0 };
				static constexpr int32_t ACCEPTED{ 1 };
				static constexpr int32_t DECLINED{ 2 };
				static constexpr int32_t REJECTED{ 3 };
			};

			// CollAsgnRejectReason(906): INT
			struct CollAsgnRejectReason
			{
				static constexpr uint16_t tag{ 906 };
				static constexpr int32_t UNKNOWNDEAL{ 0 };
				static constexpr int32_t UNKNOWNORINVALIDINSTRUMENT{ 1 };
				static constexpr int32_t UNAUTHORIZEDTRANSACTION{ 2 };
				static constexpr int32_t INSUFFICIENTCOLLATERAL{ 3 };
				static constexpr int32_t INVALIDTYPEOFCOLLATERAL{ 4 };
				static constexpr int32_t EXCESSIVESUBSTITUTION{ 5 };
				static constexpr int32_t OTHER{ 99 };
			};

			// CollAsgnRefID(907): STRING
			struct CollAsgnRefID
			{
				static constexpr uint16_t tag{ 907 };
			};

			// CollRptID(908): STRING
			struct CollRptID
			{
				static constexpr uint16_t tag{ 908 };
			};

			// CollInquiryID(909): STRING
			struct CollInquiryID
			{
				static constexpr uint16_t tag{ 909 };
			};

			// CollStatus(910): INT
			struct CollStatus
			{
				static constexpr uint16_t tag{ 910 };
				static constexpr int32_t UNASSIGNED{ 0 };
				static constexpr int32_t PARTIALLYASSIGNED{ 1 };
				static constexpr int32_t ASSIGNMENTPROPOSED{ 2 };
				static constexpr int32_t ASSIGNEDACCEPTED{ 3 };
				static constexpr int32_t CHALLENGED{ 4 };
			};

			// TotNumReports(911): INT
			struct TotNumReports
			{
				static constexpr uint16_t tag{ 911 };
			};

			// LastRptRequested(912): BOOLEAN
			struct LastRptRequested
			{
				static constexpr uint16_t tag{ 912 };
				static constexpr char NO{ 'N' };
				static constexpr char YES{ 'Y' };
			};

			// AgreementDesc(913): STRING
			struct AgreementDesc
			{
				static constexpr uint16_t tag{ 913 };
			};

			// AgreementID(914): STRING
			struct AgreementID
			{
				static constexpr uint16_t tag{ 914 };
			};

			// AgreementDate(915): LOCALMKTDATE
			struct AgreementDate
			{
				static constexpr uint16_t tag{ 915 };
			};

			// StartDate(916): LOCALMKTDATE
			struct StartDate
			{
				static constexpr uint16_t tag{ 916 };
			};

			// EndDate(917): LOCALMKTDATE
			struct EndDate
			{
				static constexpr uint16_t tag{ 917 };
			};

			// AgreementCurrency(918): CURRENCY
			struct AgreementCurrency
			{
				static constexpr uint16_t tag{ 918 };
			};

			// DeliveryType(919): INT
			struct DeliveryType
			{
				static constexpr uint16_t tag{ 919 };
				static constexpr int32_t VERSUSPAYMENT{ 0 };
				static constexpr int32_t FREE{ 1 };
				static constexpr int32_t TRIPARTY{ 2 };
				static constexpr int32_t HOLDINCUSTODY{ 3 };
			};

			// EndAccruedInterestAmt(920): AMT
			struct EndAccruedInterestAmt
			{
				static constexpr uint16_t tag{ 920 };
			};

			// StartCash(921): AMT
			struct StartCash
			{
				static constexpr uint16_t tag{ 921 };
			};

			// EndCash(922): AMT
			struct EndCash
			{
				static constexpr uint16_t tag{ 922 };
			};

			// UserRequestID(923): STRING
			struct UserRequestID
			{
				static constexpr uint16_t tag{ 923 };
			};

			// UserRequestType(924): INT
			struct UserRequestType
			{
				static constexpr uint16_t tag{ 924 };
				static constexpr int32_t LOGONUSER{ 1 };
				static constexpr int32_t LOGOFFUSER{ 2 };
				static constexpr int32_t CHANGEPASSWORDFORUSER{ 3 };
				static constexpr int32_t REQUESTINDIVIDUALUSERSTATUS{ 4 };
			};

			// NewPassword(925): STRING
			struct NewPassword
			{
				static constexpr uint16_t tag{ 925 };
			};

			// UserStatus(926): INT
			struct UserStatus
			{
				static constexpr uint16_t tag{ 926 };
				static constexpr int32_t LOGGEDIN{ 1 };
				static constexpr int32_t NOTLOGGEDIN{ 2 };
				static constexpr int32_t USERNOTRECOGNISED{ 3 };
				static constexpr int32_t PASSWORDINCORRECT{ 4 };
				static constexpr int32_t PASSWORDCHANGED{ 5 };
				static constexpr int32_t OTHER{ 6 };
			};

			// UserStatusText(927): STRING
			struct UserStatusText
			{
				static constexpr uint16_t tag{ 927 };
			};

			// StatusValue(928): INT
			struct StatusValue
			{
				static constexpr uint16_t tag{ 928 };
				static constexpr int32_t CONNECTED{ 1 };
				static constexpr int32_t NOTCONNECTEDDOWNEXPECTEDUP{ 2 };
				static constexpr int32_t NOTCONNECTEDDOWNEXPECTEDDOWN{ 3 };
				static constexpr int32_t INPROCESS{ 4 };
			};

			// StatusText(929): STRING
			struct StatusText
			{
				static constexpr uint16_t tag{ 929 };
			};

			// RefCompID(930): STRING
			struct RefCompID
			{
				static constexpr uint16_t tag{ 930 };
			};

			// RefSubID(931): STRING
			struct RefSubID
			{
				static constexpr uint16_t tag{ 931 };
			};

			// NetworkResponseID(932): STRING
			struct NetworkResponseID
			{
				static constexpr uint16_t tag{ 932 };
			};

			// NetworkRequestID(933): STRING
			struct NetworkRequestID
			{
				static constexpr uint16_t tag{ 933 };
			};

			// LastNetworkResponseID(934): STRING
			struct LastNetworkResponseID
			{
				static constexpr uint16_t tag{ 934 };
			};

			// NetworkRequestType(935): INT
			struct NetworkRequestType
			{
				static constexpr uint16_t tag{ 935 };
				static constexpr int32_t SNAPSHOT{ 1 };
				static constexpr int32_t SUBSCRIBE{ 2 };
				static constexpr int32_t STOPSUBSCRIBING{ 4 };
				static constexpr int32_t LEVELOFDETAIL{ 8 };
			};

			// NoCompIDs(936): NUMINGROUP
			struct NoCompIDs
			{
				static constexpr uint16_t tag{ 936 };
			};

			// NetworkStatusResponseType(937): INT
			struct NetworkStatusResponseType
			{
				static constexpr uint16_t tag{ 937 };
				static constexpr int32_t FULL{ 1 };
				static constexpr int32_t INCREMENTALUPDATE{ 2 };
			};

			// NoCollInquiryQualifier(938): NUMINGROUP
			struct NoCollInquiryQualifier
			{
				static constexpr uint16_t tag{ 938 };
			};

			// TrdRptStatus(939): INT
			struct TrdRptStatus
			{
				static constexpr uint16_t tag{ 939 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t REJECTED{ 1 };
			};

			// AffirmStatus(940): INT
			struct AffirmStatus
			{
				static constexpr uint16_t tag{ 940 };
				static constexpr int32_t RECEIVED{ 1 };
				static constexpr int32_t CONFIRMREJECTED{ 2 };
				static constexpr int32_t AFFIRMED{ 3 };
			};

			// UnderlyingStrikeCurrency(941): CURRENCY
			struct UnderlyingStrikeCurrency
			{
				static constexpr uint16_t tag{ 941 };
			};

			// LegStrikeCurrency(942): CURRENCY
			struct LegStrikeCurrency
			{
				static constexpr uint16_t tag{ 942 };
			};

			// TimeBracket(943): STRING
			struct TimeBracket
			{
				static constexpr uint16_t tag{ 943 };
			};

			// CollAction(944): INT
			struct CollAction
			{
				static constexpr uint16_t tag{ 944 };
				static constexpr int32_t RETAIN{ 0 };
				static constexpr int32_t ADD{ 1 };
				static constexpr int32_t REMOVE{ 2 };
			};

			// CollInquiryStatus(945): INT
			struct CollInquiryStatus
			{
				static constexpr uint16_t tag{ 945 };
				static constexpr int32_t ACCEPTED{ 0 };
				static constexpr int32_t ACCEPTEDWITHWARNINGS{ 1 };
				static constexpr int32_t COMPLETED{ 2 };
				static constexpr int32_t COMPLETEDWITHWARNINGS{ 3 };
				static constexpr int32_t REJECTED{ 4 };
			};

			// CollInquiryResult(946): INT
			struct CollInquiryResult
			{
				static constexpr uint16_t tag{ 946 };
				static constexpr int32_t SUCCESSFUL{ 0 };
				static constexpr int32_t INVALIDORUNKNOWNINSTRUMENT{ 1 };
				static constexpr int32_t INVALIDORUNKNOWNCOLLATERALTYPE{ 2 };
				static constexpr int32_t INVALIDPARTIES{ 3 };
				static constexpr int32_t INVALIDTRANSPORTTYPEREQUESTED{ 4 };
				static constexpr int32_t INVALIDDESTINATIONREQUESTED{ 5 };
				static constexpr int32_t NOCOLLATERALFOUNDFORTHETRADESPECIFIED{ 6 };
				static constexpr int32_t NOCOLLATERALFOUNDFORTHEORDERSPECIFIED{ 7 };
				static constexpr int32_t COLLATERALINQUIRYTYPENOTSUPPORTED{ 8 };
				static constexpr int32_t UNAUTHORIZEDFORCOLLATERALINQUIRY{ 9 };
				static constexpr int32_t OTHER{ 99 };
			};

			// StrikeCurrency(947): CURRENCY
			struct StrikeCurrency
			{
				static constexpr uint16_t tag{ 947 };
			};

			// NoNested3PartyIDs(948): NUMINGROUP
			struct NoNested3PartyIDs
			{
				static constexpr uint16_t tag{ 948 };
			};

			// Nested3PartyID(949): STRING
			struct Nested3PartyID
			{
				static constexpr uint16_t tag{ 949 };
			};

			// Nested3PartyIDSource(950): CHAR
			struct Nested3PartyIDSource
			{
				static constexpr uint16_t tag{ 950 };
			};

			// Nested3PartyRole(951): INT
			struct Nested3PartyRole
			{
				static constexpr uint16_t tag{ 951 };
			};

			// NoNested3PartySubIDs(952): NUMINGROUP
			struct NoNested3PartySubIDs
			{
				static constexpr uint16_t tag{ 952 };
			};

			// Nested3PartySubID(953): STRING
			struct Nested3PartySubID
			{
				static constexpr uint16_t tag{ 953 };
			};

			// Nested3PartySubIDType(954): INT
			struct Nested3PartySubIDType
			{
				static constexpr uint16_t tag{ 954 };
			};

			// LegContractSettlMonth(955): MONTHYEAR
			struct LegContractSettlMonth
			{
				static constexpr uint16_t tag{ 955 };
			};

			// LegInterestAccrualDate(956): LOCALMKTDATE
			struct LegInterestAccrualDate
			{
				static constexpr uint16_t tag{ 956 };
			};
		}
	}
}

#endif // UFECPP_CONSTS_fb30d5f9_9b77_46fc_8180_e72eef58bfa1_